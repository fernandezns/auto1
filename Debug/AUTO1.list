
AUTO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000855c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008900  08008900  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008900  08008900  00018900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008908  08008908  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008908  08008908  00018908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800890c  0800890c  0001890c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  20000010  08008920  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  08008920  00020798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ea5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fc  00000000  00000000  00033ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  000361e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  000372b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017adc  00000000  00000000  000382e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141e9  00000000  00000000  0004fdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b110  00000000  00000000  00063fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff0bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000487c  00000000  00000000  000ff110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080086d8 	.word	0x080086d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080086d8 	.word	0x080086d8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	indexADC++;
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <HAL_ADC_ConvCpltCallback+0x34>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	3301      	adds	r3, #1
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_ADC_ConvCpltCallback+0x34>)
 80004e0:	701a      	strb	r2, [r3, #0]
	if(indexADC == 32)
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <HAL_ADC_ConvCpltCallback+0x34>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2b20      	cmp	r3, #32
 80004ea:	d102      	bne.n	80004f2 <HAL_ADC_ConvCpltCallback+0x26>
		indexADC=0;
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <HAL_ADC_ConvCpltCallback+0x34>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000042 	.word	0x20000042

08000504 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(&(*huart)==&huart2){
		//indexW_PC++;
		//HAL_UART_Receive_IT(&huart2, &bufferPC[indexW_PC], 1);
	}

	if(&(*huart)==&huart1){
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <HAL_UART_RxCpltCallback+0x3c>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d111      	bne.n	8000538 <HAL_UART_RxCpltCallback+0x34>
		indexW_RxESP++;
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_UART_RxCpltCallback+0x40>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	b2db      	uxtb	r3, r3
 800051a:	3301      	adds	r3, #1
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <HAL_UART_RxCpltCallback+0x40>)
 8000520:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &bufferRxESP[indexW_RxESP], 1);
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_UART_RxCpltCallback+0x40>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	b2db      	uxtb	r3, r3
 8000528:	461a      	mov	r2, r3
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <HAL_UART_RxCpltCallback+0x44>)
 800052c:	4413      	add	r3, r2
 800052e:	2201      	movs	r2, #1
 8000530:	4619      	mov	r1, r3
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <HAL_UART_RxCpltCallback+0x3c>)
 8000534:	f007 f947 	bl	80077c6 <HAL_UART_Receive_IT>
	}
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000288 	.word	0x20000288
 8000544:	2000002f 	.word	0x2000002f
 8000548:	20000048 	.word	0x20000048

0800054c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){	//TIMER 4:	500us
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d13a      	bne.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0x88>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADCData[indexADC],8);
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	011b      	lsls	r3, r3, #4
 8000566:	4a1f      	ldr	r2, [pc, #124]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000568:	4413      	add	r3, r2
 800056a:	2208      	movs	r2, #8
 800056c:	4619      	mov	r1, r3
 800056e:	481e      	ldr	r0, [pc, #120]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000570:	f002 fb8a 	bl	8002c88 <HAL_ADC_Start_DMA>
		if(timeOut>0)
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	b29b      	uxth	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d006      	beq.n	800058c <HAL_TIM_PeriodElapsedCallback+0x40>
			timeOut--;
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	b29b      	uxth	r3, r3
 8000584:	3b01      	subs	r3, #1
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800058a:	801a      	strh	r2, [r3, #0]
		if(timeOut2>0)
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	b29b      	uxth	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d006      	beq.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x58>
			timeOut2--;
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	b29b      	uxth	r3, r3
 800059c:	3b01      	subs	r3, #1
 800059e:	b29a      	uxth	r2, r3
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005a2:	801a      	strh	r2, [r3, #0]
		if(timeOut3>0)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d006      	beq.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x70>
			timeOut3--;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	3b01      	subs	r3, #1
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80005ba:	801a      	strh	r2, [r3, #0]
		if(timeOut4>0)
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d006      	beq.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0x88>
			timeOut4--;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	3b01      	subs	r3, #1
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005d2:	801a      	strh	r2, [r3, #0]
	}
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40000800 	.word	0x40000800
 80005e0:	20000042 	.word	0x20000042
 80005e4:	20000534 	.word	0x20000534
 80005e8:	2000023c 	.word	0x2000023c
 80005ec:	20000034 	.word	0x20000034
 80005f0:	20000036 	.word	0x20000036
 80005f4:	20000038 	.word	0x20000038
 80005f8:	2000003a 	.word	0x2000003a

080005fc <readADC>:

void readADC(){
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	if(indexADC>0)
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <readADC+0x2c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d009      	beq.n	800061e <readADC+0x22>
		valueADC.u16[0]=ADCData[indexADC-1][0];
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <readADC+0x2c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	3b01      	subs	r3, #1
 8000612:	4a06      	ldr	r2, [pc, #24]	; (800062c <readADC+0x30>)
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	4413      	add	r3, r2
 8000618:	881a      	ldrh	r2, [r3, #0]
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <readADC+0x34>)
 800061c:	801a      	strh	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	20000042 	.word	0x20000042
 800062c:	20000534 	.word	0x20000534
 8000630:	200001e4 	.word	0x200001e4

08000634 <uartTX>:

void uartTX(uint8_t uart){
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]

	if(uart == UART_PC ){
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d117      	bne.n	8000674 <uartTX+0x40>
		if((huart2.Instance->SR & UART_FLAG_TXE)==UART_FLAG_TXE){
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <uartTX+0x84>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064e:	2b80      	cmp	r3, #128	; 0x80
 8000650:	d110      	bne.n	8000674 <uartTX+0x40>
			huart2.Instance->DR=bufferDebug[indexR_Debug];
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <uartTX+0x88>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <uartTX+0x8c>)
 800065c:	5c9b      	ldrb	r3, [r3, r2]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <uartTX+0x84>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
			indexR_Debug++;
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <uartTX+0x88>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <uartTX+0x88>)
 8000672:	701a      	strb	r2, [r3, #0]
		}
	}

	if(uart == UART_ESP ){
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d117      	bne.n	80006aa <uartTX+0x76>
		if((huart1.Instance->SR & UART_FLAG_TXE)==UART_FLAG_TXE){
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <uartTX+0x90>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000684:	2b80      	cmp	r3, #128	; 0x80
 8000686:	d110      	bne.n	80006aa <uartTX+0x76>
			huart1.Instance->DR=bufferTxESP[indexR_TxESP];
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <uartTX+0x94>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <uartTX+0x98>)
 8000692:	5c9b      	ldrb	r3, [r3, r2]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <uartTX+0x90>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
			indexR_TxESP++;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <uartTX+0x94>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	3301      	adds	r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <uartTX+0x94>)
 80006a8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000734 	.word	0x20000734
 80006bc:	20000030 	.word	0x20000030
 80006c0:	20000430 	.word	0x20000430
 80006c4:	20000288 	.word	0x20000288
 80006c8:	2000002c 	.word	0x2000002c
 80006cc:	200002cc 	.word	0x200002cc

080006d0 <initESP>:

void  initESP(){
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	af00      	add	r7, sp, #0

	if(readyToSend){
 80006d4:	4b69      	ldr	r3, [pc, #420]	; (800087c <initESP+0x1ac>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	f000 80cb 	beq.w	8000874 <initESP+0x1a4>
		switch(AT){
 80006de:	4b68      	ldr	r3, [pc, #416]	; (8000880 <initESP+0x1b0>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	f200 80c7 	bhi.w	8000876 <initESP+0x1a6>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <initESP+0x20>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	0800070d 	.word	0x0800070d
 80006f4:	0800073f 	.word	0x0800073f
 80006f8:	0800074f 	.word	0x0800074f
 80006fc:	080007a5 	.word	0x080007a5
 8000700:	080007d7 	.word	0x080007d7
 8000704:	0800080b 	.word	0x0800080b
 8000708:	08000867 	.word	0x08000867
			case 0:
				memcpy(&bufferTxESP[indexW_TxESP],CWMODE,13);
 800070c:	4b5d      	ldr	r3, [pc, #372]	; (8000884 <initESP+0x1b4>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	4b5c      	ldr	r3, [pc, #368]	; (8000888 <initESP+0x1b8>)
 8000716:	4413      	add	r3, r2
 8000718:	220d      	movs	r2, #13
 800071a:	495c      	ldr	r1, [pc, #368]	; (800088c <initESP+0x1bc>)
 800071c:	4618      	mov	r0, r3
 800071e:	f007 ffc5 	bl	80086ac <memcpy>
				indexW_TxESP+=13;
 8000722:	4b58      	ldr	r3, [pc, #352]	; (8000884 <initESP+0x1b4>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	330d      	adds	r3, #13
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b55      	ldr	r3, [pc, #340]	; (8000884 <initESP+0x1b4>)
 800072e:	701a      	strb	r2, [r3, #0]
				timeOut2=200;
 8000730:	4b57      	ldr	r3, [pc, #348]	; (8000890 <initESP+0x1c0>)
 8000732:	22c8      	movs	r2, #200	; 0xc8
 8000734:	801a      	strh	r2, [r3, #0]
				readyToSend=0;
 8000736:	4b51      	ldr	r3, [pc, #324]	; (800087c <initESP+0x1ac>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
				break;
 800073c:	e09b      	b.n	8000876 <initESP+0x1a6>
			case 1:
				timeOut2=20000;
 800073e:	4b54      	ldr	r3, [pc, #336]	; (8000890 <initESP+0x1c0>)
 8000740:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000744:	801a      	strh	r2, [r3, #0]
				readyToSend=0;
 8000746:	4b4d      	ldr	r3, [pc, #308]	; (800087c <initESP+0x1ac>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
				break;
 800074c:	e093      	b.n	8000876 <initESP+0x1a6>
			case 2:
				memcpy(&bufferTxESP[indexW_TxESP],CWJAP_MEGA,LONG_CWJAP_MEGA);
 800074e:	4b4d      	ldr	r3, [pc, #308]	; (8000884 <initESP+0x1b4>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	4b4c      	ldr	r3, [pc, #304]	; (8000888 <initESP+0x1b8>)
 8000758:	4413      	add	r3, r2
 800075a:	4a4e      	ldr	r2, [pc, #312]	; (8000894 <initESP+0x1c4>)
 800075c:	4614      	mov	r4, r2
 800075e:	469c      	mov	ip, r3
 8000760:	f104 0e20 	add.w	lr, r4, #32
 8000764:	4665      	mov	r5, ip
 8000766:	4626      	mov	r6, r4
 8000768:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800076a:	6028      	str	r0, [r5, #0]
 800076c:	6069      	str	r1, [r5, #4]
 800076e:	60aa      	str	r2, [r5, #8]
 8000770:	60eb      	str	r3, [r5, #12]
 8000772:	3410      	adds	r4, #16
 8000774:	f10c 0c10 	add.w	ip, ip, #16
 8000778:	4574      	cmp	r4, lr
 800077a:	d1f3      	bne.n	8000764 <initESP+0x94>
 800077c:	4662      	mov	r2, ip
 800077e:	4623      	mov	r3, r4
 8000780:	cb03      	ldmia	r3!, {r0, r1}
 8000782:	6010      	str	r0, [r2, #0]
 8000784:	6051      	str	r1, [r2, #4]
				indexW_TxESP+=LONG_CWJAP_MEGA;
 8000786:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <initESP+0x1b4>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3328      	adds	r3, #40	; 0x28
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <initESP+0x1b4>)
 8000792:	701a      	strb	r2, [r3, #0]
				timeOut2=2000;
 8000794:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <initESP+0x1c0>)
 8000796:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800079a:	801a      	strh	r2, [r3, #0]
				readyToSend=0;
 800079c:	4b37      	ldr	r3, [pc, #220]	; (800087c <initESP+0x1ac>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
				break;
 80007a2:	e068      	b.n	8000876 <initESP+0x1a6>
			case 3:
				memcpy(&bufferTxESP[indexW_TxESP],CIPMUX,13);
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <initESP+0x1b4>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <initESP+0x1b8>)
 80007ae:	4413      	add	r3, r2
 80007b0:	220d      	movs	r2, #13
 80007b2:	4939      	ldr	r1, [pc, #228]	; (8000898 <initESP+0x1c8>)
 80007b4:	4618      	mov	r0, r3
 80007b6:	f007 ff79 	bl	80086ac <memcpy>
				indexW_TxESP+=13;
 80007ba:	4b32      	ldr	r3, [pc, #200]	; (8000884 <initESP+0x1b4>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	330d      	adds	r3, #13
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <initESP+0x1b4>)
 80007c6:	701a      	strb	r2, [r3, #0]
				timeOut2=200;
 80007c8:	4b31      	ldr	r3, [pc, #196]	; (8000890 <initESP+0x1c0>)
 80007ca:	22c8      	movs	r2, #200	; 0xc8
 80007cc:	801a      	strh	r2, [r3, #0]
				readyToSend=0;
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <initESP+0x1ac>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
				break;
 80007d4:	e04f      	b.n	8000876 <initESP+0x1a6>
			case 4:
				memcpy(&bufferTxESP[indexW_TxESP],CIFSR,10);
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <initESP+0x1b4>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <initESP+0x1b8>)
 80007e0:	4413      	add	r3, r2
 80007e2:	220a      	movs	r2, #10
 80007e4:	492d      	ldr	r1, [pc, #180]	; (800089c <initESP+0x1cc>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f007 ff60 	bl	80086ac <memcpy>
				indexW_TxESP+=10;
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <initESP+0x1b4>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	330a      	adds	r3, #10
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <initESP+0x1b4>)
 80007f8:	701a      	strb	r2, [r3, #0]
				timeOut2=4000;
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <initESP+0x1c0>)
 80007fc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000800:	801a      	strh	r2, [r3, #0]
				readyToSend=0;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <initESP+0x1ac>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
				break;
 8000808:	e035      	b.n	8000876 <initESP+0x1a6>
			case 5:
				memcpy(&bufferTxESP[indexW_TxESP],CIPSTART,45);
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <initESP+0x1b4>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	461a      	mov	r2, r3
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <initESP+0x1b8>)
 8000814:	4413      	add	r3, r2
 8000816:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <initESP+0x1d0>)
 8000818:	4614      	mov	r4, r2
 800081a:	469c      	mov	ip, r3
 800081c:	f104 0e20 	add.w	lr, r4, #32
 8000820:	4665      	mov	r5, ip
 8000822:	4626      	mov	r6, r4
 8000824:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000826:	6028      	str	r0, [r5, #0]
 8000828:	6069      	str	r1, [r5, #4]
 800082a:	60aa      	str	r2, [r5, #8]
 800082c:	60eb      	str	r3, [r5, #12]
 800082e:	3410      	adds	r4, #16
 8000830:	f10c 0c10 	add.w	ip, ip, #16
 8000834:	4574      	cmp	r4, lr
 8000836:	d1f3      	bne.n	8000820 <initESP+0x150>
 8000838:	4665      	mov	r5, ip
 800083a:	4623      	mov	r3, r4
 800083c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800083e:	6028      	str	r0, [r5, #0]
 8000840:	6069      	str	r1, [r5, #4]
 8000842:	60aa      	str	r2, [r5, #8]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	732b      	strb	r3, [r5, #12]
				indexW_TxESP+=45;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <initESP+0x1b4>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	332d      	adds	r3, #45	; 0x2d
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <initESP+0x1b4>)
 8000854:	701a      	strb	r2, [r3, #0]
				timeOut2=2000;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <initESP+0x1c0>)
 8000858:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800085c:	801a      	strh	r2, [r3, #0]
				readyToSend=0;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <initESP+0x1ac>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
				break;
 8000864:	e007      	b.n	8000876 <initESP+0x1a6>
			case 6:
				duty++;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <initESP+0x1d4>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <initESP+0x1d4>)
 8000870:	701a      	strb	r2, [r3, #0]
				break;
 8000872:	e000      	b.n	8000876 <initESP+0x1a6>
		}
	}
 8000874:	bf00      	nop
}
 8000876:	bf00      	nop
 8000878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800087a:	bf00      	nop
 800087c:	2000003d 	.word	0x2000003d
 8000880:	20000032 	.word	0x20000032
 8000884:	2000002d 	.word	0x2000002d
 8000888:	200002cc 	.word	0x200002cc
 800088c:	08008780 	.word	0x08008780
 8000890:	20000036 	.word	0x20000036
 8000894:	08008700 	.word	0x08008700
 8000898:	08008734 	.word	0x08008734
 800089c:	08008728 	.word	0x08008728
 80008a0:	08008744 	.word	0x08008744
 80008a4:	2000003c 	.word	0x2000003c

080008a8 <DecodeAnsESP>:

void DecodeAnsESP(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	static uint8_t i=0,k=2;

	bufferDebug[indexW_Debug]=bufferRxESP[indexR_RxESP];
 80008ac:	4ba3      	ldr	r3, [pc, #652]	; (8000b3c <DecodeAnsESP+0x294>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	4ba2      	ldr	r3, [pc, #648]	; (8000b40 <DecodeAnsESP+0x298>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	4ba1      	ldr	r3, [pc, #644]	; (8000b44 <DecodeAnsESP+0x29c>)
 80008be:	5c5b      	ldrb	r3, [r3, r1]
 80008c0:	b2d9      	uxtb	r1, r3
 80008c2:	4ba1      	ldr	r3, [pc, #644]	; (8000b48 <DecodeAnsESP+0x2a0>)
 80008c4:	5499      	strb	r1, [r3, r2]
	indexW_Debug++;
 80008c6:	4b9e      	ldr	r3, [pc, #632]	; (8000b40 <DecodeAnsESP+0x298>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	3301      	adds	r3, #1
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b9b      	ldr	r3, [pc, #620]	; (8000b40 <DecodeAnsESP+0x298>)
 80008d2:	701a      	strb	r2, [r3, #0]

	switch(AT){
 80008d4:	4b9d      	ldr	r3, [pc, #628]	; (8000b4c <DecodeAnsESP+0x2a4>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b07      	cmp	r3, #7
 80008da:	f200 85c3 	bhi.w	8001464 <DecodeAnsESP+0xbbc>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <DecodeAnsESP+0x3c>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	08000905 	.word	0x08000905
 80008e8:	0800097f 	.word	0x0800097f
 80008ec:	08000a3f 	.word	0x08000a3f
 80008f0:	08000abd 	.word	0x08000abd
 80008f4:	08000b79 	.word	0x08000b79
 80008f8:	08000d2d 	.word	0x08000d2d
 80008fc:	08000da7 	.word	0x08000da7
 8000900:	0800113f 	.word	0x0800113f
		case 0:
			if(bufferRxESP[indexR_RxESP]==ANS_CWMODE[i]){
 8000904:	4b8d      	ldr	r3, [pc, #564]	; (8000b3c <DecodeAnsESP+0x294>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	4b8d      	ldr	r3, [pc, #564]	; (8000b44 <DecodeAnsESP+0x29c>)
 800090e:	5c9b      	ldrb	r3, [r3, r2]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b8f      	ldr	r3, [pc, #572]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	4b8e      	ldr	r3, [pc, #568]	; (8000b54 <DecodeAnsESP+0x2ac>)
 800091a:	5c5b      	ldrb	r3, [r3, r1]
 800091c:	429a      	cmp	r2, r3
 800091e:	d116      	bne.n	800094e <DecodeAnsESP+0xa6>
				i++;
 8000920:	4b8b      	ldr	r3, [pc, #556]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b89      	ldr	r3, [pc, #548]	; (8000b50 <DecodeAnsESP+0x2a8>)
 800092a:	701a      	strb	r2, [r3, #0]
				if(i==19){
 800092c:	4b88      	ldr	r3, [pc, #544]	; (8000b50 <DecodeAnsESP+0x2a8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b13      	cmp	r3, #19
 8000932:	d11b      	bne.n	800096c <DecodeAnsESP+0xc4>
					AT++;
 8000934:	4b85      	ldr	r3, [pc, #532]	; (8000b4c <DecodeAnsESP+0x2a4>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b83      	ldr	r3, [pc, #524]	; (8000b4c <DecodeAnsESP+0x2a4>)
 800093e:	701a      	strb	r2, [r3, #0]
					i=0;
 8000940:	4b83      	ldr	r3, [pc, #524]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000946:	4b84      	ldr	r3, [pc, #528]	; (8000b58 <DecodeAnsESP+0x2b0>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	e00e      	b.n	800096c <DecodeAnsESP+0xc4>
				}
			}else{
				if(i>0){
 800094e:	4b80      	ldr	r3, [pc, #512]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00a      	beq.n	800096c <DecodeAnsESP+0xc4>
					indexR_RxESP=indexW_RxESP;
 8000956:	4b81      	ldr	r3, [pc, #516]	; (8000b5c <DecodeAnsESP+0x2b4>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b77      	ldr	r3, [pc, #476]	; (8000b3c <DecodeAnsESP+0x294>)
 800095e:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000960:	4b7d      	ldr	r3, [pc, #500]	; (8000b58 <DecodeAnsESP+0x2b0>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
					i=0;
 8000966:	4b7a      	ldr	r3, [pc, #488]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
				}
			}
			indexR_RxESP++;
 800096c:	4b73      	ldr	r3, [pc, #460]	; (8000b3c <DecodeAnsESP+0x294>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	3301      	adds	r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b71      	ldr	r3, [pc, #452]	; (8000b3c <DecodeAnsESP+0x294>)
 8000978:	701a      	strb	r2, [r3, #0]
			break;
 800097a:	f000 bd73 	b.w	8001464 <DecodeAnsESP+0xbbc>

		case 1:
			if(bufferRxESP[indexR_RxESP]==AUTOMATIC_WIFI_CONNECTED[i]){
 800097e:	4b6f      	ldr	r3, [pc, #444]	; (8000b3c <DecodeAnsESP+0x294>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	4b6f      	ldr	r3, [pc, #444]	; (8000b44 <DecodeAnsESP+0x29c>)
 8000988:	5c9b      	ldrb	r3, [r3, r2]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	4b70      	ldr	r3, [pc, #448]	; (8000b50 <DecodeAnsESP+0x2a8>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	4b73      	ldr	r3, [pc, #460]	; (8000b60 <DecodeAnsESP+0x2b8>)
 8000994:	5c5b      	ldrb	r3, [r3, r1]
 8000996:	429a      	cmp	r2, r3
 8000998:	d113      	bne.n	80009c2 <DecodeAnsESP+0x11a>
				i++;
 800099a:	4b6d      	ldr	r3, [pc, #436]	; (8000b50 <DecodeAnsESP+0x2a8>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b6b      	ldr	r3, [pc, #428]	; (8000b50 <DecodeAnsESP+0x2a8>)
 80009a4:	701a      	strb	r2, [r3, #0]
				if(i==29){
 80009a6:	4b6a      	ldr	r3, [pc, #424]	; (8000b50 <DecodeAnsESP+0x2a8>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b1d      	cmp	r3, #29
 80009ac:	d13e      	bne.n	8000a2c <DecodeAnsESP+0x184>
					AT=3;
 80009ae:	4b67      	ldr	r3, [pc, #412]	; (8000b4c <DecodeAnsESP+0x2a4>)
 80009b0:	2203      	movs	r2, #3
 80009b2:	701a      	strb	r2, [r3, #0]
					i=0;
 80009b4:	4b66      	ldr	r3, [pc, #408]	; (8000b50 <DecodeAnsESP+0x2a8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 80009ba:	4b67      	ldr	r3, [pc, #412]	; (8000b58 <DecodeAnsESP+0x2b0>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	e034      	b.n	8000a2c <DecodeAnsESP+0x184>
				}
			}
			else{
				if(bufferRxESP[indexR_RxESP]==WIFI_DISCONNECT[i]){
 80009c2:	4b5e      	ldr	r3, [pc, #376]	; (8000b3c <DecodeAnsESP+0x294>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b5e      	ldr	r3, [pc, #376]	; (8000b44 <DecodeAnsESP+0x29c>)
 80009cc:	5c9b      	ldrb	r3, [r3, r2]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <DecodeAnsESP+0x2a8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	4b63      	ldr	r3, [pc, #396]	; (8000b64 <DecodeAnsESP+0x2bc>)
 80009d8:	5c5b      	ldrb	r3, [r3, r1]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d11d      	bne.n	8000a1a <DecodeAnsESP+0x172>
					i++;
 80009de:	4b5c      	ldr	r3, [pc, #368]	; (8000b50 <DecodeAnsESP+0x2a8>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b5a      	ldr	r3, [pc, #360]	; (8000b50 <DecodeAnsESP+0x2a8>)
 80009e8:	701a      	strb	r2, [r3, #0]
					if(i==17){
 80009ea:	4b59      	ldr	r3, [pc, #356]	; (8000b50 <DecodeAnsESP+0x2a8>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b11      	cmp	r3, #17
 80009f0:	d11c      	bne.n	8000a2c <DecodeAnsESP+0x184>
						AT=0;
 80009f2:	4b56      	ldr	r3, [pc, #344]	; (8000b4c <DecodeAnsESP+0x2a4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
						i=0;
 80009f8:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <DecodeAnsESP+0x2a8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
						readyToSend=1;
 80009fe:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <DecodeAnsESP+0x2b0>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);//Reset ESP8266
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0a:	4857      	ldr	r0, [pc, #348]	; (8000b68 <DecodeAnsESP+0x2c0>)
 8000a0c:	f003 fbb2 	bl	8004174 <HAL_GPIO_WritePin>
						timeOut=2000;
 8000a10:	4b56      	ldr	r3, [pc, #344]	; (8000b6c <DecodeAnsESP+0x2c4>)
 8000a12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a16:	801a      	strh	r2, [r3, #0]
 8000a18:	e008      	b.n	8000a2c <DecodeAnsESP+0x184>
					}
				}else{
					AT=2;
 8000a1a:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <DecodeAnsESP+0x2a4>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	701a      	strb	r2, [r3, #0]
					i=0;
 8000a20:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000a26:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <DecodeAnsESP+0x2b0>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
				}
			}
			indexR_RxESP++;
 8000a2c:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <DecodeAnsESP+0x294>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	3301      	adds	r3, #1
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <DecodeAnsESP+0x294>)
 8000a38:	701a      	strb	r2, [r3, #0]
			break;
 8000a3a:	f000 bd13 	b.w	8001464 <DecodeAnsESP+0xbbc>
		case 2:
			if(bufferRxESP[indexR_RxESP]==ANS_CWJAP_MEGA[i]){
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <DecodeAnsESP+0x294>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <DecodeAnsESP+0x29c>)
 8000a48:	5c9b      	ldrb	r3, [r3, r2]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	4b47      	ldr	r3, [pc, #284]	; (8000b70 <DecodeAnsESP+0x2c8>)
 8000a54:	5c5b      	ldrb	r3, [r3, r1]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d116      	bne.n	8000a88 <DecodeAnsESP+0x1e0>
				i++;
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000a64:	701a      	strb	r2, [r3, #0]

				if(i==LONG_ANS_CWJAP_MEGA){
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b4a      	cmp	r3, #74	; 0x4a
 8000a6c:	d11d      	bne.n	8000aaa <DecodeAnsESP+0x202>
					AT++;
 8000a6e:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <DecodeAnsESP+0x2a4>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <DecodeAnsESP+0x2a4>)
 8000a78:	701a      	strb	r2, [r3, #0]
					i=0;
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000a80:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <DecodeAnsESP+0x2b0>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e010      	b.n	8000aaa <DecodeAnsESP+0x202>
				}
			}
			else{
				if(i>0){
 8000a88:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00c      	beq.n	8000aaa <DecodeAnsESP+0x202>
					indexR_RxESP=indexW_RxESP;
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <DecodeAnsESP+0x2b4>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <DecodeAnsESP+0x294>)
 8000a98:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <DecodeAnsESP+0x2b0>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
					i=0;
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
					break;
 8000aa6:	f000 bcdd 	b.w	8001464 <DecodeAnsESP+0xbbc>
				}
			}
			indexR_RxESP++;
 8000aaa:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <DecodeAnsESP+0x294>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <DecodeAnsESP+0x294>)
 8000ab6:	701a      	strb	r2, [r3, #0]
			break;
 8000ab8:	f000 bcd4 	b.w	8001464 <DecodeAnsESP+0xbbc>
		case 3:
			if(bufferRxESP[indexR_RxESP]==ANS_CIPMUX[i]){
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <DecodeAnsESP+0x294>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <DecodeAnsESP+0x29c>)
 8000ac6:	5c9b      	ldrb	r3, [r3, r2]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <DecodeAnsESP+0x2cc>)
 8000ad2:	5c5b      	ldrb	r3, [r3, r1]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d116      	bne.n	8000b06 <DecodeAnsESP+0x25e>
				i++;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000ae2:	701a      	strb	r2, [r3, #0]
				if(i==19){
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b13      	cmp	r3, #19
 8000aea:	d11d      	bne.n	8000b28 <DecodeAnsESP+0x280>
					AT++;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <DecodeAnsESP+0x2a4>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <DecodeAnsESP+0x2a4>)
 8000af6:	701a      	strb	r2, [r3, #0]
					i=0;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <DecodeAnsESP+0x2b0>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	e010      	b.n	8000b28 <DecodeAnsESP+0x280>
				}
			}else{
				if(i>0){
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00c      	beq.n	8000b28 <DecodeAnsESP+0x280>
					indexR_RxESP=indexW_RxESP;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <DecodeAnsESP+0x2b4>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <DecodeAnsESP+0x294>)
 8000b16:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <DecodeAnsESP+0x2b0>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
					i=0;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <DecodeAnsESP+0x2a8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
					break;
 8000b24:	f000 bc9e 	b.w	8001464 <DecodeAnsESP+0xbbc>
				}
			}
			indexR_RxESP++;
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <DecodeAnsESP+0x294>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <DecodeAnsESP+0x294>)
 8000b34:	701a      	strb	r2, [r3, #0]
			break;
 8000b36:	f000 bc95 	b.w	8001464 <DecodeAnsESP+0xbbc>
 8000b3a:	bf00      	nop
 8000b3c:	2000002e 	.word	0x2000002e
 8000b40:	20000031 	.word	0x20000031
 8000b44:	20000048 	.word	0x20000048
 8000b48:	20000430 	.word	0x20000430
 8000b4c:	20000032 	.word	0x20000032
 8000b50:	20000044 	.word	0x20000044
 8000b54:	08008790 	.word	0x08008790
 8000b58:	2000003d 	.word	0x2000003d
 8000b5c:	2000002f 	.word	0x2000002f
 8000b60:	08008840 	.word	0x08008840
 8000b64:	08008860 	.word	0x08008860
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	20000034 	.word	0x20000034
 8000b70:	080087a4 	.word	0x080087a4
 8000b74:	080087f0 	.word	0x080087f0
		case 4:
			switch(decodeCIFSR){
 8000b78:	4b97      	ldr	r3, [pc, #604]	; (8000dd8 <DecodeAnsESP+0x530>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	f200 846c 	bhi.w	800145a <DecodeAnsESP+0xbb2>
 8000b82:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <DecodeAnsESP+0x2e0>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000b99 	.word	0x08000b99
 8000b8c:	08000c0d 	.word	0x08000c0d
 8000b90:	08000c5f 	.word	0x08000c5f
 8000b94:	08000ccb 	.word	0x08000ccb
				case 0:
					if(bufferRxESP[indexR_RxESP]==CIFSR[i]){
 8000b98:	4b90      	ldr	r3, [pc, #576]	; (8000ddc <DecodeAnsESP+0x534>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b8f      	ldr	r3, [pc, #572]	; (8000de0 <DecodeAnsESP+0x538>)
 8000ba2:	5c9b      	ldrb	r3, [r3, r2]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b8f      	ldr	r3, [pc, #572]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4b8e      	ldr	r3, [pc, #568]	; (8000de8 <DecodeAnsESP+0x540>)
 8000bae:	5c5b      	ldrb	r3, [r3, r1]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d113      	bne.n	8000bdc <DecodeAnsESP+0x334>
						i++;
 8000bb4:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b89      	ldr	r3, [pc, #548]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000bbe:	701a      	strb	r2, [r3, #0]

						if(i==10){
 8000bc0:	4b88      	ldr	r3, [pc, #544]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b0a      	cmp	r3, #10
 8000bc6:	d119      	bne.n	8000bfc <DecodeAnsESP+0x354>
							decodeCIFSR++;
 8000bc8:	4b83      	ldr	r3, [pc, #524]	; (8000dd8 <DecodeAnsESP+0x530>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b81      	ldr	r3, [pc, #516]	; (8000dd8 <DecodeAnsESP+0x530>)
 8000bd2:	701a      	strb	r2, [r3, #0]
							i=0;
 8000bd4:	4b83      	ldr	r3, [pc, #524]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
 8000bda:	e00f      	b.n	8000bfc <DecodeAnsESP+0x354>
						}
					}else{
						if(i>0){
 8000bdc:	4b81      	ldr	r3, [pc, #516]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00b      	beq.n	8000bfc <DecodeAnsESP+0x354>
							indexR_RxESP=indexW_RxESP;
 8000be4:	4b81      	ldr	r3, [pc, #516]	; (8000dec <DecodeAnsESP+0x544>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b7c      	ldr	r3, [pc, #496]	; (8000ddc <DecodeAnsESP+0x534>)
 8000bec:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000bee:	4b80      	ldr	r3, [pc, #512]	; (8000df0 <DecodeAnsESP+0x548>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
							i=0;
 8000bf4:	4b7b      	ldr	r3, [pc, #492]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
							break;
 8000bfa:	e096      	b.n	8000d2a <DecodeAnsESP+0x482>
						}
					}
					indexR_RxESP++;
 8000bfc:	4b77      	ldr	r3, [pc, #476]	; (8000ddc <DecodeAnsESP+0x534>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	3301      	adds	r3, #1
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b75      	ldr	r3, [pc, #468]	; (8000ddc <DecodeAnsESP+0x534>)
 8000c08:	701a      	strb	r2, [r3, #0]
					break;
 8000c0a:	e08e      	b.n	8000d2a <DecodeAnsESP+0x482>
				case 1:
					if(bufferRxESP[indexR_RxESP]==CIFSR_STAIP[i]){
 8000c0c:	4b73      	ldr	r3, [pc, #460]	; (8000ddc <DecodeAnsESP+0x534>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b72      	ldr	r3, [pc, #456]	; (8000de0 <DecodeAnsESP+0x538>)
 8000c16:	5c9b      	ldrb	r3, [r3, r2]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b72      	ldr	r3, [pc, #456]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4b74      	ldr	r3, [pc, #464]	; (8000df4 <DecodeAnsESP+0x54c>)
 8000c22:	5c5b      	ldrb	r3, [r3, r1]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d112      	bne.n	8000c4e <DecodeAnsESP+0x3a6>
						i++;
 8000c28:	4b6e      	ldr	r3, [pc, #440]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b6c      	ldr	r3, [pc, #432]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000c32:	701a      	strb	r2, [r3, #0]
						if(i==13){
 8000c34:	4b6b      	ldr	r3, [pc, #428]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b0d      	cmp	r3, #13
 8000c3a:	d108      	bne.n	8000c4e <DecodeAnsESP+0x3a6>
							decodeCIFSR++;
 8000c3c:	4b66      	ldr	r3, [pc, #408]	; (8000dd8 <DecodeAnsESP+0x530>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b64      	ldr	r3, [pc, #400]	; (8000dd8 <DecodeAnsESP+0x530>)
 8000c46:	701a      	strb	r2, [r3, #0]
							i=0;
 8000c48:	4b66      	ldr	r3, [pc, #408]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
						}
					}
					indexR_RxESP++;
 8000c4e:	4b63      	ldr	r3, [pc, #396]	; (8000ddc <DecodeAnsESP+0x534>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	3301      	adds	r3, #1
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	4b60      	ldr	r3, [pc, #384]	; (8000ddc <DecodeAnsESP+0x534>)
 8000c5a:	701a      	strb	r2, [r3, #0]
					break;
 8000c5c:	e065      	b.n	8000d2a <DecodeAnsESP+0x482>
				case 2:
					espIP[i]=bufferRxESP[indexR_RxESP];
 8000c5e:	4b5f      	ldr	r3, [pc, #380]	; (8000ddc <DecodeAnsESP+0x534>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4619      	mov	r1, r3
 8000c66:	4b5f      	ldr	r3, [pc, #380]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <DecodeAnsESP+0x538>)
 8000c6e:	5c5b      	ldrb	r3, [r3, r1]
 8000c70:	b2d9      	uxtb	r1, r3
 8000c72:	4b61      	ldr	r3, [pc, #388]	; (8000df8 <DecodeAnsESP+0x550>)
 8000c74:	5499      	strb	r1, [r3, r2]
					i++;
 8000c76:	4b5b      	ldr	r3, [pc, #364]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b59      	ldr	r3, [pc, #356]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000c80:	701a      	strb	r2, [r3, #0]
					lengthIP++;
 8000c82:	4b5e      	ldr	r3, [pc, #376]	; (8000dfc <DecodeAnsESP+0x554>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b5c      	ldr	r3, [pc, #368]	; (8000dfc <DecodeAnsESP+0x554>)
 8000c8c:	701a      	strb	r2, [r3, #0]
					indexR_RxESP++;
 8000c8e:	4b53      	ldr	r3, [pc, #332]	; (8000ddc <DecodeAnsESP+0x534>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <DecodeAnsESP+0x534>)
 8000c9a:	701a      	strb	r2, [r3, #0]
					if((bufferRxESP[indexR_RxESP]=='"')&&(lengthIP>1)){
 8000c9c:	4b4f      	ldr	r3, [pc, #316]	; (8000ddc <DecodeAnsESP+0x534>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b4e      	ldr	r3, [pc, #312]	; (8000de0 <DecodeAnsESP+0x538>)
 8000ca6:	5c9b      	ldrb	r3, [r3, r2]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b22      	cmp	r3, #34	; 0x22
 8000cac:	d13c      	bne.n	8000d28 <DecodeAnsESP+0x480>
 8000cae:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <DecodeAnsESP+0x554>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d938      	bls.n	8000d28 <DecodeAnsESP+0x480>
						i=0;
 8000cb6:	4b4b      	ldr	r3, [pc, #300]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
						decodeCIFSR++;
 8000cbc:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <DecodeAnsESP+0x530>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <DecodeAnsESP+0x530>)
 8000cc6:	701a      	strb	r2, [r3, #0]
					}
					break;
 8000cc8:	e02e      	b.n	8000d28 <DecodeAnsESP+0x480>
				case 3:
					if(bufferRxESP[indexR_RxESP]==OK[i]){
 8000cca:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <DecodeAnsESP+0x534>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <DecodeAnsESP+0x538>)
 8000cd4:	5c9b      	ldrb	r3, [r3, r2]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b42      	ldr	r3, [pc, #264]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4b48      	ldr	r3, [pc, #288]	; (8000e00 <DecodeAnsESP+0x558>)
 8000ce0:	5c5b      	ldrb	r3, [r3, r1]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d118      	bne.n	8000d18 <DecodeAnsESP+0x470>
						i++;
 8000ce6:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b3d      	ldr	r3, [pc, #244]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000cf0:	701a      	strb	r2, [r3, #0]
						if(i==6){
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d10e      	bne.n	8000d18 <DecodeAnsESP+0x470>
							AT++;
 8000cfa:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <DecodeAnsESP+0x55c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <DecodeAnsESP+0x55c>)
 8000d04:	701a      	strb	r2, [r3, #0]
							i=0;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000d0c:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <DecodeAnsESP+0x548>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
							decodeCIFSR=0;
 8000d12:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <DecodeAnsESP+0x530>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
						}
					}
					indexR_RxESP++;
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <DecodeAnsESP+0x534>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <DecodeAnsESP+0x534>)
 8000d24:	701a      	strb	r2, [r3, #0]
					break;
 8000d26:	e000      	b.n	8000d2a <DecodeAnsESP+0x482>
					break;
 8000d28:	bf00      	nop
			}

			break;
 8000d2a:	e396      	b.n	800145a <DecodeAnsESP+0xbb2>
		case 5:
			if(bufferRxESP[indexR_RxESP]==ANS_CIPSTART[i]){
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <DecodeAnsESP+0x534>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <DecodeAnsESP+0x538>)
 8000d36:	5c9b      	ldrb	r3, [r3, r2]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <DecodeAnsESP+0x560>)
 8000d42:	5c5b      	ldrb	r3, [r3, r1]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d116      	bne.n	8000d76 <DecodeAnsESP+0x4ce>
				i++;
 8000d48:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000d52:	701a      	strb	r2, [r3, #0]
				if(i==60){
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b3c      	cmp	r3, #60	; 0x3c
 8000d5a:	d11c      	bne.n	8000d96 <DecodeAnsESP+0x4ee>
					AT++;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <DecodeAnsESP+0x55c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <DecodeAnsESP+0x55c>)
 8000d66:	701a      	strb	r2, [r3, #0]
					i=0;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000d6e:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <DecodeAnsESP+0x548>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	e00f      	b.n	8000d96 <DecodeAnsESP+0x4ee>
				}
			}else{
				if(i>0){
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00b      	beq.n	8000d96 <DecodeAnsESP+0x4ee>
					indexR_RxESP=indexW_RxESP;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <DecodeAnsESP+0x544>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <DecodeAnsESP+0x534>)
 8000d86:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <DecodeAnsESP+0x548>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
					i=0;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <DecodeAnsESP+0x53c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
					break;
 8000d94:	e366      	b.n	8001464 <DecodeAnsESP+0xbbc>
				}
			}
			indexR_RxESP++;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <DecodeAnsESP+0x534>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <DecodeAnsESP+0x534>)
 8000da2:	701a      	strb	r2, [r3, #0]
			break;
 8000da4:	e35e      	b.n	8001464 <DecodeAnsESP+0xbbc>
		case 6:
			switch(decodeCIPSEND){
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <DecodeAnsESP+0x564>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b07      	cmp	r3, #7
 8000dac:	f200 8357 	bhi.w	800145e <DecodeAnsESP+0xbb6>
 8000db0:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <DecodeAnsESP+0x510>)
 8000db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db6:	bf00      	nop
 8000db8:	08000e11 	.word	0x08000e11
 8000dbc:	08000e85 	.word	0x08000e85
 8000dc0:	08000f13 	.word	0x08000f13
 8000dc4:	08000f51 	.word	0x08000f51
 8000dc8:	08000faf 	.word	0x08000faf
 8000dcc:	08001001 	.word	0x08001001
 8000dd0:	080010a1 	.word	0x080010a1
 8000dd4:	080010df 	.word	0x080010df
 8000dd8:	20000040 	.word	0x20000040
 8000ddc:	2000002e 	.word	0x2000002e
 8000de0:	20000048 	.word	0x20000048
 8000de4:	20000044 	.word	0x20000044
 8000de8:	08008728 	.word	0x08008728
 8000dec:	2000002f 	.word	0x2000002f
 8000df0:	2000003d 	.word	0x2000003d
 8000df4:	08008874 	.word	0x08008874
 8000df8:	20000784 	.word	0x20000784
 8000dfc:	20000041 	.word	0x20000041
 8000e00:	08008884 	.word	0x08008884
 8000e04:	20000032 	.word	0x20000032
 8000e08:	08008804 	.word	0x08008804
 8000e0c:	2000003f 	.word	0x2000003f
					case 0:
						if(bufferRxESP[indexR_RxESP]==CIPSEND1[i]){
 8000e10:	4b96      	ldr	r3, [pc, #600]	; (800106c <DecodeAnsESP+0x7c4>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b95      	ldr	r3, [pc, #596]	; (8001070 <DecodeAnsESP+0x7c8>)
 8000e1a:	5c9b      	ldrb	r3, [r3, r2]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b95      	ldr	r3, [pc, #596]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	4b94      	ldr	r3, [pc, #592]	; (8001078 <DecodeAnsESP+0x7d0>)
 8000e26:	5c5b      	ldrb	r3, [r3, r1]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d113      	bne.n	8000e54 <DecodeAnsESP+0x5ac>
							i++;
 8000e2c:	4b91      	ldr	r3, [pc, #580]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b8f      	ldr	r3, [pc, #572]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000e36:	701a      	strb	r2, [r3, #0]
							if(i==11){
 8000e38:	4b8e      	ldr	r3, [pc, #568]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b0b      	cmp	r3, #11
 8000e3e:	d119      	bne.n	8000e74 <DecodeAnsESP+0x5cc>
								i=0;
 8000e40:	4b8c      	ldr	r3, [pc, #560]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND++;
 8000e46:	4b8d      	ldr	r3, [pc, #564]	; (800107c <DecodeAnsESP+0x7d4>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b8b      	ldr	r3, [pc, #556]	; (800107c <DecodeAnsESP+0x7d4>)
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	e00f      	b.n	8000e74 <DecodeAnsESP+0x5cc>
							}
						}
						else{
							if(i>0){
 8000e54:	4b87      	ldr	r3, [pc, #540]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00b      	beq.n	8000e74 <DecodeAnsESP+0x5cc>
								indexR_RxESP=indexW_RxESP;
 8000e5c:	4b88      	ldr	r3, [pc, #544]	; (8001080 <DecodeAnsESP+0x7d8>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b82      	ldr	r3, [pc, #520]	; (800106c <DecodeAnsESP+0x7c4>)
 8000e64:	701a      	strb	r2, [r3, #0]
								readyToSend=1;
 8000e66:	4b87      	ldr	r3, [pc, #540]	; (8001084 <DecodeAnsESP+0x7dc>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
								i=0;
 8000e6c:	4b81      	ldr	r3, [pc, #516]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
								break;
 8000e72:	e163      	b.n	800113c <DecodeAnsESP+0x894>
							}
						}
						indexR_RxESP++;
 8000e74:	4b7d      	ldr	r3, [pc, #500]	; (800106c <DecodeAnsESP+0x7c4>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b7b      	ldr	r3, [pc, #492]	; (800106c <DecodeAnsESP+0x7c4>)
 8000e80:	701a      	strb	r2, [r3, #0]
						break;
 8000e82:	e15b      	b.n	800113c <DecodeAnsESP+0x894>
					case 1:
						if((bufferRxESP[indexR_RxESP]==bytesToSend+'0')&&((bytesToSend<10))){
 8000e84:	4b79      	ldr	r3, [pc, #484]	; (800106c <DecodeAnsESP+0x7c4>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b78      	ldr	r3, [pc, #480]	; (8001070 <DecodeAnsESP+0x7c8>)
 8000e8e:	5c9b      	ldrb	r3, [r3, r2]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b7c      	ldr	r3, [pc, #496]	; (8001088 <DecodeAnsESP+0x7e0>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	3330      	adds	r3, #48	; 0x30
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d107      	bne.n	8000eae <DecodeAnsESP+0x606>
 8000e9e:	4b7a      	ldr	r3, [pc, #488]	; (8001088 <DecodeAnsESP+0x7e0>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b09      	cmp	r3, #9
 8000ea4:	d803      	bhi.n	8000eae <DecodeAnsESP+0x606>
							decodeCIPSEND=3;
 8000ea6:	4b75      	ldr	r3, [pc, #468]	; (800107c <DecodeAnsESP+0x7d4>)
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	e029      	b.n	8000f02 <DecodeAnsESP+0x65a>
						}else{

							if(bufferRxESP[indexR_RxESP]==bytesToSend/10+'0'){
 8000eae:	4b6f      	ldr	r3, [pc, #444]	; (800106c <DecodeAnsESP+0x7c4>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b6e      	ldr	r3, [pc, #440]	; (8001070 <DecodeAnsESP+0x7c8>)
 8000eb8:	5c9b      	ldrb	r3, [r3, r2]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4b72      	ldr	r3, [pc, #456]	; (8001088 <DecodeAnsESP+0x7e0>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	4a72      	ldr	r2, [pc, #456]	; (800108c <DecodeAnsESP+0x7e4>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	3330      	adds	r3, #48	; 0x30
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d117      	bne.n	8000f02 <DecodeAnsESP+0x65a>
								decodeCIPSEND++;
 8000ed2:	4b6a      	ldr	r3, [pc, #424]	; (800107c <DecodeAnsESP+0x7d4>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b68      	ldr	r3, [pc, #416]	; (800107c <DecodeAnsESP+0x7d4>)
 8000edc:	701a      	strb	r2, [r3, #0]
								bytesToSend_aux=bytesToSend/10;
 8000ede:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <DecodeAnsESP+0x7e0>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4a6a      	ldr	r2, [pc, #424]	; (800108c <DecodeAnsESP+0x7e4>)
 8000ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee8:	08db      	lsrs	r3, r3, #3
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b68      	ldr	r3, [pc, #416]	; (8001090 <DecodeAnsESP+0x7e8>)
 8000eee:	701a      	strb	r2, [r3, #0]
								bytesToSend_aux*=10;
 8000ef0:	4b67      	ldr	r3, [pc, #412]	; (8001090 <DecodeAnsESP+0x7e8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b64      	ldr	r3, [pc, #400]	; (8001090 <DecodeAnsESP+0x7e8>)
 8000f00:	701a      	strb	r2, [r3, #0]
							}

						}
						indexR_RxESP++;
 8000f02:	4b5a      	ldr	r3, [pc, #360]	; (800106c <DecodeAnsESP+0x7c4>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b57      	ldr	r3, [pc, #348]	; (800106c <DecodeAnsESP+0x7c4>)
 8000f0e:	701a      	strb	r2, [r3, #0]
						break;
 8000f10:	e114      	b.n	800113c <DecodeAnsESP+0x894>
					case 2:
						if(bufferRxESP[indexR_RxESP]==bytesToSend-bytesToSend_aux+'0'){
 8000f12:	4b56      	ldr	r3, [pc, #344]	; (800106c <DecodeAnsESP+0x7c4>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b55      	ldr	r3, [pc, #340]	; (8001070 <DecodeAnsESP+0x7c8>)
 8000f1c:	5c9b      	ldrb	r3, [r3, r2]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b59      	ldr	r3, [pc, #356]	; (8001088 <DecodeAnsESP+0x7e0>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4b59      	ldr	r3, [pc, #356]	; (8001090 <DecodeAnsESP+0x7e8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	1acb      	subs	r3, r1, r3
 8000f2e:	3330      	adds	r3, #48	; 0x30
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d105      	bne.n	8000f40 <DecodeAnsESP+0x698>
							decodeCIPSEND++;
 8000f34:	4b51      	ldr	r3, [pc, #324]	; (800107c <DecodeAnsESP+0x7d4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b4f      	ldr	r3, [pc, #316]	; (800107c <DecodeAnsESP+0x7d4>)
 8000f3e:	701a      	strb	r2, [r3, #0]
						}
						indexR_RxESP++;
 8000f40:	4b4a      	ldr	r3, [pc, #296]	; (800106c <DecodeAnsESP+0x7c4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b48      	ldr	r3, [pc, #288]	; (800106c <DecodeAnsESP+0x7c4>)
 8000f4c:	701a      	strb	r2, [r3, #0]
						break;
 8000f4e:	e0f5      	b.n	800113c <DecodeAnsESP+0x894>
					case 3:
						if(bufferRxESP[indexR_RxESP]==CIPSEND2[i]){
 8000f50:	4b46      	ldr	r3, [pc, #280]	; (800106c <DecodeAnsESP+0x7c4>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b45      	ldr	r3, [pc, #276]	; (8001070 <DecodeAnsESP+0x7c8>)
 8000f5a:	5c9b      	ldrb	r3, [r3, r2]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b45      	ldr	r3, [pc, #276]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <DecodeAnsESP+0x7ec>)
 8000f66:	5c5b      	ldrb	r3, [r3, r1]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d118      	bne.n	8000f9e <DecodeAnsESP+0x6f6>
							i++;
 8000f6c:	4b41      	ldr	r3, [pc, #260]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000f76:	701a      	strb	r2, [r3, #0]
							if(i==9){
 8000f78:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d10e      	bne.n	8000f9e <DecodeAnsESP+0x6f6>
								i=0;
 8000f80:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND++;
 8000f86:	4b3d      	ldr	r3, [pc, #244]	; (800107c <DecodeAnsESP+0x7d4>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <DecodeAnsESP+0x7d4>)
 8000f90:	701a      	strb	r2, [r3, #0]
								espReadyToRecieve=1;
 8000f92:	4b41      	ldr	r3, [pc, #260]	; (8001098 <DecodeAnsESP+0x7f0>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
								readyToSend=1;
 8000f98:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <DecodeAnsESP+0x7dc>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
							}
						}
						indexR_RxESP++;
 8000f9e:	4b33      	ldr	r3, [pc, #204]	; (800106c <DecodeAnsESP+0x7c4>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <DecodeAnsESP+0x7c4>)
 8000faa:	701a      	strb	r2, [r3, #0]
						break;
 8000fac:	e0c6      	b.n	800113c <DecodeAnsESP+0x894>
					case 4:
						if(bufferRxESP[indexR_RxESP]==CIPSEND3[i]){
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <DecodeAnsESP+0x7c4>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <DecodeAnsESP+0x7c8>)
 8000fb8:	5c9b      	ldrb	r3, [r3, r2]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4b36      	ldr	r3, [pc, #216]	; (800109c <DecodeAnsESP+0x7f4>)
 8000fc4:	5c5b      	ldrb	r3, [r3, r1]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d112      	bne.n	8000ff0 <DecodeAnsESP+0x748>
							i++;
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000fd4:	701a      	strb	r2, [r3, #0]
							if(i==4){
 8000fd6:	4b27      	ldr	r3, [pc, #156]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d108      	bne.n	8000ff0 <DecodeAnsESP+0x748>
								i=0;
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <DecodeAnsESP+0x7cc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND++;
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <DecodeAnsESP+0x7d4>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <DecodeAnsESP+0x7d4>)
 8000fee:	701a      	strb	r2, [r3, #0]
							}
						}
						indexR_RxESP++;
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <DecodeAnsESP+0x7c4>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <DecodeAnsESP+0x7c4>)
 8000ffc:	701a      	strb	r2, [r3, #0]
						break;
 8000ffe:	e09d      	b.n	800113c <DecodeAnsESP+0x894>
					case 5:
						if((bufferRxESP[indexR_RxESP]==bytesToSend+'0')&&((bytesToSend<10))){
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <DecodeAnsESP+0x7c4>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <DecodeAnsESP+0x7c8>)
 800100a:	5c9b      	ldrb	r3, [r3, r2]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <DecodeAnsESP+0x7e0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	3330      	adds	r3, #48	; 0x30
 8001016:	429a      	cmp	r2, r3
 8001018:	d107      	bne.n	800102a <DecodeAnsESP+0x782>
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <DecodeAnsESP+0x7e0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d803      	bhi.n	800102a <DecodeAnsESP+0x782>
							decodeCIPSEND=7;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <DecodeAnsESP+0x7d4>)
 8001024:	2207      	movs	r2, #7
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e017      	b.n	800105a <DecodeAnsESP+0x7b2>
						}else{

							if(bufferRxESP[indexR_RxESP]==bytesToSend/10+'0'){
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <DecodeAnsESP+0x7c4>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <DecodeAnsESP+0x7c8>)
 8001034:	5c9b      	ldrb	r3, [r3, r2]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4619      	mov	r1, r3
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <DecodeAnsESP+0x7e0>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4a13      	ldr	r2, [pc, #76]	; (800108c <DecodeAnsESP+0x7e4>)
 8001040:	fba2 2303 	umull	r2, r3, r2, r3
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3330      	adds	r3, #48	; 0x30
 800104a:	4299      	cmp	r1, r3
 800104c:	d105      	bne.n	800105a <DecodeAnsESP+0x7b2>
								decodeCIPSEND++;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <DecodeAnsESP+0x7d4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <DecodeAnsESP+0x7d4>)
 8001058:	701a      	strb	r2, [r3, #0]
							}

						}
						indexR_RxESP++;
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <DecodeAnsESP+0x7c4>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	3301      	adds	r3, #1
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b01      	ldr	r3, [pc, #4]	; (800106c <DecodeAnsESP+0x7c4>)
 8001066:	701a      	strb	r2, [r3, #0]
						break;
 8001068:	e068      	b.n	800113c <DecodeAnsESP+0x894>
 800106a:	bf00      	nop
 800106c:	2000002e 	.word	0x2000002e
 8001070:	20000048 	.word	0x20000048
 8001074:	20000044 	.word	0x20000044
 8001078:	0800888c 	.word	0x0800888c
 800107c:	2000003f 	.word	0x2000003f
 8001080:	2000002f 	.word	0x2000002f
 8001084:	2000003d 	.word	0x2000003d
 8001088:	20000531 	.word	0x20000531
 800108c:	cccccccd 	.word	0xcccccccd
 8001090:	20000043 	.word	0x20000043
 8001094:	08008898 	.word	0x08008898
 8001098:	2000003e 	.word	0x2000003e
 800109c:	080088a4 	.word	0x080088a4
					case 6:
						if(bufferRxESP[indexR_RxESP]==bytesToSend-bytesToSend_aux+'0'){
 80010a0:	4b9d      	ldr	r3, [pc, #628]	; (8001318 <DecodeAnsESP+0xa70>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b9c      	ldr	r3, [pc, #624]	; (800131c <DecodeAnsESP+0xa74>)
 80010aa:	5c9b      	ldrb	r3, [r3, r2]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b9b      	ldr	r3, [pc, #620]	; (8001320 <DecodeAnsESP+0xa78>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4b9b      	ldr	r3, [pc, #620]	; (8001324 <DecodeAnsESP+0xa7c>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	1acb      	subs	r3, r1, r3
 80010bc:	3330      	adds	r3, #48	; 0x30
 80010be:	429a      	cmp	r2, r3
 80010c0:	d105      	bne.n	80010ce <DecodeAnsESP+0x826>
							decodeCIPSEND++;
 80010c2:	4b99      	ldr	r3, [pc, #612]	; (8001328 <DecodeAnsESP+0xa80>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b97      	ldr	r3, [pc, #604]	; (8001328 <DecodeAnsESP+0xa80>)
 80010cc:	701a      	strb	r2, [r3, #0]
						}
						indexR_RxESP++;
 80010ce:	4b92      	ldr	r3, [pc, #584]	; (8001318 <DecodeAnsESP+0xa70>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b8f      	ldr	r3, [pc, #572]	; (8001318 <DecodeAnsESP+0xa70>)
 80010da:	701a      	strb	r2, [r3, #0]
						break;
 80010dc:	e02e      	b.n	800113c <DecodeAnsESP+0x894>
					case 7:
						if(bufferRxESP[indexR_RxESP]==CIPSEND4[i]){
 80010de:	4b8e      	ldr	r3, [pc, #568]	; (8001318 <DecodeAnsESP+0xa70>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b8d      	ldr	r3, [pc, #564]	; (800131c <DecodeAnsESP+0xa74>)
 80010e8:	5c9b      	ldrb	r3, [r3, r2]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b8f      	ldr	r3, [pc, #572]	; (800132c <DecodeAnsESP+0xa84>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4b8f      	ldr	r3, [pc, #572]	; (8001330 <DecodeAnsESP+0xa88>)
 80010f4:	5c5b      	ldrb	r3, [r3, r1]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d118      	bne.n	800112c <DecodeAnsESP+0x884>
							i++;
 80010fa:	4b8c      	ldr	r3, [pc, #560]	; (800132c <DecodeAnsESP+0xa84>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b8a      	ldr	r3, [pc, #552]	; (800132c <DecodeAnsESP+0xa84>)
 8001104:	701a      	strb	r2, [r3, #0]
							if(i==19){
 8001106:	4b89      	ldr	r3, [pc, #548]	; (800132c <DecodeAnsESP+0xa84>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b13      	cmp	r3, #19
 800110c:	d10e      	bne.n	800112c <DecodeAnsESP+0x884>
								i=0;
 800110e:	4b87      	ldr	r3, [pc, #540]	; (800132c <DecodeAnsESP+0xa84>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND=0;
 8001114:	4b84      	ldr	r3, [pc, #528]	; (8001328 <DecodeAnsESP+0xa80>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
								readyToSend=1;
 800111a:	4b86      	ldr	r3, [pc, #536]	; (8001334 <DecodeAnsESP+0xa8c>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
								AT++;
 8001120:	4b85      	ldr	r3, [pc, #532]	; (8001338 <DecodeAnsESP+0xa90>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b83      	ldr	r3, [pc, #524]	; (8001338 <DecodeAnsESP+0xa90>)
 800112a:	701a      	strb	r2, [r3, #0]
							}
						}

						indexR_RxESP++;
 800112c:	4b7a      	ldr	r3, [pc, #488]	; (8001318 <DecodeAnsESP+0xa70>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	3301      	adds	r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b78      	ldr	r3, [pc, #480]	; (8001318 <DecodeAnsESP+0xa70>)
 8001138:	701a      	strb	r2, [r3, #0]
						break;
 800113a:	bf00      	nop
				}

			break;
 800113c:	e18f      	b.n	800145e <DecodeAnsESP+0xbb6>
		case 7:
			timeOut2=2;
 800113e:	4b7f      	ldr	r3, [pc, #508]	; (800133c <DecodeAnsESP+0xa94>)
 8001140:	2202      	movs	r2, #2
 8001142:	801a      	strh	r2, [r3, #0]
			switch(decodeIPD){
 8001144:	4b7e      	ldr	r3, [pc, #504]	; (8001340 <DecodeAnsESP+0xa98>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b06      	cmp	r3, #6
 800114a:	f200 818a 	bhi.w	8001462 <DecodeAnsESP+0xbba>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <DecodeAnsESP+0x8ac>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	08001171 	.word	0x08001171
 8001158:	080011df 	.word	0x080011df
 800115c:	0800120d 	.word	0x0800120d
 8001160:	08001287 	.word	0x08001287
 8001164:	080012cf 	.word	0x080012cf
 8001168:	08001371 	.word	0x08001371
 800116c:	080013c3 	.word	0x080013c3
				case 0:
					if(bufferRxESP[indexR_RxESP]==IPD[i]){
 8001170:	4b69      	ldr	r3, [pc, #420]	; (8001318 <DecodeAnsESP+0xa70>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	4b68      	ldr	r3, [pc, #416]	; (800131c <DecodeAnsESP+0xa74>)
 800117a:	5c9b      	ldrb	r3, [r3, r2]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b6b      	ldr	r3, [pc, #428]	; (800132c <DecodeAnsESP+0xa84>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	4b6f      	ldr	r3, [pc, #444]	; (8001344 <DecodeAnsESP+0xa9c>)
 8001186:	5c5b      	ldrb	r3, [r3, r1]
 8001188:	429a      	cmp	r2, r3
 800118a:	d113      	bne.n	80011b4 <DecodeAnsESP+0x90c>
						i++;
 800118c:	4b67      	ldr	r3, [pc, #412]	; (800132c <DecodeAnsESP+0xa84>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b65      	ldr	r3, [pc, #404]	; (800132c <DecodeAnsESP+0xa84>)
 8001196:	701a      	strb	r2, [r3, #0]

						if(i==7){
 8001198:	4b64      	ldr	r3, [pc, #400]	; (800132c <DecodeAnsESP+0xa84>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b07      	cmp	r3, #7
 800119e:	d116      	bne.n	80011ce <DecodeAnsESP+0x926>
							i=0;
 80011a0:	4b62      	ldr	r3, [pc, #392]	; (800132c <DecodeAnsESP+0xa84>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
							decodeIPD++;
 80011a6:	4b66      	ldr	r3, [pc, #408]	; (8001340 <DecodeAnsESP+0xa98>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b64      	ldr	r3, [pc, #400]	; (8001340 <DecodeAnsESP+0xa98>)
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e00c      	b.n	80011ce <DecodeAnsESP+0x926>
						}
					}
					else{
						if(i>0){
 80011b4:	4b5d      	ldr	r3, [pc, #372]	; (800132c <DecodeAnsESP+0xa84>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <DecodeAnsESP+0x926>
							indexR_RxESP=indexW_RxESP;
 80011bc:	4b62      	ldr	r3, [pc, #392]	; (8001348 <DecodeAnsESP+0xaa0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <DecodeAnsESP+0xa70>)
 80011c4:	701a      	strb	r2, [r3, #0]
							i=0;
 80011c6:	4b59      	ldr	r3, [pc, #356]	; (800132c <DecodeAnsESP+0xa84>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
							break;
 80011cc:	e144      	b.n	8001458 <DecodeAnsESP+0xbb0>
						}
					}
					indexR_RxESP++;
 80011ce:	4b52      	ldr	r3, [pc, #328]	; (8001318 <DecodeAnsESP+0xa70>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <DecodeAnsESP+0xa70>)
 80011da:	701a      	strb	r2, [r3, #0]
					break;
 80011dc:	e13c      	b.n	8001458 <DecodeAnsESP+0xbb0>
				case 1:
					if(bufferRxESP[indexR_RxESP]==':'){
 80011de:	4b4e      	ldr	r3, [pc, #312]	; (8001318 <DecodeAnsESP+0xa70>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <DecodeAnsESP+0xa74>)
 80011e8:	5c9b      	ldrb	r3, [r3, r2]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b3a      	cmp	r3, #58	; 0x3a
 80011ee:	d105      	bne.n	80011fc <DecodeAnsESP+0x954>
						decodeIPD++;
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <DecodeAnsESP+0xa98>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b51      	ldr	r3, [pc, #324]	; (8001340 <DecodeAnsESP+0xa98>)
 80011fa:	701a      	strb	r2, [r3, #0]
					}
					indexR_RxESP++;
 80011fc:	4b46      	ldr	r3, [pc, #280]	; (8001318 <DecodeAnsESP+0xa70>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	3301      	adds	r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b44      	ldr	r3, [pc, #272]	; (8001318 <DecodeAnsESP+0xa70>)
 8001208:	701a      	strb	r2, [r3, #0]
					break;
 800120a:	e125      	b.n	8001458 <DecodeAnsESP+0xbb0>
				case 2:
					if(bufferRxESP[indexR_RxESP]==UNER[i]){
 800120c:	4b42      	ldr	r3, [pc, #264]	; (8001318 <DecodeAnsESP+0xa70>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	4b41      	ldr	r3, [pc, #260]	; (800131c <DecodeAnsESP+0xa74>)
 8001216:	5c9b      	ldrb	r3, [r3, r2]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b44      	ldr	r3, [pc, #272]	; (800132c <DecodeAnsESP+0xa84>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	4b4a      	ldr	r3, [pc, #296]	; (800134c <DecodeAnsESP+0xaa4>)
 8001222:	5c5b      	ldrb	r3, [r3, r1]
 8001224:	429a      	cmp	r2, r3
 8001226:	d116      	bne.n	8001256 <DecodeAnsESP+0x9ae>
						i++;
 8001228:	4b40      	ldr	r3, [pc, #256]	; (800132c <DecodeAnsESP+0xa84>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	3301      	adds	r3, #1
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b3e      	ldr	r3, [pc, #248]	; (800132c <DecodeAnsESP+0xa84>)
 8001232:	701a      	strb	r2, [r3, #0]
						if(i==4){
 8001234:	4b3d      	ldr	r3, [pc, #244]	; (800132c <DecodeAnsESP+0xa84>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b04      	cmp	r3, #4
 800123a:	d11c      	bne.n	8001276 <DecodeAnsESP+0x9ce>
							i=0;
 800123c:	4b3b      	ldr	r3, [pc, #236]	; (800132c <DecodeAnsESP+0xa84>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
							decodeIPD++;
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <DecodeAnsESP+0xa98>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <DecodeAnsESP+0xa98>)
 800124c:	701a      	strb	r2, [r3, #0]
							cks='U'^'N'^'E'^'R';
 800124e:	4b40      	ldr	r3, [pc, #256]	; (8001350 <DecodeAnsESP+0xaa8>)
 8001250:	220c      	movs	r2, #12
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e00f      	b.n	8001276 <DecodeAnsESP+0x9ce>
						}
					}else{
						if(i>0){
 8001256:	4b35      	ldr	r3, [pc, #212]	; (800132c <DecodeAnsESP+0xa84>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <DecodeAnsESP+0x9ce>
							indexR_RxESP=indexW_RxESP;
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <DecodeAnsESP+0xaa0>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <DecodeAnsESP+0xa70>)
 8001266:	701a      	strb	r2, [r3, #0]
							i=0;
 8001268:	4b30      	ldr	r3, [pc, #192]	; (800132c <DecodeAnsESP+0xa84>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
							decodeIPD=0;
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <DecodeAnsESP+0xa98>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
							break;
 8001274:	e0f0      	b.n	8001458 <DecodeAnsESP+0xbb0>
						}
					}
					indexR_RxESP++;
 8001276:	4b28      	ldr	r3, [pc, #160]	; (8001318 <DecodeAnsESP+0xa70>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	3301      	adds	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <DecodeAnsESP+0xa70>)
 8001282:	701a      	strb	r2, [r3, #0]
					break;
 8001284:	e0e8      	b.n	8001458 <DecodeAnsESP+0xbb0>
				case 3:
					bytesUNERprotocol=bufferRxESP[indexR_RxESP];
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <DecodeAnsESP+0xa70>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <DecodeAnsESP+0xa74>)
 8001290:	5c9b      	ldrb	r3, [r3, r2]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <DecodeAnsESP+0xaac>)
 8001296:	701a      	strb	r2, [r3, #0]
					decodeIPD++;
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <DecodeAnsESP+0xa98>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <DecodeAnsESP+0xa98>)
 80012a2:	701a      	strb	r2, [r3, #0]
					cks^=bufferRxESP[indexR_RxESP];
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <DecodeAnsESP+0xa70>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <DecodeAnsESP+0xa74>)
 80012ae:	5c9b      	ldrb	r3, [r3, r2]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <DecodeAnsESP+0xaa8>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4053      	eors	r3, r2
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <DecodeAnsESP+0xaa8>)
 80012bc:	701a      	strb	r2, [r3, #0]
					indexR_RxESP++;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <DecodeAnsESP+0xa70>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <DecodeAnsESP+0xa70>)
 80012ca:	701a      	strb	r2, [r3, #0]
					break;
 80012cc:	e0c4      	b.n	8001458 <DecodeAnsESP+0xbb0>
				case 4:
					if(bufferRxESP[indexR_RxESP]==':'){
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <DecodeAnsESP+0xa70>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <DecodeAnsESP+0xa74>)
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b3a      	cmp	r3, #58	; 0x3a
 80012de:	d13b      	bne.n	8001358 <DecodeAnsESP+0xab0>
						decodeIPD++;
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <DecodeAnsESP+0xa98>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <DecodeAnsESP+0xa98>)
 80012ea:	701a      	strb	r2, [r3, #0]
						cks^=bufferRxESP[indexR_RxESP];
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <DecodeAnsESP+0xa70>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <DecodeAnsESP+0xa74>)
 80012f6:	5c9b      	ldrb	r3, [r3, r2]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <DecodeAnsESP+0xaa8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4053      	eors	r3, r2
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <DecodeAnsESP+0xaa8>)
 8001304:	701a      	strb	r2, [r3, #0]
						indexR_RxESP=indexW_RxESP;
						i=0;
						decodeIPD=0;
						break;
					}
					indexR_RxESP++;
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <DecodeAnsESP+0xa70>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	3301      	adds	r3, #1
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b01      	ldr	r3, [pc, #4]	; (8001318 <DecodeAnsESP+0xa70>)
 8001312:	701a      	strb	r2, [r3, #0]
					break;
 8001314:	e0a0      	b.n	8001458 <DecodeAnsESP+0xbb0>
 8001316:	bf00      	nop
 8001318:	2000002e 	.word	0x2000002e
 800131c:	20000048 	.word	0x20000048
 8001320:	20000531 	.word	0x20000531
 8001324:	20000043 	.word	0x20000043
 8001328:	2000003f 	.word	0x2000003f
 800132c:	20000044 	.word	0x20000044
 8001330:	080088ac 	.word	0x080088ac
 8001334:	2000003d 	.word	0x2000003d
 8001338:	20000032 	.word	0x20000032
 800133c:	20000036 	.word	0x20000036
 8001340:	20000780 	.word	0x20000780
 8001344:	080088c8 	.word	0x080088c8
 8001348:	2000002f 	.word	0x2000002f
 800134c:	080088d0 	.word	0x080088d0
 8001350:	20000778 	.word	0x20000778
 8001354:	20000284 	.word	0x20000284
						indexR_RxESP=indexW_RxESP;
 8001358:	4b43      	ldr	r3, [pc, #268]	; (8001468 <DecodeAnsESP+0xbc0>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b43      	ldr	r3, [pc, #268]	; (800146c <DecodeAnsESP+0xbc4>)
 8001360:	701a      	strb	r2, [r3, #0]
						i=0;
 8001362:	4b43      	ldr	r3, [pc, #268]	; (8001470 <DecodeAnsESP+0xbc8>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
						decodeIPD=0;
 8001368:	4b42      	ldr	r3, [pc, #264]	; (8001474 <DecodeAnsESP+0xbcc>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
						break;
 800136e:	e073      	b.n	8001458 <DecodeAnsESP+0xbb0>
				case 5:
					cmdUNERprotocol=bufferRxESP[indexR_RxESP];
 8001370:	4b3e      	ldr	r3, [pc, #248]	; (800146c <DecodeAnsESP+0xbc4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <DecodeAnsESP+0xbd0>)
 800137a:	5c9b      	ldrb	r3, [r3, r2]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b3f      	ldr	r3, [pc, #252]	; (800147c <DecodeAnsESP+0xbd4>)
 8001380:	701a      	strb	r2, [r3, #0]
					decodeIPD++;
 8001382:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <DecodeAnsESP+0xbcc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <DecodeAnsESP+0xbcc>)
 800138c:	701a      	strb	r2, [r3, #0]
					cks^=bufferRxESP[indexR_RxESP];
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <DecodeAnsESP+0xbc4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <DecodeAnsESP+0xbd0>)
 8001398:	5c9b      	ldrb	r3, [r3, r2]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <DecodeAnsESP+0xbd8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4053      	eors	r3, r2
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b36      	ldr	r3, [pc, #216]	; (8001480 <DecodeAnsESP+0xbd8>)
 80013a6:	701a      	strb	r2, [r3, #0]
					indexR_RxESP++;
 80013a8:	4b30      	ldr	r3, [pc, #192]	; (800146c <DecodeAnsESP+0xbc4>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	3301      	adds	r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <DecodeAnsESP+0xbc4>)
 80013b4:	701a      	strb	r2, [r3, #0]
					i=indexR_RxESP;
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <DecodeAnsESP+0xbc4>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <DecodeAnsESP+0xbc8>)
 80013be:	701a      	strb	r2, [r3, #0]
					break;
 80013c0:	e04a      	b.n	8001458 <DecodeAnsESP+0xbb0>
				case 6:
					if(k<bytesUNERprotocol){
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <DecodeAnsESP+0xbdc>)
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <DecodeAnsESP+0xbe0>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d218      	bcs.n	8001400 <DecodeAnsESP+0xb58>
						cks^=bufferRxESP[i];
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <DecodeAnsESP+0xbc8>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <DecodeAnsESP+0xbd0>)
 80013d6:	5c9b      	ldrb	r3, [r3, r2]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <DecodeAnsESP+0xbd8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4053      	eors	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <DecodeAnsESP+0xbd8>)
 80013e4:	701a      	strb	r2, [r3, #0]
						i++;
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <DecodeAnsESP+0xbc8>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <DecodeAnsESP+0xbc8>)
 80013f0:	701a      	strb	r2, [r3, #0]
						k++;
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <DecodeAnsESP+0xbdc>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <DecodeAnsESP+0xbdc>)
 80013fc:	701a      	strb	r2, [r3, #0]
							i=0;
							decodeIPD=0;
							k=2;
						}
					}
					break;
 80013fe:	e02a      	b.n	8001456 <DecodeAnsESP+0xbae>
						if(cks==bufferRxESP[i]){
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <DecodeAnsESP+0xbc8>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <DecodeAnsESP+0xbd0>)
 8001408:	5c9b      	ldrb	r3, [r3, r2]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <DecodeAnsESP+0xbd8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d112      	bne.n	800143a <DecodeAnsESP+0xb92>
							DecodeCommands();
 8001414:	f000 f9fe 	bl	8001814 <DecodeCommands>
							indexR_RxESP++;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <DecodeAnsESP+0xbc4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <DecodeAnsESP+0xbc4>)
 8001424:	701a      	strb	r2, [r3, #0]
							k=2;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <DecodeAnsESP+0xbdc>)
 8001428:	2202      	movs	r2, #2
 800142a:	701a      	strb	r2, [r3, #0]
							i=0;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <DecodeAnsESP+0xbc8>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
							decodeIPD=0;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <DecodeAnsESP+0xbcc>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
					break;
 8001438:	e00d      	b.n	8001456 <DecodeAnsESP+0xbae>
							indexR_RxESP=indexW_RxESP;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <DecodeAnsESP+0xbc0>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <DecodeAnsESP+0xbc4>)
 8001442:	701a      	strb	r2, [r3, #0]
							i=0;
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <DecodeAnsESP+0xbc8>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
							decodeIPD=0;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <DecodeAnsESP+0xbcc>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
							k=2;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <DecodeAnsESP+0xbdc>)
 8001452:	2202      	movs	r2, #2
 8001454:	701a      	strb	r2, [r3, #0]
					break;
 8001456:	bf00      	nop
			}
			break;
 8001458:	e003      	b.n	8001462 <DecodeAnsESP+0xbba>
			break;
 800145a:	bf00      	nop
 800145c:	e002      	b.n	8001464 <DecodeAnsESP+0xbbc>
			break;
 800145e:	bf00      	nop
 8001460:	e000      	b.n	8001464 <DecodeAnsESP+0xbbc>
			break;
 8001462:	bf00      	nop
	}
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000002f 	.word	0x2000002f
 800146c:	2000002e 	.word	0x2000002e
 8001470:	20000044 	.word	0x20000044
 8001474:	20000780 	.word	0x20000780
 8001478:	20000048 	.word	0x20000048
 800147c:	20000530 	.word	0x20000530
 8001480:	20000778 	.word	0x20000778
 8001484:	20000001 	.word	0x20000001
 8001488:	20000284 	.word	0x20000284

0800148c <udpCom>:

void udpCom(uint8_t cmd){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	if(readyToSend){
 8001496:	4b87      	ldr	r3, [pc, #540]	; (80016b4 <udpCom+0x228>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 81a4 	beq.w	80017e8 <udpCom+0x35c>
		switch(cmd){
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2bf0      	cmp	r3, #240	; 0xf0
 80014a4:	d008      	beq.n	80014b8 <udpCom+0x2c>
 80014a6:	2bf0      	cmp	r3, #240	; 0xf0
 80014a8:	f300 819f 	bgt.w	80017ea <udpCom+0x35e>
 80014ac:	2ba1      	cmp	r3, #161	; 0xa1
 80014ae:	f000 80cc 	beq.w	800164a <udpCom+0x1be>
 80014b2:	2bd0      	cmp	r3, #208	; 0xd0
 80014b4:	d066      	beq.n	8001584 <udpCom+0xf8>
					timeOut2=200;
				}
				break;
		}
	}
}
 80014b6:	e198      	b.n	80017ea <udpCom+0x35e>
				if(!espReadyToRecieve){
 80014b8:	4b7f      	ldr	r3, [pc, #508]	; (80016b8 <udpCom+0x22c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d131      	bne.n	8001524 <udpCom+0x98>
					AT=6;
 80014c0:	4b7e      	ldr	r3, [pc, #504]	; (80016bc <udpCom+0x230>)
 80014c2:	2206      	movs	r2, #6
 80014c4:	701a      	strb	r2, [r3, #0]
					memcpy(&bufferTxESP[indexW_TxESP],CIPSEND,11);
 80014c6:	4b7e      	ldr	r3, [pc, #504]	; (80016c0 <udpCom+0x234>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <udpCom+0x238>)
 80014d0:	4413      	add	r3, r2
 80014d2:	220b      	movs	r2, #11
 80014d4:	497c      	ldr	r1, [pc, #496]	; (80016c8 <udpCom+0x23c>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f007 f8e8 	bl	80086ac <memcpy>
					indexW_TxESP+=11;
 80014dc:	4b78      	ldr	r3, [pc, #480]	; (80016c0 <udpCom+0x234>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	330b      	adds	r3, #11
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b76      	ldr	r3, [pc, #472]	; (80016c0 <udpCom+0x234>)
 80014e8:	701a      	strb	r2, [r3, #0]
					memcpy(&bufferTxESP[indexW_TxESP],"8\r\n",3);
 80014ea:	4b75      	ldr	r3, [pc, #468]	; (80016c0 <udpCom+0x234>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b74      	ldr	r3, [pc, #464]	; (80016c4 <udpCom+0x238>)
 80014f4:	4413      	add	r3, r2
 80014f6:	2203      	movs	r2, #3
 80014f8:	4974      	ldr	r1, [pc, #464]	; (80016cc <udpCom+0x240>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f007 f8d6 	bl	80086ac <memcpy>
					indexW_TxESP+=3;
 8001500:	4b6f      	ldr	r3, [pc, #444]	; (80016c0 <udpCom+0x234>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3303      	adds	r3, #3
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b6d      	ldr	r3, [pc, #436]	; (80016c0 <udpCom+0x234>)
 800150c:	701a      	strb	r2, [r3, #0]
					bytesToSend=8;
 800150e:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <udpCom+0x244>)
 8001510:	2208      	movs	r2, #8
 8001512:	701a      	strb	r2, [r3, #0]
					timeOut2=400;
 8001514:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <udpCom+0x248>)
 8001516:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800151a:	801a      	strh	r2, [r3, #0]
					readyToSend=0;
 800151c:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <udpCom+0x228>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
				break;
 8001522:	e162      	b.n	80017ea <udpCom+0x35e>
					memcpy(&bufferTxESP[indexW_TxESP],ALIVE,7);
 8001524:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <udpCom+0x234>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	4b65      	ldr	r3, [pc, #404]	; (80016c4 <udpCom+0x238>)
 800152e:	4413      	add	r3, r2
 8001530:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <udpCom+0x24c>)
 8001532:	6810      	ldr	r0, [r2, #0]
 8001534:	6018      	str	r0, [r3, #0]
 8001536:	8891      	ldrh	r1, [r2, #4]
 8001538:	7992      	ldrb	r2, [r2, #6]
 800153a:	8099      	strh	r1, [r3, #4]
 800153c:	719a      	strb	r2, [r3, #6]
					indexW_TxESP+=7;
 800153e:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <udpCom+0x234>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	3307      	adds	r3, #7
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <udpCom+0x234>)
 800154a:	701a      	strb	r2, [r3, #0]
					bufferTxESP[indexW_TxESP]='U'^'N'^'E'^'R'^0x02^':'^0xF0;
 800154c:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <udpCom+0x234>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <udpCom+0x238>)
 8001556:	21c4      	movs	r1, #196	; 0xc4
 8001558:	5499      	strb	r1, [r3, r2]
					indexW_TxESP++;
 800155a:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <udpCom+0x234>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3301      	adds	r3, #1
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <udpCom+0x234>)
 8001566:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 8001568:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <udpCom+0x22c>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
					duty++;
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <udpCom+0x250>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b59      	ldr	r3, [pc, #356]	; (80016dc <udpCom+0x250>)
 8001578:	701a      	strb	r2, [r3, #0]
					timeOut=400;
 800157a:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <udpCom+0x254>)
 800157c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001580:	801a      	strh	r2, [r3, #0]
				break;
 8001582:	e132      	b.n	80017ea <udpCom+0x35e>
				if(!espReadyToRecieve){
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <udpCom+0x22c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d131      	bne.n	80015f0 <udpCom+0x164>
					AT=6;
 800158c:	4b4b      	ldr	r3, [pc, #300]	; (80016bc <udpCom+0x230>)
 800158e:	2206      	movs	r2, #6
 8001590:	701a      	strb	r2, [r3, #0]
					memcpy(&bufferTxESP[indexW_TxESP],CIPSEND,11);
 8001592:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <udpCom+0x234>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <udpCom+0x238>)
 800159c:	4413      	add	r3, r2
 800159e:	220b      	movs	r2, #11
 80015a0:	4949      	ldr	r1, [pc, #292]	; (80016c8 <udpCom+0x23c>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f007 f882 	bl	80086ac <memcpy>
					indexW_TxESP+=11;
 80015a8:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <udpCom+0x234>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	330b      	adds	r3, #11
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <udpCom+0x234>)
 80015b4:	701a      	strb	r2, [r3, #0]
					memcpy(&bufferTxESP[indexW_TxESP],"9\r\n",3);
 80015b6:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <udpCom+0x234>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <udpCom+0x238>)
 80015c0:	4413      	add	r3, r2
 80015c2:	2203      	movs	r2, #3
 80015c4:	4947      	ldr	r1, [pc, #284]	; (80016e4 <udpCom+0x258>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f007 f870 	bl	80086ac <memcpy>
					indexW_TxESP+=3;
 80015cc:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <udpCom+0x234>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	3303      	adds	r3, #3
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <udpCom+0x234>)
 80015d8:	701a      	strb	r2, [r3, #0]
					bytesToSend=9;
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <udpCom+0x244>)
 80015dc:	2209      	movs	r2, #9
 80015de:	701a      	strb	r2, [r3, #0]
					timeOut2=400;
 80015e0:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <udpCom+0x248>)
 80015e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80015e6:	801a      	strh	r2, [r3, #0]
					readyToSend=0;
 80015e8:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <udpCom+0x228>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
				break;
 80015ee:	e0fc      	b.n	80017ea <udpCom+0x35e>
					memcpy(&bufferTxESP[indexW_TxESP],ACK_D0,9);
 80015f0:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <udpCom+0x234>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <udpCom+0x238>)
 80015fa:	4413      	add	r3, r2
 80015fc:	493a      	ldr	r1, [pc, #232]	; (80016e8 <udpCom+0x25c>)
 80015fe:	461a      	mov	r2, r3
 8001600:	460b      	mov	r3, r1
 8001602:	cb03      	ldmia	r3!, {r0, r1}
 8001604:	6010      	str	r0, [r2, #0]
 8001606:	6051      	str	r1, [r2, #4]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	7213      	strb	r3, [r2, #8]
					indexW_TxESP+=9;
 800160c:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <udpCom+0x234>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3309      	adds	r3, #9
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <udpCom+0x234>)
 8001618:	701a      	strb	r2, [r3, #0]
					bufferTxESP[indexW_TxESP]='U'^'N'^'E'^'R'^0x03^':'^0xD0^0x0D;
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <udpCom+0x234>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <udpCom+0x238>)
 8001624:	21e8      	movs	r1, #232	; 0xe8
 8001626:	5499      	strb	r1, [r3, r2]
					indexW_TxESP++;
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <udpCom+0x234>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	3301      	adds	r3, #1
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <udpCom+0x234>)
 8001634:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <udpCom+0x22c>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
					duty++;
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <udpCom+0x250>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <udpCom+0x250>)
 8001646:	701a      	strb	r2, [r3, #0]
				break;
 8001648:	e0cf      	b.n	80017ea <udpCom+0x35e>
				if(!espReadyToRecieve){
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <udpCom+0x22c>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d14e      	bne.n	80016f0 <udpCom+0x264>
					AT=6;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <udpCom+0x230>)
 8001654:	2206      	movs	r2, #6
 8001656:	701a      	strb	r2, [r3, #0]
					memcpy(&bufferTxESP[indexW_TxESP],CIPSEND,11);
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <udpCom+0x234>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <udpCom+0x238>)
 8001662:	4413      	add	r3, r2
 8001664:	220b      	movs	r2, #11
 8001666:	4918      	ldr	r1, [pc, #96]	; (80016c8 <udpCom+0x23c>)
 8001668:	4618      	mov	r0, r3
 800166a:	f007 f81f 	bl	80086ac <memcpy>
					indexW_TxESP+=11;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <udpCom+0x234>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	330b      	adds	r3, #11
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <udpCom+0x234>)
 800167a:	701a      	strb	r2, [r3, #0]
					memcpy(&bufferTxESP[indexW_TxESP],"10\r\n",4);
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <udpCom+0x234>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <udpCom+0x238>)
 8001686:	4413      	add	r3, r2
 8001688:	2204      	movs	r2, #4
 800168a:	4918      	ldr	r1, [pc, #96]	; (80016ec <udpCom+0x260>)
 800168c:	4618      	mov	r0, r3
 800168e:	f007 f80d 	bl	80086ac <memcpy>
					indexW_TxESP+=4;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <udpCom+0x234>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	3304      	adds	r3, #4
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <udpCom+0x234>)
 800169e:	701a      	strb	r2, [r3, #0]
					bytesToSend=10;
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <udpCom+0x244>)
 80016a2:	220a      	movs	r2, #10
 80016a4:	701a      	strb	r2, [r3, #0]
					timeOut2=200;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <udpCom+0x248>)
 80016a8:	22c8      	movs	r2, #200	; 0xc8
 80016aa:	801a      	strh	r2, [r3, #0]
					readyToSend=0;
 80016ac:	4b01      	ldr	r3, [pc, #4]	; (80016b4 <udpCom+0x228>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
				break;
 80016b2:	e09a      	b.n	80017ea <udpCom+0x35e>
 80016b4:	2000003d 	.word	0x2000003d
 80016b8:	2000003e 	.word	0x2000003e
 80016bc:	20000032 	.word	0x20000032
 80016c0:	2000002d 	.word	0x2000002d
 80016c4:	200002cc 	.word	0x200002cc
 80016c8:	08008774 	.word	0x08008774
 80016cc:	080086f0 	.word	0x080086f0
 80016d0:	20000531 	.word	0x20000531
 80016d4:	20000036 	.word	0x20000036
 80016d8:	080088c0 	.word	0x080088c0
 80016dc:	2000003c 	.word	0x2000003c
 80016e0:	20000034 	.word	0x20000034
 80016e4:	080086f4 	.word	0x080086f4
 80016e8:	080088d4 	.word	0x080088d4
 80016ec:	080086f8 	.word	0x080086f8
					memcpy(&bufferTxESP[indexW_TxESP],UNER,4);
 80016f0:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <udpCom+0x368>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <udpCom+0x36c>)
 80016fa:	4413      	add	r3, r2
 80016fc:	4a3f      	ldr	r2, [pc, #252]	; (80017fc <udpCom+0x370>)
 80016fe:	6810      	ldr	r0, [r2, #0]
 8001700:	6018      	str	r0, [r3, #0]
					indexW_TxESP+=4;
 8001702:	4b3c      	ldr	r3, [pc, #240]	; (80017f4 <udpCom+0x368>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	3304      	adds	r3, #4
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <udpCom+0x368>)
 800170e:	701a      	strb	r2, [r3, #0]
					bufferTxESP[indexW_TxESP]=0x04;
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <udpCom+0x368>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <udpCom+0x36c>)
 800171a:	2104      	movs	r1, #4
 800171c:	5499      	strb	r1, [r3, r2]
					indexW_TxESP++;
 800171e:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <udpCom+0x368>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	3301      	adds	r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <udpCom+0x368>)
 800172a:	701a      	strb	r2, [r3, #0]
					bufferTxESP[indexW_TxESP]=':';
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <udpCom+0x368>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <udpCom+0x36c>)
 8001736:	213a      	movs	r1, #58	; 0x3a
 8001738:	5499      	strb	r1, [r3, r2]
					indexW_TxESP++;
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <udpCom+0x368>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	3301      	adds	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <udpCom+0x368>)
 8001746:	701a      	strb	r2, [r3, #0]
					bufferTxESP[indexW_TxESP]=0xA1;
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <udpCom+0x368>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <udpCom+0x36c>)
 8001752:	21a1      	movs	r1, #161	; 0xa1
 8001754:	5499      	strb	r1, [r3, r2]
					indexW_TxESP++;
 8001756:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <udpCom+0x368>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	3301      	adds	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <udpCom+0x368>)
 8001762:	701a      	strb	r2, [r3, #0]
					bufferTxESP[indexW_TxESP]=valueADC.u8[0];
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <udpCom+0x368>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	4b24      	ldr	r3, [pc, #144]	; (8001800 <udpCom+0x374>)
 800176e:	7819      	ldrb	r1, [r3, #0]
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <udpCom+0x36c>)
 8001772:	5499      	strb	r1, [r3, r2]
					indexW_TxESP++;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <udpCom+0x368>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	3301      	adds	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <udpCom+0x368>)
 8001780:	701a      	strb	r2, [r3, #0]
					bufferTxESP[indexW_TxESP]=valueADC.u8[1];
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <udpCom+0x368>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <udpCom+0x374>)
 800178c:	7859      	ldrb	r1, [r3, #1]
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <udpCom+0x36c>)
 8001790:	5499      	strb	r1, [r3, r2]
					indexW_TxESP++;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <udpCom+0x368>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <udpCom+0x368>)
 800179e:	701a      	strb	r2, [r3, #0]
					bufferTxESP[indexW_TxESP]='U'^'N'^'E'^'R'^0x04^':'^0xA1^valueADC.u8[0]^valueADC.u8[1];
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <udpCom+0x374>)
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <udpCom+0x374>)
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	4053      	eors	r3, r2
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <udpCom+0x368>)
 80017ae:	7812      	ldrb	r2, [r2, #0]
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	f083 036c 	eor.w	r3, r3, #108	; 0x6c
 80017b6:	43db      	mvns	r3, r3
 80017b8:	b2d9      	uxtb	r1, r3
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <udpCom+0x36c>)
 80017bc:	5499      	strb	r1, [r3, r2]
					indexW_TxESP++;
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <udpCom+0x368>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <udpCom+0x368>)
 80017ca:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <udpCom+0x378>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
					readyToSend=0;
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <udpCom+0x37c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
					timeOut=2000;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <udpCom+0x380>)
 80017da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017de:	801a      	strh	r2, [r3, #0]
					timeOut2=200;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <udpCom+0x384>)
 80017e2:	22c8      	movs	r2, #200	; 0xc8
 80017e4:	801a      	strh	r2, [r3, #0]
				break;
 80017e6:	e000      	b.n	80017ea <udpCom+0x35e>
	}
 80017e8:	bf00      	nop
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000002d 	.word	0x2000002d
 80017f8:	200002cc 	.word	0x200002cc
 80017fc:	080088d0 	.word	0x080088d0
 8001800:	200001e4 	.word	0x200001e4
 8001804:	2000003e 	.word	0x2000003e
 8001808:	2000003d 	.word	0x2000003d
 800180c:	20000034 	.word	0x20000034
 8001810:	20000036 	.word	0x20000036

08001814 <DecodeCommands>:

void DecodeCommands(){
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	switch(cmdUNERprotocol){
 8001818:	4b79      	ldr	r3, [pc, #484]	; (8001a00 <DecodeCommands+0x1ec>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2bd0      	cmp	r3, #208	; 0xd0
 800181e:	f040 80ea 	bne.w	80019f6 <DecodeCommands+0x1e2>
//			break;

		case 0xD0://COMANDO EN HEX 55 4E 45 52 0E 3A D0 C8 00 00 00 C8 00 00 00 88 13 00 00 73 (5 SEG)
			//55 4E 45 52 0E 3A D0 C8 00 00 00 C8 00 00 00 E8 03 00 00 03 (1 SEG)
			//55 4E 45 52 0E 3A D0 C8 00 00 00 C8 00 00 00 D0 07 00 00 3F (2 SEG)
			PWM_motor1.u8[0]=bufferRxESP[indexR_RxESP];
 8001822:	4b78      	ldr	r3, [pc, #480]	; (8001a04 <DecodeCommands+0x1f0>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	4b77      	ldr	r3, [pc, #476]	; (8001a08 <DecodeCommands+0x1f4>)
 800182c:	5c9b      	ldrb	r3, [r3, r2]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <DecodeCommands+0x1f8>)
 8001832:	701a      	strb	r2, [r3, #0]
			indexR_RxESP++;
 8001834:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <DecodeCommands+0x1f0>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	3301      	adds	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b71      	ldr	r3, [pc, #452]	; (8001a04 <DecodeCommands+0x1f0>)
 8001840:	701a      	strb	r2, [r3, #0]
			PWM_motor1.u8[1]=bufferRxESP[indexR_RxESP];
 8001842:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <DecodeCommands+0x1f0>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <DecodeCommands+0x1f4>)
 800184c:	5c9b      	ldrb	r3, [r3, r2]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b6e      	ldr	r3, [pc, #440]	; (8001a0c <DecodeCommands+0x1f8>)
 8001852:	705a      	strb	r2, [r3, #1]
			indexR_RxESP++;
 8001854:	4b6b      	ldr	r3, [pc, #428]	; (8001a04 <DecodeCommands+0x1f0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	3301      	adds	r3, #1
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <DecodeCommands+0x1f0>)
 8001860:	701a      	strb	r2, [r3, #0]
			PWM_motor1.u8[2]=bufferRxESP[indexR_RxESP];
 8001862:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <DecodeCommands+0x1f0>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	4b67      	ldr	r3, [pc, #412]	; (8001a08 <DecodeCommands+0x1f4>)
 800186c:	5c9b      	ldrb	r3, [r3, r2]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <DecodeCommands+0x1f8>)
 8001872:	709a      	strb	r2, [r3, #2]
			indexR_RxESP++;
 8001874:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <DecodeCommands+0x1f0>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3301      	adds	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <DecodeCommands+0x1f0>)
 8001880:	701a      	strb	r2, [r3, #0]
			PWM_motor1.u8[3]=bufferRxESP[indexR_RxESP];
 8001882:	4b60      	ldr	r3, [pc, #384]	; (8001a04 <DecodeCommands+0x1f0>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <DecodeCommands+0x1f4>)
 800188c:	5c9b      	ldrb	r3, [r3, r2]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b5e      	ldr	r3, [pc, #376]	; (8001a0c <DecodeCommands+0x1f8>)
 8001892:	70da      	strb	r2, [r3, #3]
			indexR_RxESP++;
 8001894:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <DecodeCommands+0x1f0>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <DecodeCommands+0x1f0>)
 80018a0:	701a      	strb	r2, [r3, #0]

			PWM_motor2.u8[0]=bufferRxESP[indexR_RxESP];
 80018a2:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <DecodeCommands+0x1f0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <DecodeCommands+0x1f4>)
 80018ac:	5c9b      	ldrb	r3, [r3, r2]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b57      	ldr	r3, [pc, #348]	; (8001a10 <DecodeCommands+0x1fc>)
 80018b2:	701a      	strb	r2, [r3, #0]
			indexR_RxESP++;
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <DecodeCommands+0x1f0>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <DecodeCommands+0x1f0>)
 80018c0:	701a      	strb	r2, [r3, #0]
			PWM_motor2.u8[1]=bufferRxESP[indexR_RxESP];
 80018c2:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <DecodeCommands+0x1f0>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <DecodeCommands+0x1f4>)
 80018cc:	5c9b      	ldrb	r3, [r3, r2]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b4f      	ldr	r3, [pc, #316]	; (8001a10 <DecodeCommands+0x1fc>)
 80018d2:	705a      	strb	r2, [r3, #1]
			indexR_RxESP++;
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <DecodeCommands+0x1f0>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	3301      	adds	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <DecodeCommands+0x1f0>)
 80018e0:	701a      	strb	r2, [r3, #0]
			PWM_motor2.u8[2]=bufferRxESP[indexR_RxESP];
 80018e2:	4b48      	ldr	r3, [pc, #288]	; (8001a04 <DecodeCommands+0x1f0>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <DecodeCommands+0x1f4>)
 80018ec:	5c9b      	ldrb	r3, [r3, r2]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <DecodeCommands+0x1fc>)
 80018f2:	709a      	strb	r2, [r3, #2]
			indexR_RxESP++;
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <DecodeCommands+0x1f0>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <DecodeCommands+0x1f0>)
 8001900:	701a      	strb	r2, [r3, #0]
			PWM_motor2.u8[3]=bufferRxESP[indexR_RxESP];
 8001902:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <DecodeCommands+0x1f0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <DecodeCommands+0x1f4>)
 800190c:	5c9b      	ldrb	r3, [r3, r2]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <DecodeCommands+0x1fc>)
 8001912:	70da      	strb	r2, [r3, #3]
			indexR_RxESP++;
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <DecodeCommands+0x1f0>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3301      	adds	r3, #1
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <DecodeCommands+0x1f0>)
 8001920:	701a      	strb	r2, [r3, #0]

			jobTime.u8[0]=bufferRxESP[indexR_RxESP];
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <DecodeCommands+0x1f0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <DecodeCommands+0x1f4>)
 800192c:	5c9b      	ldrb	r3, [r3, r2]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <DecodeCommands+0x200>)
 8001932:	701a      	strb	r2, [r3, #0]
			indexR_RxESP++;
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <DecodeCommands+0x1f0>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	3301      	adds	r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <DecodeCommands+0x1f0>)
 8001940:	701a      	strb	r2, [r3, #0]
			jobTime.u8[1]=bufferRxESP[indexR_RxESP];
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <DecodeCommands+0x1f0>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <DecodeCommands+0x1f4>)
 800194c:	5c9b      	ldrb	r3, [r3, r2]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <DecodeCommands+0x200>)
 8001952:	705a      	strb	r2, [r3, #1]
			indexR_RxESP++;
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <DecodeCommands+0x1f0>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3301      	adds	r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <DecodeCommands+0x1f0>)
 8001960:	701a      	strb	r2, [r3, #0]
			jobTime.u8[2]=bufferRxESP[indexR_RxESP];
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <DecodeCommands+0x1f0>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <DecodeCommands+0x1f4>)
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <DecodeCommands+0x200>)
 8001972:	709a      	strb	r2, [r3, #2]
			indexR_RxESP++;
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <DecodeCommands+0x1f0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	3301      	adds	r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <DecodeCommands+0x1f0>)
 8001980:	701a      	strb	r2, [r3, #0]
			jobTime.u8[3]=bufferRxESP[indexR_RxESP];
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <DecodeCommands+0x1f0>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <DecodeCommands+0x1f4>)
 800198c:	5c9b      	ldrb	r3, [r3, r2]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <DecodeCommands+0x200>)
 8001992:	70da      	strb	r2, [r3, #3]
			indexR_RxESP++;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <DecodeCommands+0x1f0>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	3301      	adds	r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <DecodeCommands+0x1f0>)
 80019a0:	701a      	strb	r2, [r3, #0]

			timeOut4=jobTime.u32/100;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <DecodeCommands+0x200>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <DecodeCommands+0x204>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	095b      	lsrs	r3, r3, #5
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <DecodeCommands+0x208>)
 80019b2:	801a      	strh	r2, [r3, #0]

			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,PWM_motor1.u32);
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <DecodeCommands+0x20c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <DecodeCommands+0x1f8>)
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <DecodeCommands+0x20c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <DecodeCommands+0x20c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,PWM_motor2.u32);
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <DecodeCommands+0x20c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <DecodeCommands+0x1fc>)
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
			race=1;
 80019d8:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <DecodeCommands+0x210>)
 80019da:	7813      	ldrb	r3, [r2, #0]
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	7013      	strb	r3, [r2, #0]
			duty=2;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <DecodeCommands+0x214>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	701a      	strb	r2, [r3, #0]
			comando=0xD0;
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <DecodeCommands+0x218>)
 80019ea:	22d0      	movs	r2, #208	; 0xd0
 80019ec:	701a      	strb	r2, [r3, #0]
			readyToSend=1;
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <DecodeCommands+0x21c>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
			break;
 80019f4:	bf00      	nop

	}
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20000530 	.word	0x20000530
 8001a04:	2000002e 	.word	0x2000002e
 8001a08:	20000048 	.word	0x20000048
 8001a0c:	2000077c 	.word	0x2000077c
 8001a10:	200001e8 	.word	0x200001e8
 8001a14:	200001ec 	.word	0x200001ec
 8001a18:	51eb851f 	.word	0x51eb851f
 8001a1c:	2000003a 	.word	0x2000003a
 8001a20:	200001f0 	.word	0x200001f0
 8001a24:	200003cc 	.word	0x200003cc
 8001a28:	2000003c 	.word	0x2000003c
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	2000003d 	.word	0x2000003d

08001a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a38:	f000 ff30 	bl	800289c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a3c:	f000 f922 	bl	8001c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8001a40:	f000 fb98 	bl	8002174 <MX_DMA_Init>
  MX_GPIO_Init();
 8001a44:	f000 fbb6 	bl	80021b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a48:	f000 fb6a 	bl	8002120 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001a4c:	f000 f986 	bl	8001d5c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001a50:	f000 fa2a 	bl	8001ea8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001a54:	f000 fa56 	bl	8001f04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a58:	f000 fb38 	bl	80020cc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001a5c:	f000 fae8 	bl	8002030 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001a60:	4873      	ldr	r0, [pc, #460]	; (8001c30 <main+0x1fc>)
 8001a62:	f004 fe95 	bl	8006790 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a66:	2100      	movs	r1, #0
 8001a68:	4871      	ldr	r0, [pc, #452]	; (8001c30 <main+0x1fc>)
 8001a6a:	f004 ffa7 	bl	80069bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a6e:	2104      	movs	r1, #4
 8001a70:	486f      	ldr	r0, [pc, #444]	; (8001c30 <main+0x1fc>)
 8001a72:	f004 ffa3 	bl	80069bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a76:	2108      	movs	r1, #8
 8001a78:	486d      	ldr	r0, [pc, #436]	; (8001c30 <main+0x1fc>)
 8001a7a:	f004 ff9f 	bl	80069bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001a7e:	210c      	movs	r1, #12
 8001a80:	486b      	ldr	r0, [pc, #428]	; (8001c30 <main+0x1fc>)
 8001a82:	f004 ff9b 	bl	80069bc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim4);
 8001a86:	486b      	ldr	r0, [pc, #428]	; (8001c34 <main+0x200>)
 8001a88:	f004 fedc 	bl	8006844 <HAL_TIM_Base_Start_IT>
  //HAL_UART_Receive_IT(&huart2, &bufferPC[indexW_PC], 1);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);//ESP8266 Pin Enable
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a92:	4869      	ldr	r0, [pc, #420]	; (8001c38 <main+0x204>)
 8001a94:	f002 fb6e 	bl	8004174 <HAL_GPIO_WritePin>
  timeOut2=6000;
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <main+0x208>)
 8001a9a:	f241 7270 	movw	r2, #6000	; 0x1770
 8001a9e:	801a      	strh	r2, [r3, #0]
  timeOut3=2000;
 8001aa0:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <main+0x20c>)
 8001aa2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aa6:	801a      	strh	r2, [r3, #0]
  timeOut=6000;
 8001aa8:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <main+0x210>)
 8001aaa:	f241 7270 	movw	r2, #6000	; 0x1770
 8001aae:	801a      	strh	r2, [r3, #0]
  readyToSend=1;
 8001ab0:	4b65      	ldr	r3, [pc, #404]	; (8001c48 <main+0x214>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
  race=0;
 8001ab6:	4a65      	ldr	r2, [pc, #404]	; (8001c4c <main+0x218>)
 8001ab8:	7813      	ldrb	r3, [r2, #0]
 8001aba:	f36f 0300 	bfc	r3, #0, #1
 8001abe:	7013      	strb	r3, [r2, #0]
  duty=0;
 8001ac0:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <main+0x21c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!timeOut3){
 8001ac6:	4b5e      	ldr	r3, [pc, #376]	; (8001c40 <main+0x20c>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <main+0xb0>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	4860      	ldr	r0, [pc, #384]	; (8001c54 <main+0x220>)
 8001ad4:	f002 fb67 	bl	80041a6 <HAL_GPIO_TogglePin>
		  timeOut3=2000;
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <main+0x20c>)
 8001ada:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ade:	801a      	strh	r2, [r3, #0]
		  readADC();
 8001ae0:	f7fe fd8c 	bl	80005fc <readADC>

	  }
	  switch(duty){
 8001ae4:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <main+0x21c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d839      	bhi.n	8001b60 <main+0x12c>
 8001aec:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <main+0xc0>)
 8001aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af2:	bf00      	nop
 8001af4:	08001b05 	.word	0x08001b05
 8001af8:	08001b37 	.word	0x08001b37
 8001afc:	08001b3d 	.word	0x08001b3d
 8001b00:	08001b49 	.word	0x08001b49
	  	  case 0:
	  		  if(!timeOut){
 8001b04:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <main+0x210>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d125      	bne.n	8001b5a <main+0x126>
	  			 initESP();
 8001b0e:	f7fe fddf 	bl	80006d0 <initESP>
	  			 HAL_UART_Receive_IT(&huart1, &bufferRxESP[indexW_RxESP], 1);
 8001b12:	4b51      	ldr	r3, [pc, #324]	; (8001c58 <main+0x224>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <main+0x228>)
 8001b1c:	4413      	add	r3, r2
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4619      	mov	r1, r3
 8001b22:	484f      	ldr	r0, [pc, #316]	; (8001c60 <main+0x22c>)
 8001b24:	f005 fe4f 	bl	80077c6 <HAL_UART_Receive_IT>
	  		  	  duty++;
 8001b28:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <main+0x21c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <main+0x21c>)
 8001b32:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8001b34:	e011      	b.n	8001b5a <main+0x126>
	  	  case 1:
	  		  initESP();
 8001b36:	f7fe fdcb 	bl	80006d0 <initESP>
	  		  break;
 8001b3a:	e011      	b.n	8001b60 <main+0x12c>
	  	  case 2:
	  		  udpCom(comando);
 8001b3c:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <main+0x230>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fca3 	bl	800148c <udpCom>
	  		  break;
 8001b46:	e00b      	b.n	8001b60 <main+0x12c>
	  	  case 3:
	  		  if(!timeOut)
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <main+0x210>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <main+0x12a>
	  			  udpCom(0xA1);
 8001b52:	20a1      	movs	r0, #161	; 0xa1
 8001b54:	f7ff fc9a 	bl	800148c <udpCom>
	  		  break;
 8001b58:	e001      	b.n	8001b5e <main+0x12a>
	  		  break;
 8001b5a:	bf00      	nop
 8001b5c:	e000      	b.n	8001b60 <main+0x12c>
	  		  break;
 8001b5e:	bf00      	nop
	  }

	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)==GPIO_PIN_RESET)&&(!timeOut)){
 8001b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b64:	4834      	ldr	r0, [pc, #208]	; (8001c38 <main+0x204>)
 8001b66:	f002 faed 	bl	8004144 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d116      	bne.n	8001b9e <main+0x16a>
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <main+0x210>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d111      	bne.n	8001b9e <main+0x16a>
		  HAL_UART_AbortReceive_IT(&huart1);
 8001b7a:	4839      	ldr	r0, [pc, #228]	; (8001c60 <main+0x22c>)
 8001b7c:	f005 fe54 	bl	8007828 <HAL_UART_AbortReceive_IT>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);//ESP8266 Pin Enable
 8001b80:	2201      	movs	r2, #1
 8001b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b86:	482c      	ldr	r0, [pc, #176]	; (8001c38 <main+0x204>)
 8001b88:	f002 faf4 	bl	8004174 <HAL_GPIO_WritePin>
		  timeOut=30;
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <main+0x210>)
 8001b8e:	221e      	movs	r2, #30
 8001b90:	801a      	strh	r2, [r3, #0]
		  AT=1;
 8001b92:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <main+0x234>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
		  duty=0;
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <main+0x21c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
	  }




	  if(indexR_TxESP!=indexW_TxESP){
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <main+0x238>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <main+0x23c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d002      	beq.n	8001bb4 <main+0x180>
		  uartTX(UART_ESP);
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f7fe fd40 	bl	8000634 <uartTX>
	  }

	  if(indexR_Debug!=indexW_Debug){
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <main+0x240>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <main+0x244>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d002      	beq.n	8001bca <main+0x196>
		  uartTX(UART_PC);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f7fe fd35 	bl	8000634 <uartTX>
	  }

	  if((indexR_RxESP!=indexW_RxESP)&&(!timeOut2)){
 8001bca:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <main+0x248>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <main+0x224>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d006      	beq.n	8001be8 <main+0x1b4>
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <main+0x208>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <main+0x1b4>
		  DecodeAnsESP();
 8001be4:	f7fe fe60 	bl	80008a8 <DecodeAnsESP>
	  }

	  if((!timeOut4)&&(race)){
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <main+0x24c>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f47f af69 	bne.w	8001ac6 <main+0x92>
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <main+0x218>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f43f af61 	beq.w	8001ac6 <main+0x92>
		race=0;
 8001c04:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <main+0x218>)
 8001c06:	7813      	ldrb	r3, [r2, #0]
 8001c08:	f36f 0300 	bfc	r3, #0, #1
 8001c0c:	7013      	strb	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <main+0x1fc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2200      	movs	r2, #0
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <main+0x1fc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <main+0x1fc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8001c26:	4b02      	ldr	r3, [pc, #8]	; (8001c30 <main+0x1fc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
	  if(!timeOut3){
 8001c2e:	e74a      	b.n	8001ac6 <main+0x92>
 8001c30:	200001f0 	.word	0x200001f0
 8001c34:	20000148 	.word	0x20000148
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	20000036 	.word	0x20000036
 8001c40:	20000038 	.word	0x20000038
 8001c44:	20000034 	.word	0x20000034
 8001c48:	2000003d 	.word	0x2000003d
 8001c4c:	200003cc 	.word	0x200003cc
 8001c50:	2000003c 	.word	0x2000003c
 8001c54:	40020000 	.word	0x40020000
 8001c58:	2000002f 	.word	0x2000002f
 8001c5c:	20000048 	.word	0x20000048
 8001c60:	20000288 	.word	0x20000288
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000032 	.word	0x20000032
 8001c6c:	2000002c 	.word	0x2000002c
 8001c70:	2000002d 	.word	0x2000002d
 8001c74:	20000030 	.word	0x20000030
 8001c78:	20000031 	.word	0x20000031
 8001c7c:	2000002e 	.word	0x2000002e
 8001c80:	2000003a 	.word	0x2000003a

08001c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b094      	sub	sp, #80	; 0x50
 8001c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8a:	f107 0320 	add.w	r3, r7, #32
 8001c8e:	2230      	movs	r2, #48	; 0x30
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f006 fd18 	bl	80086c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <SystemClock_Config+0xd0>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <SystemClock_Config+0xd0>)
 8001cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <SystemClock_Config+0xd0>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <SystemClock_Config+0xd4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cd0:	4a21      	ldr	r2, [pc, #132]	; (8001d58 <SystemClock_Config+0xd4>)
 8001cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <SystemClock_Config+0xd4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cec:	2310      	movs	r3, #16
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001cf8:	2310      	movs	r3, #16
 8001cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001cfc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d02:	2304      	movs	r3, #4
 8001d04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d06:	2307      	movs	r3, #7
 8001d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0a:	f107 0320 	add.w	r3, r7, #32
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 f87a 	bl	8005e08 <HAL_RCC_OscConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d1a:	f000 fad1 	bl	80022c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d1e:	230f      	movs	r3, #15
 8001d20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d22:	2302      	movs	r3, #2
 8001d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	2102      	movs	r1, #2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 fadc 	bl	80062f8 <HAL_RCC_ClockConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d46:	f000 fabb 	bl	80022c0 <Error_Handler>
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	3750      	adds	r7, #80	; 0x50
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000

08001d5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d62:	463b      	mov	r3, r7
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d6e:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <MX_ADC1_Init+0x144>)
 8001d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d74:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001d76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d82:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d88:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d8e:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001d9e:	4a41      	ldr	r2, [pc, #260]	; (8001ea4 <MX_ADC1_Init+0x148>)
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001da2:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001da8:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001daa:	2208      	movs	r2, #8
 8001dac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dae:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001db6:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dbc:	4837      	ldr	r0, [pc, #220]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001dbe:	f000 fddf 	bl	8002980 <HAL_ADC_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001dc8:	f000 fa7a 	bl	80022c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd8:	463b      	mov	r3, r7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	482f      	ldr	r0, [pc, #188]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001dde:	f001 f861 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001de8:	f000 fa6a 	bl	80022c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001dec:	2304      	movs	r3, #4
 8001dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001df0:	2303      	movs	r3, #3
 8001df2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df4:	463b      	mov	r3, r7
 8001df6:	4619      	mov	r1, r3
 8001df8:	4828      	ldr	r0, [pc, #160]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001dfa:	f001 f853 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001e04:	f000 fa5c 	bl	80022c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e10:	463b      	mov	r3, r7
 8001e12:	4619      	mov	r1, r3
 8001e14:	4821      	ldr	r0, [pc, #132]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001e16:	f001 f845 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001e20:	f000 fa4e 	bl	80022c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e24:	230b      	movs	r3, #11
 8001e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001e28:	2305      	movs	r3, #5
 8001e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4619      	mov	r1, r3
 8001e30:	481a      	ldr	r0, [pc, #104]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001e32:	f001 f837 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001e3c:	f000 fa40 	bl	80022c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e40:	230a      	movs	r3, #10
 8001e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001e44:	2306      	movs	r3, #6
 8001e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4813      	ldr	r0, [pc, #76]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001e4e:	f001 f829 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001e58:	f000 fa32 	bl	80022c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001e60:	2307      	movs	r3, #7
 8001e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e64:	463b      	mov	r3, r7
 8001e66:	4619      	mov	r1, r3
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001e6a:	f001 f81b 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001e74:	f000 fa24 	bl	80022c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001e78:	230d      	movs	r3, #13
 8001e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e80:	463b      	mov	r3, r7
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_ADC1_Init+0x140>)
 8001e86:	f001 f80d 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001e90:	f000 fa16 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	2000023c 	.word	0x2000023c
 8001ea0:	40012000 	.word	0x40012000
 8001ea4:	0f000001 	.word	0x0f000001

08001ea8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MX_I2C1_Init+0x50>)
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <MX_I2C1_Init+0x54>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <MX_I2C1_Init+0x50>)
 8001eb4:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <MX_I2C1_Init+0x58>)
 8001eb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MX_I2C1_Init+0x50>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <MX_I2C1_Init+0x50>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <MX_I2C1_Init+0x50>)
 8001ec6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <MX_I2C1_Init+0x50>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <MX_I2C1_Init+0x50>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <MX_I2C1_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <MX_I2C1_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ee4:	4804      	ldr	r0, [pc, #16]	; (8001ef8 <MX_I2C1_Init+0x50>)
 8001ee6:	f002 f979 	bl	80041dc <HAL_I2C_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ef0:	f000 f9e6 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000190 	.word	0x20000190
 8001efc:	40005400 	.word	0x40005400
 8001f00:	000186a0 	.word	0x000186a0

08001f04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	; 0x38
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	f107 0320 	add.w	r3, r7, #32
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f34:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <MX_TIM3_Init+0x124>)
 8001f36:	4a3d      	ldr	r2, [pc, #244]	; (800202c <MX_TIM3_Init+0x128>)
 8001f38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <MX_TIM3_Init+0x124>)
 8001f3c:	2263      	movs	r2, #99	; 0x63
 8001f3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b39      	ldr	r3, [pc, #228]	; (8002028 <MX_TIM3_Init+0x124>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 210;
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <MX_TIM3_Init+0x124>)
 8001f48:	22d2      	movs	r2, #210	; 0xd2
 8001f4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <MX_TIM3_Init+0x124>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <MX_TIM3_Init+0x124>)
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f58:	4833      	ldr	r0, [pc, #204]	; (8002028 <MX_TIM3_Init+0x124>)
 8001f5a:	f004 fbc9 	bl	80066f0 <HAL_TIM_Base_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001f64:	f000 f9ac 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f72:	4619      	mov	r1, r3
 8001f74:	482c      	ldr	r0, [pc, #176]	; (8002028 <MX_TIM3_Init+0x124>)
 8001f76:	f004 ff9b 	bl	8006eb0 <HAL_TIM_ConfigClockSource>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001f80:	f000 f99e 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f84:	4828      	ldr	r0, [pc, #160]	; (8002028 <MX_TIM3_Init+0x124>)
 8001f86:	f004 fcbf 	bl	8006908 <HAL_TIM_PWM_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001f90:	f000 f996 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4821      	ldr	r0, [pc, #132]	; (8002028 <MX_TIM3_Init+0x124>)
 8001fa4:	f005 fb40 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001fae:	f000 f987 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb2:	2360      	movs	r3, #96	; 0x60
 8001fb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4817      	ldr	r0, [pc, #92]	; (8002028 <MX_TIM3_Init+0x124>)
 8001fca:	f004 feaf 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001fd4:	f000 f974 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2204      	movs	r2, #4
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4812      	ldr	r0, [pc, #72]	; (8002028 <MX_TIM3_Init+0x124>)
 8001fe0:	f004 fea4 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001fea:	f000 f969 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <MX_TIM3_Init+0x124>)
 8001ff6:	f004 fe99 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8002000:	f000 f95e 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	220c      	movs	r2, #12
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM3_Init+0x124>)
 800200c:	f004 fe8e 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8002016:	f000 f953 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800201a:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM3_Init+0x124>)
 800201c:	f000 facc 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 8002020:	bf00      	nop
 8002022:	3738      	adds	r7, #56	; 0x38
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200001f0 	.word	0x200001f0
 800202c:	40000400 	.word	0x40000400

08002030 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	463b      	mov	r3, r7
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_TIM4_Init+0x94>)
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <MX_TIM4_Init+0x98>)
 8002050:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <MX_TIM4_Init+0x94>)
 8002054:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002058:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_TIM4_Init+0x94>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MX_TIM4_Init+0x94>)
 8002062:	222a      	movs	r2, #42	; 0x2a
 8002064:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <MX_TIM4_Init+0x94>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <MX_TIM4_Init+0x94>)
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002072:	4814      	ldr	r0, [pc, #80]	; (80020c4 <MX_TIM4_Init+0x94>)
 8002074:	f004 fb3c 	bl	80066f0 <HAL_TIM_Base_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800207e:	f000 f91f 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	4619      	mov	r1, r3
 800208e:	480d      	ldr	r0, [pc, #52]	; (80020c4 <MX_TIM4_Init+0x94>)
 8002090:	f004 ff0e 	bl	8006eb0 <HAL_TIM_ConfigClockSource>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800209a:	f000 f911 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020a6:	463b      	mov	r3, r7
 80020a8:	4619      	mov	r1, r3
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <MX_TIM4_Init+0x94>)
 80020ac:	f005 fabc 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80020b6:	f000 f903 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000148 	.word	0x20000148
 80020c8:	40000800 	.word	0x40000800

080020cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <MX_USART1_UART_Init+0x4c>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <MX_USART1_UART_Init+0x50>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <MX_USART1_UART_Init+0x4c>)
 80020d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <MX_USART1_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <MX_USART1_UART_Init+0x4c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <MX_USART1_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <MX_USART1_UART_Init+0x4c>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <MX_USART1_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <MX_USART1_UART_Init+0x4c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_USART1_UART_Init+0x4c>)
 8002104:	f005 fb12 	bl	800772c <HAL_UART_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800210e:	f000 f8d7 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000288 	.word	0x20000288
 800211c:	40011000 	.word	0x40011000

08002120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <MX_USART2_UART_Init+0x4c>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <MX_USART2_UART_Init+0x50>)
 8002128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <MX_USART2_UART_Init+0x4c>)
 800212c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <MX_USART2_UART_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_USART2_UART_Init+0x4c>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <MX_USART2_UART_Init+0x4c>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_USART2_UART_Init+0x4c>)
 8002146:	220c      	movs	r2, #12
 8002148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <MX_USART2_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_USART2_UART_Init+0x4c>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_USART2_UART_Init+0x4c>)
 8002158:	f005 fae8 	bl	800772c <HAL_UART_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002162:	f000 f8ad 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000734 	.word	0x20000734
 8002170:	40004400 	.word	0x40004400

08002174 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <MX_DMA_Init+0x3c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <MX_DMA_Init+0x3c>)
 8002184:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <MX_DMA_Init+0x3c>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2038      	movs	r0, #56	; 0x38
 800219c:	f001 fa07 	bl	80035ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021a0:	2038      	movs	r0, #56	; 0x38
 80021a2:	f001 fa20 	bl	80035e6 <HAL_NVIC_EnableIRQ>

}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800

080021b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <MX_GPIO_Init+0xfc>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a37      	ldr	r2, [pc, #220]	; (80022b0 <MX_GPIO_Init+0xfc>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <MX_GPIO_Init+0xfc>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <MX_GPIO_Init+0xfc>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a30      	ldr	r2, [pc, #192]	; (80022b0 <MX_GPIO_Init+0xfc>)
 80021f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <MX_GPIO_Init+0xfc>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <MX_GPIO_Init+0xfc>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <MX_GPIO_Init+0xfc>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <MX_GPIO_Init+0xfc>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <MX_GPIO_Init+0xfc>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <MX_GPIO_Init+0xfc>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <MX_GPIO_Init+0xfc>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	2120      	movs	r1, #32
 800223e:	481d      	ldr	r0, [pc, #116]	; (80022b4 <MX_GPIO_Init+0x100>)
 8002240:	f001 ff98 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800224a:	481b      	ldr	r0, [pc, #108]	; (80022b8 <MX_GPIO_Init+0x104>)
 800224c:	f001 ff92 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002256:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4815      	ldr	r0, [pc, #84]	; (80022bc <MX_GPIO_Init+0x108>)
 8002268:	f001 fde8 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800226c:	2320      	movs	r3, #32
 800226e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	2301      	movs	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <MX_GPIO_Init+0x100>)
 8002284:	f001 fdda 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800228c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	4805      	ldr	r0, [pc, #20]	; (80022b8 <MX_GPIO_Init+0x104>)
 80022a2:	f001 fdcb 	bl	8003e3c <HAL_GPIO_Init>

}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	; 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40020800 	.word	0x40020800

080022c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c4:	b672      	cpsid	i
}
 80022c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <Error_Handler+0x8>
	...

080022cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_MspInit+0x4c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <HAL_MspInit+0x4c>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_MspInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_MspInit+0x4c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_MspInit+0x4c>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_MspInit+0x4c>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800230a:	2007      	movs	r0, #7
 800230c:	f001 f944 	bl	8003598 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40023800 	.word	0x40023800

0800231c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a4d      	ldr	r2, [pc, #308]	; (8002470 <HAL_ADC_MspInit+0x154>)
 800233a:	4293      	cmp	r3, r2
 800233c:	f040 8093 	bne.w	8002466 <HAL_ADC_MspInit+0x14a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_ADC_MspInit+0x158>)
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_ADC_MspInit+0x158>)
 800234a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234e:	6453      	str	r3, [r2, #68]	; 0x44
 8002350:	4b48      	ldr	r3, [pc, #288]	; (8002474 <HAL_ADC_MspInit+0x158>)
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	4b44      	ldr	r3, [pc, #272]	; (8002474 <HAL_ADC_MspInit+0x158>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	4a43      	ldr	r2, [pc, #268]	; (8002474 <HAL_ADC_MspInit+0x158>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	6313      	str	r3, [r2, #48]	; 0x30
 800236c:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_ADC_MspInit+0x158>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_ADC_MspInit+0x158>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <HAL_ADC_MspInit+0x158>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6313      	str	r3, [r2, #48]	; 0x30
 8002388:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <HAL_ADC_MspInit+0x158>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_ADC_MspInit+0x158>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4a35      	ldr	r2, [pc, #212]	; (8002474 <HAL_ADC_MspInit+0x158>)
 800239e:	f043 0302 	orr.w	r3, r3, #2
 80023a2:	6313      	str	r3, [r2, #48]	; 0x30
 80023a4:	4b33      	ldr	r3, [pc, #204]	; (8002474 <HAL_ADC_MspInit+0x158>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80023b0:	230f      	movs	r3, #15
 80023b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b4:	2303      	movs	r3, #3
 80023b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	4619      	mov	r1, r3
 80023c2:	482d      	ldr	r0, [pc, #180]	; (8002478 <HAL_ADC_MspInit+0x15c>)
 80023c4:	f001 fd3a 	bl	8003e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80023c8:	2313      	movs	r3, #19
 80023ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023cc:	2303      	movs	r3, #3
 80023ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	4619      	mov	r1, r3
 80023da:	4828      	ldr	r0, [pc, #160]	; (800247c <HAL_ADC_MspInit+0x160>)
 80023dc:	f001 fd2e 	bl	8003e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023e0:	2301      	movs	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e4:	2303      	movs	r3, #3
 80023e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	4619      	mov	r1, r3
 80023f2:	4823      	ldr	r0, [pc, #140]	; (8002480 <HAL_ADC_MspInit+0x164>)
 80023f4:	f001 fd22 	bl	8003e3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80023f8:	4b22      	ldr	r3, [pc, #136]	; (8002484 <HAL_ADC_MspInit+0x168>)
 80023fa:	4a23      	ldr	r2, [pc, #140]	; (8002488 <HAL_ADC_MspInit+0x16c>)
 80023fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_ADC_MspInit+0x168>)
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <HAL_ADC_MspInit+0x168>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_ADC_MspInit+0x168>)
 800240c:	2200      	movs	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <HAL_ADC_MspInit+0x168>)
 8002412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002416:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_ADC_MspInit+0x168>)
 800241a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800241e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_ADC_MspInit+0x168>)
 8002422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002426:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_ADC_MspInit+0x168>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_ADC_MspInit+0x168>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_ADC_MspInit+0x168>)
 8002436:	2200      	movs	r2, #0
 8002438:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800243a:	4812      	ldr	r0, [pc, #72]	; (8002484 <HAL_ADC_MspInit+0x168>)
 800243c:	f001 f8ee 	bl	800361c <HAL_DMA_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8002446:	f7ff ff3b 	bl	80022c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <HAL_ADC_MspInit+0x168>)
 800244e:	639a      	str	r2, [r3, #56]	; 0x38
 8002450:	4a0c      	ldr	r2, [pc, #48]	; (8002484 <HAL_ADC_MspInit+0x168>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	2012      	movs	r0, #18
 800245c:	f001 f8a7 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002460:	2012      	movs	r0, #18
 8002462:	f001 f8c0 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002466:	bf00      	nop
 8002468:	3730      	adds	r7, #48	; 0x30
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40012000 	.word	0x40012000
 8002474:	40023800 	.word	0x40023800
 8002478:	40020800 	.word	0x40020800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	200003d0 	.word	0x200003d0
 8002488:	40026410 	.word	0x40026410

0800248c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a21      	ldr	r2, [pc, #132]	; (8002530 <HAL_I2C_MspInit+0xa4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d13c      	bne.n	8002528 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_I2C_MspInit+0xa8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <HAL_I2C_MspInit+0xa8>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_I2C_MspInit+0xa8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d0:	2312      	movs	r3, #18
 80024d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024dc:	2304      	movs	r3, #4
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	4814      	ldr	r0, [pc, #80]	; (8002538 <HAL_I2C_MspInit+0xac>)
 80024e8:	f001 fca8 	bl	8003e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_I2C_MspInit+0xa8>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <HAL_I2C_MspInit+0xa8>)
 80024f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024fa:	6413      	str	r3, [r2, #64]	; 0x40
 80024fc:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_I2C_MspInit+0xa8>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	201f      	movs	r0, #31
 800250e:	f001 f84e 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002512:	201f      	movs	r0, #31
 8002514:	f001 f867 	bl	80035e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	2020      	movs	r0, #32
 800251e:	f001 f846 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002522:	2020      	movs	r0, #32
 8002524:	f001 f85f 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002528:	bf00      	nop
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40005400 	.word	0x40005400
 8002534:	40023800 	.word	0x40023800
 8002538:	40020400 	.word	0x40020400

0800253c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_TIM_Base_MspInit+0x70>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10e      	bne.n	800256c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800256a:	e01a      	b.n	80025a2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <HAL_TIM_Base_MspInit+0x78>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d115      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	201e      	movs	r0, #30
 8002598:	f001 f809 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800259c:	201e      	movs	r0, #30
 800259e:	f001 f822 	bl	80035e6 <HAL_NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40000800 	.word	0x40000800

080025b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 030c 	add.w	r3, r7, #12
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a12      	ldr	r2, [pc, #72]	; (8002620 <HAL_TIM_MspPostInit+0x68>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d11e      	bne.n	8002618 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_TIM_MspPostInit+0x6c>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a10      	ldr	r2, [pc, #64]	; (8002624 <HAL_TIM_MspPostInit+0x6c>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_TIM_MspPostInit+0x6c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80025f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80025fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002608:	2302      	movs	r3, #2
 800260a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	4619      	mov	r1, r3
 8002612:	4805      	ldr	r0, [pc, #20]	; (8002628 <HAL_TIM_MspPostInit+0x70>)
 8002614:	f001 fc12 	bl	8003e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40000400 	.word	0x40000400
 8002624:	40023800 	.word	0x40023800
 8002628:	40020800 	.word	0x40020800

0800262c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_UART_MspInit+0x108>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d135      	bne.n	80026ba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a38      	ldr	r2, [pc, #224]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_UART_MspInit+0x10c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002686:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002698:	2307      	movs	r3, #7
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	4619      	mov	r1, r3
 80026a2:	4826      	ldr	r0, [pc, #152]	; (800273c <HAL_UART_MspInit+0x110>)
 80026a4:	f001 fbca 	bl	8003e3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	2025      	movs	r0, #37	; 0x25
 80026ae:	f000 ff7e 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026b2:	2025      	movs	r0, #37	; 0x25
 80026b4:	f000 ff97 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026b8:	e038      	b.n	800272c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_UART_MspInit+0x114>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d133      	bne.n	800272c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4a13      	ldr	r2, [pc, #76]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6313      	str	r3, [r2, #48]	; 0x30
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026fc:	230c      	movs	r3, #12
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800270c:	2307      	movs	r3, #7
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	4619      	mov	r1, r3
 8002716:	4809      	ldr	r0, [pc, #36]	; (800273c <HAL_UART_MspInit+0x110>)
 8002718:	f001 fb90 	bl	8003e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2100      	movs	r1, #0
 8002720:	2026      	movs	r0, #38	; 0x26
 8002722:	f000 ff44 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002726:	2026      	movs	r0, #38	; 0x26
 8002728:	f000 ff5d 	bl	80035e6 <HAL_NVIC_EnableIRQ>
}
 800272c:	bf00      	nop
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40011000 	.word	0x40011000
 8002738:	40023800 	.word	0x40023800
 800273c:	40020000 	.word	0x40020000
 8002740:	40004400 	.word	0x40004400

08002744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <NMI_Handler+0x4>

0800274a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <HardFault_Handler+0x4>

08002750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <MemManage_Handler+0x4>

08002756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <BusFault_Handler+0x4>

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <UsageFault_Handler+0x4>

08002762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002790:	f000 f8d6 	bl	8002940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}

08002798 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <ADC_IRQHandler+0x10>)
 800279e:	f000 f932 	bl	8002a06 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000023c 	.word	0x2000023c

080027ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <TIM4_IRQHandler+0x10>)
 80027b2:	f004 f9b3 	bl	8006b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000148 	.word	0x20000148

080027c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <I2C1_EV_IRQHandler+0x10>)
 80027c6:	f001 fe4d 	bl	8004464 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000190 	.word	0x20000190

080027d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <I2C1_ER_IRQHandler+0x10>)
 80027da:	f001 ffb4 	bl	8004746 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000190 	.word	0x20000190

080027e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <USART1_IRQHandler+0x10>)
 80027ee:	f005 f8cd 	bl	800798c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000288 	.word	0x20000288

080027fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <USART2_IRQHandler+0x10>)
 8002802:	f005 f8c3 	bl	800798c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000734 	.word	0x20000734

08002810 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <DMA2_Stream0_IRQHandler+0x10>)
 8002816:	f001 f899 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200003d0 	.word	0x200003d0

08002824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <SystemInit+0x20>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <SystemInit+0x20>)
 8002830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002880 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800284c:	480d      	ldr	r0, [pc, #52]	; (8002884 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800284e:	490e      	ldr	r1, [pc, #56]	; (8002888 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002854:	e002      	b.n	800285c <LoopCopyDataInit>

08002856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285a:	3304      	adds	r3, #4

0800285c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800285c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002860:	d3f9      	bcc.n	8002856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002862:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002864:	4c0b      	ldr	r4, [pc, #44]	; (8002894 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002868:	e001      	b.n	800286e <LoopFillZerobss>

0800286a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800286c:	3204      	adds	r2, #4

0800286e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002870:	d3fb      	bcc.n	800286a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002872:	f7ff ffd7 	bl	8002824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002876:	f005 fef5 	bl	8008664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287a:	f7ff f8db 	bl	8001a34 <main>
  bx  lr    
 800287e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002880:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002888:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800288c:	08008910 	.word	0x08008910
  ldr r2, =_sbss
 8002890:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002894:	20000798 	.word	0x20000798

08002898 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002898:	e7fe      	b.n	8002898 <DMA1_Stream0_IRQHandler>
	...

0800289c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_Init+0x40>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <HAL_Init+0x40>)
 80028a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_Init+0x40>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_Init+0x40>)
 80028b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_Init+0x40>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a07      	ldr	r2, [pc, #28]	; (80028dc <HAL_Init+0x40>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c4:	2003      	movs	r0, #3
 80028c6:	f000 fe67 	bl	8003598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f000 f808 	bl	80028e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d0:	f7ff fcfc 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023c00 	.word	0x40023c00

080028e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_InitTick+0x54>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_InitTick+0x58>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fe7f 	bl	8003602 <HAL_SYSTICK_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e00e      	b.n	800292c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b0f      	cmp	r3, #15
 8002912:	d80a      	bhi.n	800292a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002914:	2200      	movs	r2, #0
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	f000 fe47 	bl	80035ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002920:	4a06      	ldr	r2, [pc, #24]	; (800293c <HAL_InitTick+0x5c>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000004 	.word	0x20000004
 8002938:	2000000c 	.word	0x2000000c
 800293c:	20000008 	.word	0x20000008

08002940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_IncTick+0x20>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_IncTick+0x24>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4413      	add	r3, r2
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_IncTick+0x24>)
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	2000000c 	.word	0x2000000c
 8002964:	20000794 	.word	0x20000794

08002968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return uwTick;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_GetTick+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000794 	.word	0x20000794

08002980 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e033      	b.n	80029fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff fcbc 	bl	800231c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d118      	bne.n	80029f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029c6:	f023 0302 	bic.w	r3, r3, #2
 80029ca:	f043 0202 	orr.w	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fb88 	bl	80030e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f023 0303 	bic.w	r3, r3, #3
 80029e6:	f043 0201 	orr.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
 80029ee:	e001      	b.n	80029f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	bf0c      	ite	eq
 8002a3a:	2301      	moveq	r3, #1
 8002a3c:	2300      	movne	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d049      	beq.n	8002adc <HAL_ADC_IRQHandler+0xd6>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d046      	beq.n	8002adc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d12b      	bne.n	8002acc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d127      	bne.n	8002acc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d119      	bne.n	8002acc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0220 	bic.w	r2, r2, #32
 8002aa6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7fd fcfd 	bl	80004cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0212 	mvn.w	r2, #18
 8002ada:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	bf0c      	ite	eq
 8002aea:	2301      	moveq	r3, #1
 8002aec:	2300      	movne	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b80      	cmp	r3, #128	; 0x80
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d057      	beq.n	8002bbe <HAL_ADC_IRQHandler+0x1b8>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d054      	beq.n	8002bbe <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d139      	bne.n	8002bae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d12b      	bne.n	8002bae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d124      	bne.n	8002bae <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11d      	bne.n	8002bae <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d119      	bne.n	8002bae <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b88:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0201 	orr.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fc18 	bl	80033e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 020c 	mvn.w	r2, #12
 8002bbc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d017      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x21a>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d014      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10d      	bne.n	8002c20 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f933 	bl	8002e7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0201 	mvn.w	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_ADC_IRQHandler+0x27a>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d012      	beq.n	8002c80 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f043 0202 	orr.w	r2, r3, #2
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0220 	mvn.w	r2, #32
 8002c6e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f90d 	bl	8002e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f06f 0220 	mvn.w	r2, #32
 8002c7e:	601a      	str	r2, [r3, #0]
  }
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_Start_DMA+0x1e>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e0ce      	b.n	8002e44 <HAL_ADC_Start_DMA+0x1bc>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d018      	beq.n	8002cee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ccc:	4b5f      	ldr	r3, [pc, #380]	; (8002e4c <HAL_ADC_Start_DMA+0x1c4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a5f      	ldr	r2, [pc, #380]	; (8002e50 <HAL_ADC_Start_DMA+0x1c8>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0c9a      	lsrs	r2, r3, #18
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ce0:	e002      	b.n	8002ce8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f9      	bne.n	8002ce2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfc:	d107      	bne.n	8002d0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	f040 8086 	bne.w	8002e2a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5c:	d106      	bne.n	8002d6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f023 0206 	bic.w	r2, r3, #6
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
 8002d6a:	e002      	b.n	8002d72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_ADC_Start_DMA+0x1cc>)
 8002d7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	4a35      	ldr	r2, [pc, #212]	; (8002e58 <HAL_ADC_Start_DMA+0x1d0>)
 8002d84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	4a34      	ldr	r2, [pc, #208]	; (8002e5c <HAL_ADC_Start_DMA+0x1d4>)
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	4a33      	ldr	r2, [pc, #204]	; (8002e60 <HAL_ADC_Start_DMA+0x1d8>)
 8002d94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002dae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dbe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	334c      	adds	r3, #76	; 0x4c
 8002dca:	4619      	mov	r1, r3
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f000 fcd2 	bl	8003778 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10f      	bne.n	8002e00 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d129      	bne.n	8002e42 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	e020      	b.n	8002e42 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <HAL_ADC_Start_DMA+0x1dc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d11b      	bne.n	8002e42 <HAL_ADC_Start_DMA+0x1ba>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d114      	bne.n	8002e42 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	e00b      	b.n	8002e42 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0210 	orr.w	r2, r3, #16
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000004 	.word	0x20000004
 8002e50:	431bde83 	.word	0x431bde83
 8002e54:	40012300 	.word	0x40012300
 8002e58:	080032e1 	.word	0x080032e1
 8002e5c:	0800339b 	.word	0x0800339b
 8002e60:	080033b7 	.word	0x080033b7
 8002e64:	40012000 	.word	0x40012000

08002e68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e105      	b.n	80030cc <HAL_ADC_ConfigChannel+0x228>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	d925      	bls.n	8002f1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68d9      	ldr	r1, [r3, #12]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3b1e      	subs	r3, #30
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43da      	mvns	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68d9      	ldr	r1, [r3, #12]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	4603      	mov	r3, r0
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4403      	add	r3, r0
 8002f0e:	3b1e      	subs	r3, #30
 8002f10:	409a      	lsls	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	e022      	b.n	8002f62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6919      	ldr	r1, [r3, #16]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	2207      	movs	r2, #7
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6919      	ldr	r1, [r3, #16]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	4618      	mov	r0, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4403      	add	r3, r0
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d824      	bhi.n	8002fb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b05      	subs	r3, #5
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	400a      	ands	r2, r1
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b05      	subs	r3, #5
 8002fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb2:	e04c      	b.n	800304e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d824      	bhi.n	8003006 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b23      	subs	r3, #35	; 0x23
 8002fce:	221f      	movs	r2, #31
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	400a      	ands	r2, r1
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b23      	subs	r3, #35	; 0x23
 8002ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
 8003004:	e023      	b.n	800304e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b41      	subs	r3, #65	; 0x41
 8003018:	221f      	movs	r2, #31
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	400a      	ands	r2, r1
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b41      	subs	r3, #65	; 0x41
 8003042:	fa00 f203 	lsl.w	r2, r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800304e:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <HAL_ADC_ConfigChannel+0x234>)
 8003050:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a21      	ldr	r2, [pc, #132]	; (80030dc <HAL_ADC_ConfigChannel+0x238>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d109      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x1cc>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b12      	cmp	r3, #18
 8003062:	d105      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a19      	ldr	r2, [pc, #100]	; (80030dc <HAL_ADC_ConfigChannel+0x238>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d123      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x21e>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b10      	cmp	r3, #16
 8003080:	d003      	beq.n	800308a <HAL_ADC_ConfigChannel+0x1e6>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b11      	cmp	r3, #17
 8003088:	d11b      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b10      	cmp	r3, #16
 800309c:	d111      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <HAL_ADC_ConfigChannel+0x23c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_ADC_ConfigChannel+0x240>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	0c9a      	lsrs	r2, r3, #18
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030b4:	e002      	b.n	80030bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f9      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40012300 	.word	0x40012300
 80030dc:	40012000 	.word	0x40012000
 80030e0:	20000004 	.word	0x20000004
 80030e4:	431bde83 	.word	0x431bde83

080030e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f0:	4b79      	ldr	r3, [pc, #484]	; (80032d8 <ADC_Init+0x1f0>)
 80030f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800311c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	021a      	lsls	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	4a58      	ldr	r2, [pc, #352]	; (80032dc <ADC_Init+0x1f4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800318e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6899      	ldr	r1, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	e00f      	b.n	80031e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0202 	bic.w	r2, r2, #2
 80031f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7e1b      	ldrb	r3, [r3, #24]
 8003200:	005a      	lsls	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01b      	beq.n	800324c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003222:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003232:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	3b01      	subs	r3, #1
 8003240:	035a      	lsls	r2, r3, #13
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	e007      	b.n	800325c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	3b01      	subs	r3, #1
 8003278:	051a      	lsls	r2, r3, #20
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800329e:	025a      	lsls	r2, r3, #9
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	029a      	lsls	r2, r3, #10
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40012300 	.word	0x40012300
 80032dc:	0f000001 	.word	0x0f000001

080032e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d13c      	bne.n	8003374 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d12b      	bne.n	800336c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003318:	2b00      	cmp	r3, #0
 800331a:	d127      	bne.n	800336c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003334:	2b00      	cmp	r3, #0
 8003336:	d119      	bne.n	800336c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0220 	bic.w	r2, r2, #32
 8003346:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7fd f8ad 	bl	80004cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003372:	e00e      	b.n	8003392 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fd85 	bl	8002e90 <HAL_ADC_ErrorCallback>
}
 8003386:	e004      	b.n	8003392 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f7ff fd5d 	bl	8002e68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2240      	movs	r2, #64	; 0x40
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f043 0204 	orr.w	r2, r3, #4
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff fd5a 	bl	8002e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342a:	4a04      	ldr	r2, [pc, #16]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	60d3      	str	r3, [r2, #12]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <__NVIC_GetPriorityGrouping+0x18>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	f003 0307 	and.w	r3, r3, #7
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	db0b      	blt.n	8003486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4907      	ldr	r1, [pc, #28]	; (8003494 <__NVIC_EnableIRQ+0x38>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000e100 	.word	0xe000e100

08003498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	db0a      	blt.n	80034c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	490c      	ldr	r1, [pc, #48]	; (80034e4 <__NVIC_SetPriority+0x4c>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	0112      	lsls	r2, r2, #4
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	440b      	add	r3, r1
 80034bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c0:	e00a      	b.n	80034d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4908      	ldr	r1, [pc, #32]	; (80034e8 <__NVIC_SetPriority+0x50>)
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	3b04      	subs	r3, #4
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	440b      	add	r3, r1
 80034d6:	761a      	strb	r2, [r3, #24]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000e100 	.word	0xe000e100
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f1c3 0307 	rsb	r3, r3, #7
 8003506:	2b04      	cmp	r3, #4
 8003508:	bf28      	it	cs
 800350a:	2304      	movcs	r3, #4
 800350c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3304      	adds	r3, #4
 8003512:	2b06      	cmp	r3, #6
 8003514:	d902      	bls.n	800351c <NVIC_EncodePriority+0x30>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3b03      	subs	r3, #3
 800351a:	e000      	b.n	800351e <NVIC_EncodePriority+0x32>
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003520:	f04f 32ff 	mov.w	r2, #4294967295
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	401a      	ands	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003534:	f04f 31ff 	mov.w	r1, #4294967295
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	43d9      	mvns	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	4313      	orrs	r3, r2
         );
}
 8003546:	4618      	mov	r0, r3
 8003548:	3724      	adds	r7, #36	; 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003564:	d301      	bcc.n	800356a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003566:	2301      	movs	r3, #1
 8003568:	e00f      	b.n	800358a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <SysTick_Config+0x40>)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003572:	210f      	movs	r1, #15
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	f7ff ff8e 	bl	8003498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <SysTick_Config+0x40>)
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003582:	4b04      	ldr	r3, [pc, #16]	; (8003594 <SysTick_Config+0x40>)
 8003584:	2207      	movs	r2, #7
 8003586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	e000e010 	.word	0xe000e010

08003598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ff29 	bl	80033f8 <__NVIC_SetPriorityGrouping>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035c0:	f7ff ff3e 	bl	8003440 <__NVIC_GetPriorityGrouping>
 80035c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff ff8e 	bl	80034ec <NVIC_EncodePriority>
 80035d0:	4602      	mov	r2, r0
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff5d 	bl	8003498 <__NVIC_SetPriority>
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff31 	bl	800345c <__NVIC_EnableIRQ>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffa2 	bl	8003554 <SysTick_Config>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff f99e 	bl	8002968 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e099      	b.n	800376c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003658:	e00f      	b.n	800367a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800365a:	f7ff f985 	bl	8002968 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b05      	cmp	r3, #5
 8003666:	d908      	bls.n	800367a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2203      	movs	r2, #3
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e078      	b.n	800376c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e8      	bne.n	800365a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_DMA_Init+0x158>)
 8003694:	4013      	ands	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d107      	bne.n	80036e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4313      	orrs	r3, r2
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0307 	bic.w	r3, r3, #7
 80036fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b04      	cmp	r3, #4
 800370c:	d117      	bne.n	800373e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fb0f 	bl	8003d44 <DMA_CheckFifoParam>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2240      	movs	r2, #64	; 0x40
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800373a:	2301      	movs	r3, #1
 800373c:	e016      	b.n	800376c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fac6 	bl	8003cd8 <DMA_CalcBaseAndBitshift>
 800374c:	4603      	mov	r3, r0
 800374e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	223f      	movs	r2, #63	; 0x3f
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	f010803f 	.word	0xf010803f

08003778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_DMA_Start_IT+0x26>
 800379a:	2302      	movs	r3, #2
 800379c:	e040      	b.n	8003820 <HAL_DMA_Start_IT+0xa8>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d12f      	bne.n	8003812 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fa58 	bl	8003c7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	223f      	movs	r2, #63	; 0x3f
 80037d2:	409a      	lsls	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0216 	orr.w	r2, r2, #22
 80037e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0208 	orr.w	r2, r2, #8
 80037fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e005      	b.n	800381e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800381a:	2302      	movs	r3, #2
 800381c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003836:	f7ff f897 	bl	8002968 <HAL_GetTick>
 800383a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d008      	beq.n	800385a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e052      	b.n	8003900 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0216 	bic.w	r2, r2, #22
 8003868:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003878:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d103      	bne.n	800388a <HAL_DMA_Abort+0x62>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0208 	bic.w	r2, r2, #8
 8003898:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038aa:	e013      	b.n	80038d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ac:	f7ff f85c 	bl	8002968 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b05      	cmp	r3, #5
 80038b8:	d90c      	bls.n	80038d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2203      	movs	r2, #3
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e015      	b.n	8003900 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e4      	bne.n	80038ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e6:	223f      	movs	r2, #63	; 0x3f
 80038e8:	409a      	lsls	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d004      	beq.n	8003926 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2280      	movs	r2, #128	; 0x80
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e00c      	b.n	8003940 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2205      	movs	r2, #5
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003958:	4b92      	ldr	r3, [pc, #584]	; (8003ba4 <HAL_DMA_IRQHandler+0x258>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a92      	ldr	r2, [pc, #584]	; (8003ba8 <HAL_DMA_IRQHandler+0x25c>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0a9b      	lsrs	r3, r3, #10
 8003964:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	2208      	movs	r2, #8
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01a      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d013      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0204 	bic.w	r2, r2, #4
 800399e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	2208      	movs	r2, #8
 80039a6:	409a      	lsls	r2, r3
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f043 0201 	orr.w	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	2201      	movs	r2, #1
 80039be:	409a      	lsls	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d012      	beq.n	80039ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039da:	2201      	movs	r2, #1
 80039dc:	409a      	lsls	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f043 0202 	orr.w	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	2204      	movs	r2, #4
 80039f4:	409a      	lsls	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d012      	beq.n	8003a24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00b      	beq.n	8003a24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	2204      	movs	r2, #4
 8003a12:	409a      	lsls	r2, r3
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	f043 0204 	orr.w	r2, r3, #4
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	2210      	movs	r2, #16
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d043      	beq.n	8003abc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d03c      	beq.n	8003abc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	2210      	movs	r2, #16
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d108      	bne.n	8003a7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d024      	beq.n	8003abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
 8003a7a:	e01f      	b.n	8003abc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
 8003a8c:	e016      	b.n	8003abc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0208 	bic.w	r2, r2, #8
 8003aaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 808e 	beq.w	8003bea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8086 	beq.w	8003bea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d136      	bne.n	8003b64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0216 	bic.w	r2, r2, #22
 8003b04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x1da>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0208 	bic.w	r2, r2, #8
 8003b34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	223f      	movs	r2, #63	; 0x3f
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d07d      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
        }
        return;
 8003b62:	e078      	b.n	8003c56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01c      	beq.n	8003bac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d108      	bne.n	8003b92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d030      	beq.n	8003bea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
 8003b90:	e02b      	b.n	8003bea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d027      	beq.n	8003bea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
 8003ba2:	e022      	b.n	8003bea <HAL_DMA_IRQHandler+0x29e>
 8003ba4:	20000004 	.word	0x20000004
 8003ba8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0210 	bic.w	r2, r2, #16
 8003bc8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d032      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d022      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2205      	movs	r2, #5
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d307      	bcc.n	8003c32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f2      	bne.n	8003c16 <HAL_DMA_IRQHandler+0x2ca>
 8003c30:	e000      	b.n	8003c34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c32:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
 8003c54:	e000      	b.n	8003c58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c56:	bf00      	nop
    }
  }
}
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop

08003c60 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c6e:	b2db      	uxtb	r3, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	d108      	bne.n	8003cbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cba:	e007      	b.n	8003ccc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	3b10      	subs	r3, #16
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <DMA_CalcBaseAndBitshift+0x64>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cf2:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <DMA_CalcBaseAndBitshift+0x68>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d909      	bls.n	8003d1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	1d1a      	adds	r2, r3, #4
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	659a      	str	r2, [r3, #88]	; 0x58
 8003d18:	e007      	b.n	8003d2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	aaaaaaab 	.word	0xaaaaaaab
 8003d40:	080088f8 	.word	0x080088f8

08003d44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11f      	bne.n	8003d9e <DMA_CheckFifoParam+0x5a>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d856      	bhi.n	8003e12 <DMA_CheckFifoParam+0xce>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <DMA_CheckFifoParam+0x28>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d8f 	.word	0x08003d8f
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003e13 	.word	0x08003e13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d046      	beq.n	8003e16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8c:	e043      	b.n	8003e16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d96:	d140      	bne.n	8003e1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9c:	e03d      	b.n	8003e1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	d121      	bne.n	8003dec <DMA_CheckFifoParam+0xa8>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d837      	bhi.n	8003e1e <DMA_CheckFifoParam+0xda>
 8003dae:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <DMA_CheckFifoParam+0x70>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dcb 	.word	0x08003dcb
 8003dbc:	08003dc5 	.word	0x08003dc5
 8003dc0:	08003ddd 	.word	0x08003ddd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e030      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d025      	beq.n	8003e22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dda:	e022      	b.n	8003e22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003de4:	d11f      	bne.n	8003e26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dea:	e01c      	b.n	8003e26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d903      	bls.n	8003dfa <DMA_CheckFifoParam+0xb6>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d003      	beq.n	8003e00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003df8:	e018      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfe:	e015      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e00b      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      break;
 8003e12:	bf00      	nop
 8003e14:	e00a      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e16:	bf00      	nop
 8003e18:	e008      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e006      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e004      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e002      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop

08003e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	; 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e159      	b.n	800410c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e58:	2201      	movs	r2, #1
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	f040 8148 	bne.w	8004106 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d005      	beq.n	8003e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d130      	bne.n	8003ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	2203      	movs	r2, #3
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 0201 	and.w	r2, r3, #1
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d017      	beq.n	8003f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	2203      	movs	r2, #3
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d123      	bne.n	8003f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	08da      	lsrs	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3208      	adds	r2, #8
 8003f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	220f      	movs	r2, #15
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	08da      	lsrs	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3208      	adds	r2, #8
 8003f7a:	69b9      	ldr	r1, [r7, #24]
 8003f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0203 	and.w	r2, r3, #3
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a2 	beq.w	8004106 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	4b57      	ldr	r3, [pc, #348]	; (8004124 <HAL_GPIO_Init+0x2e8>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	4a56      	ldr	r2, [pc, #344]	; (8004124 <HAL_GPIO_Init+0x2e8>)
 8003fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd2:	4b54      	ldr	r3, [pc, #336]	; (8004124 <HAL_GPIO_Init+0x2e8>)
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fde:	4a52      	ldr	r2, [pc, #328]	; (8004128 <HAL_GPIO_Init+0x2ec>)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	089b      	lsrs	r3, r3, #2
 8003fe4:	3302      	adds	r3, #2
 8003fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	220f      	movs	r2, #15
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a49      	ldr	r2, [pc, #292]	; (800412c <HAL_GPIO_Init+0x2f0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d019      	beq.n	800403e <HAL_GPIO_Init+0x202>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a48      	ldr	r2, [pc, #288]	; (8004130 <HAL_GPIO_Init+0x2f4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_GPIO_Init+0x1fe>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a47      	ldr	r2, [pc, #284]	; (8004134 <HAL_GPIO_Init+0x2f8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00d      	beq.n	8004036 <HAL_GPIO_Init+0x1fa>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a46      	ldr	r2, [pc, #280]	; (8004138 <HAL_GPIO_Init+0x2fc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <HAL_GPIO_Init+0x1f6>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a45      	ldr	r2, [pc, #276]	; (800413c <HAL_GPIO_Init+0x300>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <HAL_GPIO_Init+0x1f2>
 800402a:	2304      	movs	r3, #4
 800402c:	e008      	b.n	8004040 <HAL_GPIO_Init+0x204>
 800402e:	2307      	movs	r3, #7
 8004030:	e006      	b.n	8004040 <HAL_GPIO_Init+0x204>
 8004032:	2303      	movs	r3, #3
 8004034:	e004      	b.n	8004040 <HAL_GPIO_Init+0x204>
 8004036:	2302      	movs	r3, #2
 8004038:	e002      	b.n	8004040 <HAL_GPIO_Init+0x204>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_GPIO_Init+0x204>
 800403e:	2300      	movs	r3, #0
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f002 0203 	and.w	r2, r2, #3
 8004046:	0092      	lsls	r2, r2, #2
 8004048:	4093      	lsls	r3, r2
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004050:	4935      	ldr	r1, [pc, #212]	; (8004128 <HAL_GPIO_Init+0x2ec>)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	3302      	adds	r3, #2
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800405e:	4b38      	ldr	r3, [pc, #224]	; (8004140 <HAL_GPIO_Init+0x304>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004082:	4a2f      	ldr	r2, [pc, #188]	; (8004140 <HAL_GPIO_Init+0x304>)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004088:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_GPIO_Init+0x304>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ac:	4a24      	ldr	r2, [pc, #144]	; (8004140 <HAL_GPIO_Init+0x304>)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040b2:	4b23      	ldr	r3, [pc, #140]	; (8004140 <HAL_GPIO_Init+0x304>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040d6:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <HAL_GPIO_Init+0x304>)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040dc:	4b18      	ldr	r3, [pc, #96]	; (8004140 <HAL_GPIO_Init+0x304>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004100:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <HAL_GPIO_Init+0x304>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3301      	adds	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b0f      	cmp	r3, #15
 8004110:	f67f aea2 	bls.w	8003e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	3724      	adds	r7, #36	; 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	40013800 	.word	0x40013800
 800412c:	40020000 	.word	0x40020000
 8004130:	40020400 	.word	0x40020400
 8004134:	40020800 	.word	0x40020800
 8004138:	40020c00 	.word	0x40020c00
 800413c:	40021000 	.word	0x40021000
 8004140:	40013c00 	.word	0x40013c00

08004144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	887b      	ldrh	r3, [r7, #2]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e001      	b.n	8004166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004184:	787b      	ldrb	r3, [r7, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004190:	e003      	b.n	800419a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	619a      	str	r2, [r3, #24]
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041b8:	887a      	ldrh	r2, [r7, #2]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4013      	ands	r3, r2
 80041be:	041a      	lsls	r2, r3, #16
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	43d9      	mvns	r1, r3
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	400b      	ands	r3, r1
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	619a      	str	r2, [r3, #24]
}
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e12b      	b.n	8004446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fe f942 	bl	800248c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	; 0x24
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800422e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800423e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004240:	f002 fa2e 	bl	80066a0 <HAL_RCC_GetPCLK1Freq>
 8004244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4a81      	ldr	r2, [pc, #516]	; (8004450 <HAL_I2C_Init+0x274>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d807      	bhi.n	8004260 <HAL_I2C_Init+0x84>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a80      	ldr	r2, [pc, #512]	; (8004454 <HAL_I2C_Init+0x278>)
 8004254:	4293      	cmp	r3, r2
 8004256:	bf94      	ite	ls
 8004258:	2301      	movls	r3, #1
 800425a:	2300      	movhi	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e006      	b.n	800426e <HAL_I2C_Init+0x92>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a7d      	ldr	r2, [pc, #500]	; (8004458 <HAL_I2C_Init+0x27c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	bf94      	ite	ls
 8004268:	2301      	movls	r3, #1
 800426a:	2300      	movhi	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0e7      	b.n	8004446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a78      	ldr	r2, [pc, #480]	; (800445c <HAL_I2C_Init+0x280>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	0c9b      	lsrs	r3, r3, #18
 8004280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4a6a      	ldr	r2, [pc, #424]	; (8004450 <HAL_I2C_Init+0x274>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d802      	bhi.n	80042b0 <HAL_I2C_Init+0xd4>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3301      	adds	r3, #1
 80042ae:	e009      	b.n	80042c4 <HAL_I2C_Init+0xe8>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	4a69      	ldr	r2, [pc, #420]	; (8004460 <HAL_I2C_Init+0x284>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	099b      	lsrs	r3, r3, #6
 80042c2:	3301      	adds	r3, #1
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	495c      	ldr	r1, [pc, #368]	; (8004450 <HAL_I2C_Init+0x274>)
 80042e0:	428b      	cmp	r3, r1
 80042e2:	d819      	bhi.n	8004318 <HAL_I2C_Init+0x13c>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1e59      	subs	r1, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80042f2:	1c59      	adds	r1, r3, #1
 80042f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042f8:	400b      	ands	r3, r1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_I2C_Init+0x138>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1e59      	subs	r1, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	fbb1 f3f3 	udiv	r3, r1, r3
 800430c:	3301      	adds	r3, #1
 800430e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004312:	e051      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004314:	2304      	movs	r3, #4
 8004316:	e04f      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d111      	bne.n	8004344 <HAL_I2C_Init+0x168>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1e58      	subs	r0, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6859      	ldr	r1, [r3, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	440b      	add	r3, r1
 800432e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004332:	3301      	adds	r3, #1
 8004334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e012      	b.n	800436a <HAL_I2C_Init+0x18e>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e58      	subs	r0, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	0099      	lsls	r1, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	fbb0 f3f3 	udiv	r3, r0, r3
 800435a:	3301      	adds	r3, #1
 800435c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_Init+0x196>
 800436e:	2301      	movs	r3, #1
 8004370:	e022      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10e      	bne.n	8004398 <HAL_I2C_Init+0x1bc>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1e58      	subs	r0, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6859      	ldr	r1, [r3, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	440b      	add	r3, r1
 8004388:	fbb0 f3f3 	udiv	r3, r0, r3
 800438c:	3301      	adds	r3, #1
 800438e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004396:	e00f      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1e58      	subs	r0, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	0099      	lsls	r1, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	6809      	ldr	r1, [r1, #0]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6911      	ldr	r1, [r2, #16]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	000186a0 	.word	0x000186a0
 8004454:	001e847f 	.word	0x001e847f
 8004458:	003d08ff 	.word	0x003d08ff
 800445c:	431bde83 	.word	0x431bde83
 8004460:	10624dd3 	.word	0x10624dd3

08004464 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004484:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b10      	cmp	r3, #16
 8004492:	d003      	beq.n	800449c <HAL_I2C_EV_IRQHandler+0x38>
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	f040 80c1 	bne.w	800461e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10d      	bne.n	80044d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044bc:	d003      	beq.n	80044c6 <HAL_I2C_EV_IRQHandler+0x62>
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044c4:	d101      	bne.n	80044ca <HAL_I2C_EV_IRQHandler+0x66>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <HAL_I2C_EV_IRQHandler+0x68>
 80044ca:	2300      	movs	r3, #0
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f000 8132 	beq.w	8004736 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00c      	beq.n	80044f6 <HAL_I2C_EV_IRQHandler+0x92>
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	0a5b      	lsrs	r3, r3, #9
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f001 fc71 	bl	8005dd0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fd79 	bl	8004fe6 <I2C_Master_SB>
 80044f4:	e092      	b.n	800461c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	08db      	lsrs	r3, r3, #3
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_I2C_EV_IRQHandler+0xb2>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	0a5b      	lsrs	r3, r3, #9
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fdef 	bl	80050f2 <I2C_Master_ADD10>
 8004514:	e082      	b.n	800461c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <HAL_I2C_EV_IRQHandler+0xd2>
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	0a5b      	lsrs	r3, r3, #9
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fe09 	bl	8005146 <I2C_Master_ADDR>
 8004534:	e072      	b.n	800461c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d03b      	beq.n	80045ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800454c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004550:	f000 80f3 	beq.w	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	09db      	lsrs	r3, r3, #7
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00f      	beq.n	8004580 <HAL_I2C_EV_IRQHandler+0x11c>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <HAL_I2C_EV_IRQHandler+0x11c>
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f9f3 	bl	8004964 <I2C_MasterTransmit_TXE>
 800457e:	e04d      	b.n	800461c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80d6 	beq.w	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	0a5b      	lsrs	r3, r3, #9
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80cf 	beq.w	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800459c:	7bbb      	ldrb	r3, [r7, #14]
 800459e:	2b21      	cmp	r3, #33	; 0x21
 80045a0:	d103      	bne.n	80045aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fa7a 	bl	8004a9c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a8:	e0c7      	b.n	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	f040 80c4 	bne.w	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fae8 	bl	8004b88 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b8:	e0bf      	b.n	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c8:	f000 80b7 	beq.w	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	099b      	lsrs	r3, r3, #6
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00f      	beq.n	80045f8 <HAL_I2C_EV_IRQHandler+0x194>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	0a9b      	lsrs	r3, r3, #10
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d009      	beq.n	80045f8 <HAL_I2C_EV_IRQHandler+0x194>
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d103      	bne.n	80045f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fb5d 	bl	8004cb0 <I2C_MasterReceive_RXNE>
 80045f6:	e011      	b.n	800461c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 809a 	beq.w	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	0a5b      	lsrs	r3, r3, #9
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8093 	beq.w	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fbfc 	bl	8004e12 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800461a:	e08e      	b.n	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
 800461c:	e08d      	b.n	800473a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	e007      	b.n	8004640 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d012      	beq.n	8004672 <HAL_I2C_EV_IRQHandler+0x20e>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	0a5b      	lsrs	r3, r3, #9
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00c      	beq.n	8004672 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004668:	69b9      	ldr	r1, [r7, #24]
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 ffba 	bl	80055e4 <I2C_Slave_ADDR>
 8004670:	e066      	b.n	8004740 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_I2C_EV_IRQHandler+0x22e>
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	0a5b      	lsrs	r3, r3, #9
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fff4 	bl	8005678 <I2C_Slave_STOPF>
 8004690:	e056      	b.n	8004740 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004692:	7bbb      	ldrb	r3, [r7, #14]
 8004694:	2b21      	cmp	r3, #33	; 0x21
 8004696:	d002      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x23a>
 8004698:	7bbb      	ldrb	r3, [r7, #14]
 800469a:	2b29      	cmp	r3, #41	; 0x29
 800469c:	d125      	bne.n	80046ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	09db      	lsrs	r3, r3, #7
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00f      	beq.n	80046ca <HAL_I2C_EV_IRQHandler+0x266>
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	0a9b      	lsrs	r3, r3, #10
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HAL_I2C_EV_IRQHandler+0x266>
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	089b      	lsrs	r3, r3, #2
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fed0 	bl	8005468 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046c8:	e039      	b.n	800473e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d033      	beq.n	800473e <HAL_I2C_EV_IRQHandler+0x2da>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	0a5b      	lsrs	r3, r3, #9
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d02d      	beq.n	800473e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fefd 	bl	80054e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046e8:	e029      	b.n	800473e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00f      	beq.n	8004716 <HAL_I2C_EV_IRQHandler+0x2b2>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	0a9b      	lsrs	r3, r3, #10
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	089b      	lsrs	r3, r3, #2
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 ff08 	bl	8005524 <I2C_SlaveReceive_RXNE>
 8004714:	e014      	b.n	8004740 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00e      	beq.n	8004740 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	0a5b      	lsrs	r3, r3, #9
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d008      	beq.n	8004740 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 ff36 	bl	80055a0 <I2C_SlaveReceive_BTF>
 8004734:	e004      	b.n	8004740 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800473e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b08a      	sub	sp, #40	; 0x28
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800475e:	2300      	movs	r3, #0
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004768:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00e      	beq.n	8004794 <HAL_I2C_ER_IRQHandler+0x4e>
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	0a1b      	lsrs	r3, r3, #8
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004792:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	0a5b      	lsrs	r3, r3, #9
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00e      	beq.n	80047be <HAL_I2C_ER_IRQHandler+0x78>
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	f043 0302 	orr.w	r3, r3, #2
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80047bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	0a9b      	lsrs	r3, r3, #10
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03f      	beq.n	800484a <HAL_I2C_ER_IRQHandler+0x104>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	0a1b      	lsrs	r3, r3, #8
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d039      	beq.n	800484a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80047d6:	7efb      	ldrb	r3, [r7, #27]
 80047d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047f0:	7ebb      	ldrb	r3, [r7, #26]
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d112      	bne.n	800481c <HAL_I2C_ER_IRQHandler+0xd6>
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10f      	bne.n	800481c <HAL_I2C_ER_IRQHandler+0xd6>
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	2b21      	cmp	r3, #33	; 0x21
 8004800:	d008      	beq.n	8004814 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004802:	7cfb      	ldrb	r3, [r7, #19]
 8004804:	2b29      	cmp	r3, #41	; 0x29
 8004806:	d005      	beq.n	8004814 <HAL_I2C_ER_IRQHandler+0xce>
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	2b28      	cmp	r3, #40	; 0x28
 800480c:	d106      	bne.n	800481c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b21      	cmp	r3, #33	; 0x21
 8004812:	d103      	bne.n	800481c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f001 f85f 	bl	80058d8 <I2C_Slave_AF>
 800481a:	e016      	b.n	800484a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004824:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800482e:	7efb      	ldrb	r3, [r7, #27]
 8004830:	2b10      	cmp	r3, #16
 8004832:	d002      	beq.n	800483a <HAL_I2C_ER_IRQHandler+0xf4>
 8004834:	7efb      	ldrb	r3, [r7, #27]
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d107      	bne.n	800484a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004848:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	0adb      	lsrs	r3, r3, #11
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00e      	beq.n	8004874 <HAL_I2C_ER_IRQHandler+0x12e>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	f043 0308 	orr.w	r3, r3, #8
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004872:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f001 f896 	bl	80059b8 <I2C_ITError>
  }
}
 800488c:	bf00      	nop
 800488e:	3728      	adds	r7, #40	; 0x28
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	70fb      	strb	r3, [r7, #3]
 80048f0:	4613      	mov	r3, r2
 80048f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004972:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800497a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d150      	bne.n	8004a2c <I2C_MasterTransmit_TXE+0xc8>
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	2b21      	cmp	r3, #33	; 0x21
 800498e:	d14d      	bne.n	8004a2c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b08      	cmp	r3, #8
 8004994:	d01d      	beq.n	80049d2 <I2C_MasterTransmit_TXE+0x6e>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b20      	cmp	r3, #32
 800499a:	d01a      	beq.n	80049d2 <I2C_MasterTransmit_TXE+0x6e>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049a2:	d016      	beq.n	80049d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2211      	movs	r2, #17
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff ff62 	bl	8004894 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049d0:	e060      	b.n	8004a94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d107      	bne.n	8004a1c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff7d 	bl	8004914 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a1a:	e03b      	b.n	8004a94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff ff35 	bl	8004894 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a2a:	e033      	b.n	8004a94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b21      	cmp	r3, #33	; 0x21
 8004a30:	d005      	beq.n	8004a3e <I2C_MasterTransmit_TXE+0xda>
 8004a32:	7bbb      	ldrb	r3, [r7, #14]
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d12d      	bne.n	8004a94 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b22      	cmp	r3, #34	; 0x22
 8004a3c:	d12a      	bne.n	8004a94 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d108      	bne.n	8004a5a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a56:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a58:	e01c      	b.n	8004a94 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d103      	bne.n	8004a6e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f88e 	bl	8004b88 <I2C_MemoryTransmit_TXE_BTF>
}
 8004a6c:	e012      	b.n	8004a94 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	781a      	ldrb	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a92:	e7ff      	b.n	8004a94 <I2C_MasterTransmit_TXE+0x130>
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b21      	cmp	r3, #33	; 0x21
 8004ab4:	d164      	bne.n	8004b80 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d012      	beq.n	8004ae6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004ae4:	e04c      	b.n	8004b80 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d01d      	beq.n	8004b28 <I2C_MasterTransmit_BTF+0x8c>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d01a      	beq.n	8004b28 <I2C_MasterTransmit_BTF+0x8c>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af8:	d016      	beq.n	8004b28 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b08:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2211      	movs	r2, #17
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff feb7 	bl	8004894 <HAL_I2C_MasterTxCpltCallback>
}
 8004b26:	e02b      	b.n	8004b80 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b36:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b46:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b40      	cmp	r3, #64	; 0x40
 8004b60:	d107      	bne.n	8004b72 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff fed2 	bl	8004914 <HAL_I2C_MemTxCpltCallback>
}
 8004b70:	e006      	b.n	8004b80 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff fe8a 	bl	8004894 <HAL_I2C_MasterTxCpltCallback>
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d11d      	bne.n	8004bdc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d10b      	bne.n	8004bc0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb8:	1c9a      	adds	r2, r3, #2
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004bbe:	e073      	b.n	8004ca8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	121b      	asrs	r3, r3, #8
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bda:	e065      	b.n	8004ca8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10b      	bne.n	8004bfc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bfa:	e055      	b.n	8004ca8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d151      	bne.n	8004ca8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	2b22      	cmp	r3, #34	; 0x22
 8004c08:	d10d      	bne.n	8004c26 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c18:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c24:	e040      	b.n	8004ca8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d015      	beq.n	8004c5c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b21      	cmp	r3, #33	; 0x21
 8004c34:	d112      	bne.n	8004c5c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c5a:	e025      	b.n	8004ca8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d120      	bne.n	8004ca8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	2b21      	cmp	r3, #33	; 0x21
 8004c6a:	d11d      	bne.n	8004ca8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c7a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fe36 	bl	8004914 <HAL_I2C_MemTxCpltCallback>
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b22      	cmp	r3, #34	; 0x22
 8004cc2:	f040 80a2 	bne.w	8004e0a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d921      	bls.n	8004d18 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	f040 8082 	bne.w	8004e0a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d14:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004d16:	e078      	b.n	8004e0a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d074      	beq.n	8004e0a <I2C_MasterReceive_RXNE+0x15a>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d002      	beq.n	8004d2c <I2C_MasterReceive_RXNE+0x7c>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d16e      	bne.n	8004e0a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f001 f81d 	bl	8005d6c <I2C_WaitOnSTOPRequestThroughIT>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d142      	bne.n	8004dbe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d46:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d56:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d10a      	bne.n	8004da8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff fdc1 	bl	8004928 <HAL_I2C_MemRxCpltCallback>
}
 8004da6:	e030      	b.n	8004e0a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2212      	movs	r2, #18
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff fd76 	bl	80048a8 <HAL_I2C_MasterRxCpltCallback>
}
 8004dbc:	e025      	b.n	8004e0a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dcc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff fd99 	bl	800493c <HAL_I2C_ErrorCallback>
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d11b      	bne.n	8004e62 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e60:	e0bd      	b.n	8004fde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d129      	bne.n	8004ec0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d00a      	beq.n	8004e98 <I2C_MasterReceive_BTF+0x86>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d007      	beq.n	8004e98 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e96:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ebe:	e08e      	b.n	8004fde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d176      	bne.n	8004fb8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d002      	beq.n	8004ed6 <I2C_MasterReceive_BTF+0xc4>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b10      	cmp	r3, #16
 8004ed4:	d108      	bne.n	8004ee8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e019      	b.n	8004f1c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d002      	beq.n	8004ef4 <I2C_MasterReceive_BTF+0xe2>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d108      	bne.n	8004f06 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e00a      	b.n	8004f1c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d007      	beq.n	8004f1c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f76:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d10a      	bne.n	8004fa2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fcc4 	bl	8004928 <HAL_I2C_MemRxCpltCallback>
}
 8004fa0:	e01d      	b.n	8004fde <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2212      	movs	r2, #18
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff fc79 	bl	80048a8 <HAL_I2C_MasterRxCpltCallback>
}
 8004fb6:	e012      	b.n	8004fde <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d117      	bne.n	800502a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	b2db      	uxtb	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005012:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005014:	e067      	b.n	80050e6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	b2db      	uxtb	r3, r3
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	b2da      	uxtb	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	611a      	str	r2, [r3, #16]
}
 8005028:	e05d      	b.n	80050e6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005032:	d133      	bne.n	800509c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b21      	cmp	r3, #33	; 0x21
 800503e:	d109      	bne.n	8005054 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005050:	611a      	str	r2, [r3, #16]
 8005052:	e008      	b.n	8005066 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	b2da      	uxtb	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <I2C_Master_SB+0x92>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d108      	bne.n	800508a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	2b00      	cmp	r3, #0
 800507e:	d032      	beq.n	80050e6 <I2C_Master_SB+0x100>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d02d      	beq.n	80050e6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005098:	605a      	str	r2, [r3, #4]
}
 800509a:	e024      	b.n	80050e6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10e      	bne.n	80050c2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	11db      	asrs	r3, r3, #7
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 0306 	and.w	r3, r3, #6
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f063 030f 	orn	r3, r3, #15
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]
}
 80050c0:	e011      	b.n	80050e6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d10d      	bne.n	80050e6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	11db      	asrs	r3, r3, #7
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0306 	and.w	r3, r3, #6
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f063 030e 	orn	r3, r3, #14
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	611a      	str	r2, [r3, #16]
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <I2C_Master_ADD10+0x26>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d108      	bne.n	800512a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00c      	beq.n	800513a <I2C_Master_ADD10+0x48>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005138:	605a      	str	r2, [r3, #4]
  }
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005146:	b480      	push	{r7}
 8005148:	b091      	sub	sp, #68	; 0x44
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005154:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b22      	cmp	r3, #34	; 0x22
 800516e:	f040 8169 	bne.w	8005444 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10f      	bne.n	800519a <I2C_Master_ADDR+0x54>
 800517a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d10b      	bne.n	800519a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005182:	2300      	movs	r3, #0
 8005184:	633b      	str	r3, [r7, #48]	; 0x30
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	633b      	str	r3, [r7, #48]	; 0x30
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	633b      	str	r3, [r7, #48]	; 0x30
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	e160      	b.n	800545c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11d      	bne.n	80051de <I2C_Master_ADDR+0x98>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051aa:	d118      	bne.n	80051de <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ac:	2300      	movs	r3, #0
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	651a      	str	r2, [r3, #80]	; 0x50
 80051dc:	e13e      	b.n	800545c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d113      	bne.n	8005210 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e8:	2300      	movs	r3, #0
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e115      	b.n	800543c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b01      	cmp	r3, #1
 8005218:	f040 808a 	bne.w	8005330 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005222:	d137      	bne.n	8005294 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005232:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005242:	d113      	bne.n	800526c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005252:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005254:	2300      	movs	r3, #0
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	e0e7      	b.n	800543c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526c:	2300      	movs	r3, #0
 800526e:	623b      	str	r3, [r7, #32]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	623b      	str	r3, [r7, #32]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	623b      	str	r3, [r7, #32]
 8005280:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e0d3      	b.n	800543c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	2b08      	cmp	r3, #8
 8005298:	d02e      	beq.n	80052f8 <I2C_Master_ADDR+0x1b2>
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	2b20      	cmp	r3, #32
 800529e:	d02b      	beq.n	80052f8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	2b12      	cmp	r3, #18
 80052a4:	d102      	bne.n	80052ac <I2C_Master_ADDR+0x166>
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d125      	bne.n	80052f8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d00e      	beq.n	80052d0 <I2C_Master_ADDR+0x18a>
 80052b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d00b      	beq.n	80052d0 <I2C_Master_ADDR+0x18a>
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2b10      	cmp	r3, #16
 80052bc:	d008      	beq.n	80052d0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e007      	b.n	80052e0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052de:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	e0a1      	b.n	800543c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005306:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005308:	2300      	movs	r3, #0
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e085      	b.n	800543c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d14d      	bne.n	80053d6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2b04      	cmp	r3, #4
 800533e:	d016      	beq.n	800536e <I2C_Master_ADDR+0x228>
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	2b02      	cmp	r3, #2
 8005344:	d013      	beq.n	800536e <I2C_Master_ADDR+0x228>
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	2b10      	cmp	r3, #16
 800534a:	d010      	beq.n	800536e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e007      	b.n	800537e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800537c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800538c:	d117      	bne.n	80053be <I2C_Master_ADDR+0x278>
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005394:	d00b      	beq.n	80053ae <I2C_Master_ADDR+0x268>
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	2b01      	cmp	r3, #1
 800539a:	d008      	beq.n	80053ae <I2C_Master_ADDR+0x268>
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d005      	beq.n	80053ae <I2C_Master_ADDR+0x268>
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d002      	beq.n	80053ae <I2C_Master_ADDR+0x268>
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d107      	bne.n	80053be <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	e032      	b.n	800543c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f4:	d117      	bne.n	8005426 <I2C_Master_ADDR+0x2e0>
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053fc:	d00b      	beq.n	8005416 <I2C_Master_ADDR+0x2d0>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	2b01      	cmp	r3, #1
 8005402:	d008      	beq.n	8005416 <I2C_Master_ADDR+0x2d0>
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	2b08      	cmp	r3, #8
 8005408:	d005      	beq.n	8005416 <I2C_Master_ADDR+0x2d0>
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	2b10      	cmp	r3, #16
 800540e:	d002      	beq.n	8005416 <I2C_Master_ADDR+0x2d0>
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	2b20      	cmp	r3, #32
 8005414:	d107      	bne.n	8005426 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005424:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005442:	e00b      	b.n	800545c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
}
 800545a:	e7ff      	b.n	800545c <I2C_Master_ADDR+0x316>
 800545c:	bf00      	nop
 800545e:	3744      	adds	r7, #68	; 0x44
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005476:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d02b      	beq.n	80054da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	781a      	ldrb	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d114      	bne.n	80054da <I2C_SlaveTransmit_TXE+0x72>
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	2b29      	cmp	r3, #41	; 0x29
 80054b4:	d111      	bne.n	80054da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2221      	movs	r2, #33	; 0x21
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2228      	movs	r2, #40	; 0x28
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff f9f1 	bl	80048bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d011      	beq.n	8005518 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005532:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d02c      	beq.n	8005598 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d114      	bne.n	8005598 <I2C_SlaveReceive_RXNE+0x74>
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b2a      	cmp	r3, #42	; 0x2a
 8005572:	d111      	bne.n	8005598 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005582:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2222      	movs	r2, #34	; 0x22
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2228      	movs	r2, #40	; 0x28
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff f99c 	bl	80048d0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d012      	beq.n	80055d8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055fe:	2b28      	cmp	r3, #40	; 0x28
 8005600:	d127      	bne.n	8005652 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005610:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	089b      	lsrs	r3, r3, #2
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800561e:	2301      	movs	r3, #1
 8005620:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	09db      	lsrs	r3, r3, #7
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	81bb      	strh	r3, [r7, #12]
 8005634:	e002      	b.n	800563c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005644:	89ba      	ldrh	r2, [r7, #12]
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff f94a 	bl	80048e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005650:	e00e      	b.n	8005670 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005686:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005696:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005698:	2300      	movs	r3, #0
 800569a:	60bb      	str	r3, [r7, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	60bb      	str	r3, [r7, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d4:	d172      	bne.n	80057bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b22      	cmp	r3, #34	; 0x22
 80056da:	d002      	beq.n	80056e2 <I2C_Slave_STOPF+0x6a>
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b2a      	cmp	r3, #42	; 0x2a
 80056e0:	d135      	bne.n	800574e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f043 0204 	orr.w	r2, r3, #4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005714:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe faa0 	bl	8003c60 <HAL_DMA_GetState>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d049      	beq.n	80057ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	4a69      	ldr	r2, [pc, #420]	; (80058d0 <I2C_Slave_STOPF+0x258>)
 800572c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe f8e8 	bl	8003908 <HAL_DMA_Abort_IT>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d03d      	beq.n	80057ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800574c:	e035      	b.n	80057ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	b29a      	uxth	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f043 0204 	orr.w	r2, r3, #4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005780:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fa6a 	bl	8003c60 <HAL_DMA_GetState>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	d014      	beq.n	80057bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005796:	4a4e      	ldr	r2, [pc, #312]	; (80058d0 <I2C_Slave_STOPF+0x258>)
 8005798:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe f8b2 	bl	8003908 <HAL_DMA_Abort_IT>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
 80057b8:	e000      	b.n	80057bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d03e      	beq.n	8005844 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d112      	bne.n	80057fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b40      	cmp	r3, #64	; 0x40
 8005806:	d112      	bne.n	800582e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	f043 0204 	orr.w	r2, r3, #4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f8b3 	bl	80059b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005852:	e039      	b.n	80058c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b2a      	cmp	r3, #42	; 0x2a
 8005858:	d109      	bne.n	800586e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2228      	movs	r2, #40	; 0x28
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff f831 	bl	80048d0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b28      	cmp	r3, #40	; 0x28
 8005878:	d111      	bne.n	800589e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <I2C_Slave_STOPF+0x25c>)
 800587e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff f832 	bl	8004900 <HAL_I2C_ListenCpltCallback>
}
 800589c:	e014      	b.n	80058c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	2b22      	cmp	r3, #34	; 0x22
 80058a4:	d002      	beq.n	80058ac <I2C_Slave_STOPF+0x234>
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b22      	cmp	r3, #34	; 0x22
 80058aa:	d10d      	bne.n	80058c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff f804 	bl	80048d0 <HAL_I2C_SlaveRxCpltCallback>
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	08005c1d 	.word	0x08005c1d
 80058d4:	ffff0000 	.word	0xffff0000

080058d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d002      	beq.n	80058fa <I2C_Slave_AF+0x22>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d129      	bne.n	800594e <I2C_Slave_AF+0x76>
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	2b28      	cmp	r3, #40	; 0x28
 80058fe:	d126      	bne.n	800594e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a2c      	ldr	r2, [pc, #176]	; (80059b4 <I2C_Slave_AF+0xdc>)
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005914:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800591e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fe ffda 	bl	8004900 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800594c:	e02e      	b.n	80059ac <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b21      	cmp	r3, #33	; 0x21
 8005952:	d126      	bne.n	80059a2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <I2C_Slave_AF+0xdc>)
 8005958:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2221      	movs	r2, #33	; 0x21
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800597e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005988:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005998:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fe ff8e 	bl	80048bc <HAL_I2C_SlaveTxCpltCallback>
}
 80059a0:	e004      	b.n	80059ac <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059aa:	615a      	str	r2, [r3, #20]
}
 80059ac:	bf00      	nop
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	ffff0000 	.word	0xffff0000

080059b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d002      	beq.n	80059dc <I2C_ITError+0x24>
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d10a      	bne.n	80059f2 <I2C_ITError+0x3a>
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b22      	cmp	r3, #34	; 0x22
 80059e0:	d107      	bne.n	80059f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059f8:	2b28      	cmp	r3, #40	; 0x28
 80059fa:	d107      	bne.n	8005a0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2228      	movs	r2, #40	; 0x28
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a0a:	e015      	b.n	8005a38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1a:	d00a      	beq.n	8005a32 <I2C_ITError+0x7a>
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b60      	cmp	r3, #96	; 0x60
 8005a20:	d007      	beq.n	8005a32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a46:	d162      	bne.n	8005b0e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d020      	beq.n	8005aa8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6a:	4a6a      	ldr	r2, [pc, #424]	; (8005c14 <I2C_ITError+0x25c>)
 8005a6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fd ff48 	bl	8003908 <HAL_DMA_Abort_IT>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8089 	beq.w	8005b92 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4798      	blx	r3
 8005aa6:	e074      	b.n	8005b92 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	4a59      	ldr	r2, [pc, #356]	; (8005c14 <I2C_ITError+0x25c>)
 8005aae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fd ff27 	bl	8003908 <HAL_DMA_Abort_IT>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d068      	beq.n	8005b92 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d10b      	bne.n	8005ae6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4798      	blx	r3
 8005b0c:	e041      	b.n	8005b92 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b60      	cmp	r3, #96	; 0x60
 8005b18:	d125      	bne.n	8005b66 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d10b      	bne.n	8005b4e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fe fef6 	bl	8004950 <HAL_I2C_AbortCpltCallback>
 8005b64:	e015      	b.n	8005b92 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	d10b      	bne.n	8005b8c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fe fed5 	bl	800493c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10e      	bne.n	8005bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d109      	bne.n	8005bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d113      	bne.n	8005c0c <I2C_ITError+0x254>
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b28      	cmp	r3, #40	; 0x28
 8005be8:	d110      	bne.n	8005c0c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a0a      	ldr	r2, [pc, #40]	; (8005c18 <I2C_ITError+0x260>)
 8005bee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fe fe7a 	bl	8004900 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	08005c1d 	.word	0x08005c1d
 8005c18:	ffff0000 	.word	0xffff0000

08005c1c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c36:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <I2C_DMAAbort+0x148>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	08db      	lsrs	r3, r3, #3
 8005c3c:	4a4a      	ldr	r2, [pc, #296]	; (8005d68 <I2C_DMAAbort+0x14c>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	0a1a      	lsrs	r2, r3, #8
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	00da      	lsls	r2, r3, #3
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005c62:	e00a      	b.n	8005c7a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c78:	d0ea      	beq.n	8005c50 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c86:	2200      	movs	r2, #0
 8005c88:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	2200      	movs	r2, #0
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2200      	movs	r2, #0
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	2200      	movs	r2, #0
 8005cce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b60      	cmp	r3, #96	; 0x60
 8005cea:	d10e      	bne.n	8005d0a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d02:	6978      	ldr	r0, [r7, #20]
 8005d04:	f7fe fe24 	bl	8004950 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d08:	e027      	b.n	8005d5a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d0a:	7cfb      	ldrb	r3, [r7, #19]
 8005d0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d10:	2b28      	cmp	r3, #40	; 0x28
 8005d12:	d117      	bne.n	8005d44 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2228      	movs	r2, #40	; 0x28
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d42:	e007      	b.n	8005d54 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d54:	6978      	ldr	r0, [r7, #20]
 8005d56:	f7fe fdf1 	bl	800493c <HAL_I2C_ErrorCallback>
}
 8005d5a:	bf00      	nop
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000004 	.word	0x20000004
 8005d68:	14f8b589 	.word	0x14f8b589

08005d6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d78:	4b13      	ldr	r3, [pc, #76]	; (8005dc8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	08db      	lsrs	r3, r3, #3
 8005d7e:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	0a1a      	lsrs	r2, r3, #8
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d107      	bne.n	8005daa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f043 0220 	orr.w	r2, r3, #32
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e008      	b.n	8005dbc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db8:	d0e9      	beq.n	8005d8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	20000004 	.word	0x20000004
 8005dcc:	14f8b589 	.word	0x14f8b589

08005dd0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005de0:	d103      	bne.n	8005dea <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005de8:	e007      	b.n	8005dfa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005df2:	d102      	bne.n	8005dfa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2208      	movs	r2, #8
 8005df8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e264      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d075      	beq.n	8005f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e26:	4ba3      	ldr	r3, [pc, #652]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 030c 	and.w	r3, r3, #12
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d00c      	beq.n	8005e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e32:	4ba0      	ldr	r3, [pc, #640]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d112      	bne.n	8005e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e3e:	4b9d      	ldr	r3, [pc, #628]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e4a:	d10b      	bne.n	8005e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e4c:	4b99      	ldr	r3, [pc, #612]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d05b      	beq.n	8005f10 <HAL_RCC_OscConfig+0x108>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d157      	bne.n	8005f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e23f      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6c:	d106      	bne.n	8005e7c <HAL_RCC_OscConfig+0x74>
 8005e6e:	4b91      	ldr	r3, [pc, #580]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a90      	ldr	r2, [pc, #576]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	e01d      	b.n	8005eb8 <HAL_RCC_OscConfig+0xb0>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e84:	d10c      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x98>
 8005e86:	4b8b      	ldr	r3, [pc, #556]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a8a      	ldr	r2, [pc, #552]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	4b88      	ldr	r3, [pc, #544]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a87      	ldr	r2, [pc, #540]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e00b      	b.n	8005eb8 <HAL_RCC_OscConfig+0xb0>
 8005ea0:	4b84      	ldr	r3, [pc, #528]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a83      	ldr	r2, [pc, #524]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	4b81      	ldr	r3, [pc, #516]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a80      	ldr	r2, [pc, #512]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d013      	beq.n	8005ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec0:	f7fc fd52 	bl	8002968 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec8:	f7fc fd4e 	bl	8002968 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b64      	cmp	r3, #100	; 0x64
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e204      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eda:	4b76      	ldr	r3, [pc, #472]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0xc0>
 8005ee6:	e014      	b.n	8005f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7fc fd3e 	bl	8002968 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7fc fd3a 	bl	8002968 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	; 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e1f0      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f02:	4b6c      	ldr	r3, [pc, #432]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0xe8>
 8005f0e:	e000      	b.n	8005f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d063      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f1e:	4b65      	ldr	r3, [pc, #404]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 030c 	and.w	r3, r3, #12
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00b      	beq.n	8005f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f2a:	4b62      	ldr	r3, [pc, #392]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d11c      	bne.n	8005f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f36:	4b5f      	ldr	r3, [pc, #380]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d116      	bne.n	8005f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f42:	4b5c      	ldr	r3, [pc, #368]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <HAL_RCC_OscConfig+0x152>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d001      	beq.n	8005f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e1c4      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5a:	4b56      	ldr	r3, [pc, #344]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4952      	ldr	r1, [pc, #328]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6e:	e03a      	b.n	8005fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d020      	beq.n	8005fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f78:	4b4f      	ldr	r3, [pc, #316]	; (80060b8 <HAL_RCC_OscConfig+0x2b0>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7e:	f7fc fcf3 	bl	8002968 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f86:	f7fc fcef 	bl	8002968 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e1a5      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f98:	4b46      	ldr	r3, [pc, #280]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0f0      	beq.n	8005f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa4:	4b43      	ldr	r3, [pc, #268]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4940      	ldr	r1, [pc, #256]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	600b      	str	r3, [r1, #0]
 8005fb8:	e015      	b.n	8005fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fba:	4b3f      	ldr	r3, [pc, #252]	; (80060b8 <HAL_RCC_OscConfig+0x2b0>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fc fcd2 	bl	8002968 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc8:	f7fc fcce 	bl	8002968 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e184      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fda:	4b36      	ldr	r3, [pc, #216]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f0      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d030      	beq.n	8006054 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ffa:	4b30      	ldr	r3, [pc, #192]	; (80060bc <HAL_RCC_OscConfig+0x2b4>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006000:	f7fc fcb2 	bl	8002968 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006008:	f7fc fcae 	bl	8002968 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e164      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800601a:	4b26      	ldr	r3, [pc, #152]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 800601c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f0      	beq.n	8006008 <HAL_RCC_OscConfig+0x200>
 8006026:	e015      	b.n	8006054 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006028:	4b24      	ldr	r3, [pc, #144]	; (80060bc <HAL_RCC_OscConfig+0x2b4>)
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800602e:	f7fc fc9b 	bl	8002968 <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006036:	f7fc fc97 	bl	8002968 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e14d      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006048:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 800604a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f0      	bne.n	8006036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80a0 	beq.w	80061a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006062:	2300      	movs	r3, #0
 8006064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10f      	bne.n	8006092 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006072:	2300      	movs	r3, #0
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	4a0e      	ldr	r2, [pc, #56]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 800607c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006080:	6413      	str	r3, [r2, #64]	; 0x40
 8006082:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608a:	60bb      	str	r3, [r7, #8]
 800608c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800608e:	2301      	movs	r3, #1
 8006090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <HAL_RCC_OscConfig+0x2b8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d121      	bne.n	80060e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800609e:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <HAL_RCC_OscConfig+0x2b8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a07      	ldr	r2, [pc, #28]	; (80060c0 <HAL_RCC_OscConfig+0x2b8>)
 80060a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060aa:	f7fc fc5d 	bl	8002968 <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b0:	e011      	b.n	80060d6 <HAL_RCC_OscConfig+0x2ce>
 80060b2:	bf00      	nop
 80060b4:	40023800 	.word	0x40023800
 80060b8:	42470000 	.word	0x42470000
 80060bc:	42470e80 	.word	0x42470e80
 80060c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c4:	f7fc fc50 	bl	8002968 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e106      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d6:	4b85      	ldr	r3, [pc, #532]	; (80062ec <HAL_RCC_OscConfig+0x4e4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d106      	bne.n	80060f8 <HAL_RCC_OscConfig+0x2f0>
 80060ea:	4b81      	ldr	r3, [pc, #516]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	4a80      	ldr	r2, [pc, #512]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6713      	str	r3, [r2, #112]	; 0x70
 80060f6:	e01c      	b.n	8006132 <HAL_RCC_OscConfig+0x32a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	d10c      	bne.n	800611a <HAL_RCC_OscConfig+0x312>
 8006100:	4b7b      	ldr	r3, [pc, #492]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	4a7a      	ldr	r2, [pc, #488]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006106:	f043 0304 	orr.w	r3, r3, #4
 800610a:	6713      	str	r3, [r2, #112]	; 0x70
 800610c:	4b78      	ldr	r3, [pc, #480]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	4a77      	ldr	r2, [pc, #476]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6713      	str	r3, [r2, #112]	; 0x70
 8006118:	e00b      	b.n	8006132 <HAL_RCC_OscConfig+0x32a>
 800611a:	4b75      	ldr	r3, [pc, #468]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	4a74      	ldr	r2, [pc, #464]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	6713      	str	r3, [r2, #112]	; 0x70
 8006126:	4b72      	ldr	r3, [pc, #456]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	4a71      	ldr	r2, [pc, #452]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 800612c:	f023 0304 	bic.w	r3, r3, #4
 8006130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d015      	beq.n	8006166 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613a:	f7fc fc15 	bl	8002968 <HAL_GetTick>
 800613e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006140:	e00a      	b.n	8006158 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006142:	f7fc fc11 	bl	8002968 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006150:	4293      	cmp	r3, r2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e0c5      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006158:	4b65      	ldr	r3, [pc, #404]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 800615a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0ee      	beq.n	8006142 <HAL_RCC_OscConfig+0x33a>
 8006164:	e014      	b.n	8006190 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006166:	f7fc fbff 	bl	8002968 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616c:	e00a      	b.n	8006184 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616e:	f7fc fbfb 	bl	8002968 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	f241 3288 	movw	r2, #5000	; 0x1388
 800617c:	4293      	cmp	r3, r2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e0af      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006184:	4b5a      	ldr	r3, [pc, #360]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1ee      	bne.n	800616e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006196:	4b56      	ldr	r3, [pc, #344]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	4a55      	ldr	r2, [pc, #340]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 800619c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 809b 	beq.w	80062e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ac:	4b50      	ldr	r3, [pc, #320]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 030c 	and.w	r3, r3, #12
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d05c      	beq.n	8006272 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d141      	bne.n	8006244 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c0:	4b4c      	ldr	r3, [pc, #304]	; (80062f4 <HAL_RCC_OscConfig+0x4ec>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c6:	f7fc fbcf 	bl	8002968 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ce:	f7fc fbcb 	bl	8002968 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e081      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e0:	4b43      	ldr	r3, [pc, #268]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	019b      	lsls	r3, r3, #6
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	3b01      	subs	r3, #1
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	061b      	lsls	r3, r3, #24
 8006210:	4937      	ldr	r1, [pc, #220]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006212:	4313      	orrs	r3, r2
 8006214:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006216:	4b37      	ldr	r3, [pc, #220]	; (80062f4 <HAL_RCC_OscConfig+0x4ec>)
 8006218:	2201      	movs	r2, #1
 800621a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fc fba4 	bl	8002968 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006224:	f7fc fba0 	bl	8002968 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e056      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006236:	4b2e      	ldr	r3, [pc, #184]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0x41c>
 8006242:	e04e      	b.n	80062e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006244:	4b2b      	ldr	r3, [pc, #172]	; (80062f4 <HAL_RCC_OscConfig+0x4ec>)
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800624a:	f7fc fb8d 	bl	8002968 <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006250:	e008      	b.n	8006264 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006252:	f7fc fb89 	bl	8002968 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e03f      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006264:	4b22      	ldr	r3, [pc, #136]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f0      	bne.n	8006252 <HAL_RCC_OscConfig+0x44a>
 8006270:	e037      	b.n	80062e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e032      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800627e:	4b1c      	ldr	r3, [pc, #112]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d028      	beq.n	80062de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006296:	429a      	cmp	r2, r3
 8006298:	d121      	bne.n	80062de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d11a      	bne.n	80062de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062ae:	4013      	ands	r3, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d111      	bne.n	80062de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	3b01      	subs	r3, #1
 80062c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d107      	bne.n	80062de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062da:	429a      	cmp	r2, r3
 80062dc:	d001      	beq.n	80062e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40007000 	.word	0x40007000
 80062f0:	40023800 	.word	0x40023800
 80062f4:	42470060 	.word	0x42470060

080062f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0cc      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800630c:	4b68      	ldr	r3, [pc, #416]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d90c      	bls.n	8006334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631a:	4b65      	ldr	r3, [pc, #404]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006322:	4b63      	ldr	r3, [pc, #396]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d001      	beq.n	8006334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0b8      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d020      	beq.n	8006382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800634c:	4b59      	ldr	r3, [pc, #356]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	4a58      	ldr	r2, [pc, #352]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006364:	4b53      	ldr	r3, [pc, #332]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	4a52      	ldr	r2, [pc, #328]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800636e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006370:	4b50      	ldr	r3, [pc, #320]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	494d      	ldr	r1, [pc, #308]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	4313      	orrs	r3, r2
 8006380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d044      	beq.n	8006418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d107      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006396:	4b47      	ldr	r3, [pc, #284]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d119      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e07f      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d003      	beq.n	80063b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d107      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b6:	4b3f      	ldr	r3, [pc, #252]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e06f      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063c6:	4b3b      	ldr	r3, [pc, #236]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e067      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063d6:	4b37      	ldr	r3, [pc, #220]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f023 0203 	bic.w	r2, r3, #3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	4934      	ldr	r1, [pc, #208]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063e8:	f7fc fabe 	bl	8002968 <HAL_GetTick>
 80063ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ee:	e00a      	b.n	8006406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f0:	f7fc faba 	bl	8002968 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e04f      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006406:	4b2b      	ldr	r3, [pc, #172]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 020c 	and.w	r2, r3, #12
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	429a      	cmp	r2, r3
 8006416:	d1eb      	bne.n	80063f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006418:	4b25      	ldr	r3, [pc, #148]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d20c      	bcs.n	8006440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006426:	4b22      	ldr	r3, [pc, #136]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d001      	beq.n	8006440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e032      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800644c:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	4916      	ldr	r1, [pc, #88]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d009      	beq.n	800647e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	490e      	ldr	r1, [pc, #56]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800647e:	f000 f821 	bl	80064c4 <HAL_RCC_GetSysClockFreq>
 8006482:	4602      	mov	r2, r0
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	490a      	ldr	r1, [pc, #40]	; (80064b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006490:	5ccb      	ldrb	r3, [r1, r3]
 8006492:	fa22 f303 	lsr.w	r3, r2, r3
 8006496:	4a09      	ldr	r2, [pc, #36]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 8006498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <HAL_RCC_ClockConfig+0x1c8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fc fa1e 	bl	80028e0 <HAL_InitTick>

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	40023c00 	.word	0x40023c00
 80064b4:	40023800 	.word	0x40023800
 80064b8:	080088e0 	.word	0x080088e0
 80064bc:	20000004 	.word	0x20000004
 80064c0:	20000008 	.word	0x20000008

080064c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	607b      	str	r3, [r7, #4]
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	2300      	movs	r3, #0
 80064d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064dc:	4b67      	ldr	r3, [pc, #412]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 030c 	and.w	r3, r3, #12
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d00d      	beq.n	8006504 <HAL_RCC_GetSysClockFreq+0x40>
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	f200 80bd 	bhi.w	8006668 <HAL_RCC_GetSysClockFreq+0x1a4>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_RCC_GetSysClockFreq+0x34>
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d003      	beq.n	80064fe <HAL_RCC_GetSysClockFreq+0x3a>
 80064f6:	e0b7      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064f8:	4b61      	ldr	r3, [pc, #388]	; (8006680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80064fa:	60bb      	str	r3, [r7, #8]
       break;
 80064fc:	e0b7      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064fe:	4b61      	ldr	r3, [pc, #388]	; (8006684 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006500:	60bb      	str	r3, [r7, #8]
      break;
 8006502:	e0b4      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006504:	4b5d      	ldr	r3, [pc, #372]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800650c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800650e:	4b5b      	ldr	r3, [pc, #364]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d04d      	beq.n	80065b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651a:	4b58      	ldr	r3, [pc, #352]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	099b      	lsrs	r3, r3, #6
 8006520:	461a      	mov	r2, r3
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800652a:	f04f 0100 	mov.w	r1, #0
 800652e:	ea02 0800 	and.w	r8, r2, r0
 8006532:	ea03 0901 	and.w	r9, r3, r1
 8006536:	4640      	mov	r0, r8
 8006538:	4649      	mov	r1, r9
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	014b      	lsls	r3, r1, #5
 8006544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006548:	0142      	lsls	r2, r0, #5
 800654a:	4610      	mov	r0, r2
 800654c:	4619      	mov	r1, r3
 800654e:	ebb0 0008 	subs.w	r0, r0, r8
 8006552:	eb61 0109 	sbc.w	r1, r1, r9
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	018b      	lsls	r3, r1, #6
 8006560:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006564:	0182      	lsls	r2, r0, #6
 8006566:	1a12      	subs	r2, r2, r0
 8006568:	eb63 0301 	sbc.w	r3, r3, r1
 800656c:	f04f 0000 	mov.w	r0, #0
 8006570:	f04f 0100 	mov.w	r1, #0
 8006574:	00d9      	lsls	r1, r3, #3
 8006576:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800657a:	00d0      	lsls	r0, r2, #3
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	eb12 0208 	adds.w	r2, r2, r8
 8006584:	eb43 0309 	adc.w	r3, r3, r9
 8006588:	f04f 0000 	mov.w	r0, #0
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	0259      	lsls	r1, r3, #9
 8006592:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006596:	0250      	lsls	r0, r2, #9
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4610      	mov	r0, r2
 800659e:	4619      	mov	r1, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	f7f9 fe14 	bl	80001d4 <__aeabi_uldivmod>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4613      	mov	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e04a      	b.n	800664c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065b6:	4b31      	ldr	r3, [pc, #196]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	099b      	lsrs	r3, r3, #6
 80065bc:	461a      	mov	r2, r3
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065c6:	f04f 0100 	mov.w	r1, #0
 80065ca:	ea02 0400 	and.w	r4, r2, r0
 80065ce:	ea03 0501 	and.w	r5, r3, r1
 80065d2:	4620      	mov	r0, r4
 80065d4:	4629      	mov	r1, r5
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	f04f 0300 	mov.w	r3, #0
 80065de:	014b      	lsls	r3, r1, #5
 80065e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065e4:	0142      	lsls	r2, r0, #5
 80065e6:	4610      	mov	r0, r2
 80065e8:	4619      	mov	r1, r3
 80065ea:	1b00      	subs	r0, r0, r4
 80065ec:	eb61 0105 	sbc.w	r1, r1, r5
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	018b      	lsls	r3, r1, #6
 80065fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065fe:	0182      	lsls	r2, r0, #6
 8006600:	1a12      	subs	r2, r2, r0
 8006602:	eb63 0301 	sbc.w	r3, r3, r1
 8006606:	f04f 0000 	mov.w	r0, #0
 800660a:	f04f 0100 	mov.w	r1, #0
 800660e:	00d9      	lsls	r1, r3, #3
 8006610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006614:	00d0      	lsls	r0, r2, #3
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	1912      	adds	r2, r2, r4
 800661c:	eb45 0303 	adc.w	r3, r5, r3
 8006620:	f04f 0000 	mov.w	r0, #0
 8006624:	f04f 0100 	mov.w	r1, #0
 8006628:	0299      	lsls	r1, r3, #10
 800662a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800662e:	0290      	lsls	r0, r2, #10
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4610      	mov	r0, r2
 8006636:	4619      	mov	r1, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	461a      	mov	r2, r3
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	f7f9 fdc8 	bl	80001d4 <__aeabi_uldivmod>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4613      	mov	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	3301      	adds	r3, #1
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	fbb2 f3f3 	udiv	r3, r2, r3
 8006664:	60bb      	str	r3, [r7, #8]
      break;
 8006666:	e002      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800666a:	60bb      	str	r3, [r7, #8]
      break;
 800666c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800666e:	68bb      	ldr	r3, [r7, #8]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800
 8006680:	00f42400 	.word	0x00f42400
 8006684:	007a1200 	.word	0x007a1200

08006688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800668c:	4b03      	ldr	r3, [pc, #12]	; (800669c <HAL_RCC_GetHCLKFreq+0x14>)
 800668e:	681b      	ldr	r3, [r3, #0]
}
 8006690:	4618      	mov	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20000004 	.word	0x20000004

080066a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066a4:	f7ff fff0 	bl	8006688 <HAL_RCC_GetHCLKFreq>
 80066a8:	4602      	mov	r2, r0
 80066aa:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	0a9b      	lsrs	r3, r3, #10
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	4903      	ldr	r1, [pc, #12]	; (80066c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066b6:	5ccb      	ldrb	r3, [r1, r3]
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40023800 	.word	0x40023800
 80066c4:	080088f0 	.word	0x080088f0

080066c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066cc:	f7ff ffdc 	bl	8006688 <HAL_RCC_GetHCLKFreq>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	0b5b      	lsrs	r3, r3, #13
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	4903      	ldr	r1, [pc, #12]	; (80066ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80066de:	5ccb      	ldrb	r3, [r1, r3]
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40023800 	.word	0x40023800
 80066ec:	080088f0 	.word	0x080088f0

080066f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e041      	b.n	8006786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fb ff10 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3304      	adds	r3, #4
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f000 fcae 	bl	8007090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d001      	beq.n	80067a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e03c      	b.n	8006822 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1e      	ldr	r2, [pc, #120]	; (8006830 <HAL_TIM_Base_Start+0xa0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d018      	beq.n	80067ec <HAL_TIM_Base_Start+0x5c>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c2:	d013      	beq.n	80067ec <HAL_TIM_Base_Start+0x5c>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1a      	ldr	r2, [pc, #104]	; (8006834 <HAL_TIM_Base_Start+0xa4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00e      	beq.n	80067ec <HAL_TIM_Base_Start+0x5c>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a19      	ldr	r2, [pc, #100]	; (8006838 <HAL_TIM_Base_Start+0xa8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d009      	beq.n	80067ec <HAL_TIM_Base_Start+0x5c>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a17      	ldr	r2, [pc, #92]	; (800683c <HAL_TIM_Base_Start+0xac>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d004      	beq.n	80067ec <HAL_TIM_Base_Start+0x5c>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a16      	ldr	r2, [pc, #88]	; (8006840 <HAL_TIM_Base_Start+0xb0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d111      	bne.n	8006810 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b06      	cmp	r3, #6
 80067fc:	d010      	beq.n	8006820 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0201 	orr.w	r2, r2, #1
 800680c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680e:	e007      	b.n	8006820 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40010000 	.word	0x40010000
 8006834:	40000400 	.word	0x40000400
 8006838:	40000800 	.word	0x40000800
 800683c:	40000c00 	.word	0x40000c00
 8006840:	40014000 	.word	0x40014000

08006844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b01      	cmp	r3, #1
 8006856:	d001      	beq.n	800685c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e044      	b.n	80068e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d018      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x6c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006886:	d013      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x6c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1a      	ldr	r2, [pc, #104]	; (80068f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00e      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x6c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a19      	ldr	r2, [pc, #100]	; (80068fc <HAL_TIM_Base_Start_IT+0xb8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d009      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x6c>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a17      	ldr	r2, [pc, #92]	; (8006900 <HAL_TIM_Base_Start_IT+0xbc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d004      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x6c>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a16      	ldr	r2, [pc, #88]	; (8006904 <HAL_TIM_Base_Start_IT+0xc0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d111      	bne.n	80068d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b06      	cmp	r3, #6
 80068c0:	d010      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0201 	orr.w	r2, r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d2:	e007      	b.n	80068e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0201 	orr.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	40014000 	.word	0x40014000

08006908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e041      	b.n	800699e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f839 	bl	80069a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3304      	adds	r3, #4
 8006944:	4619      	mov	r1, r3
 8006946:	4610      	mov	r0, r2
 8006948:	f000 fba2 	bl	8007090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d109      	bne.n	80069e0 <HAL_TIM_PWM_Start+0x24>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	bf14      	ite	ne
 80069d8:	2301      	movne	r3, #1
 80069da:	2300      	moveq	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	e022      	b.n	8006a26 <HAL_TIM_PWM_Start+0x6a>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d109      	bne.n	80069fa <HAL_TIM_PWM_Start+0x3e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	bf14      	ite	ne
 80069f2:	2301      	movne	r3, #1
 80069f4:	2300      	moveq	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	e015      	b.n	8006a26 <HAL_TIM_PWM_Start+0x6a>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d109      	bne.n	8006a14 <HAL_TIM_PWM_Start+0x58>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	bf14      	ite	ne
 8006a0c:	2301      	movne	r3, #1
 8006a0e:	2300      	moveq	r3, #0
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	e008      	b.n	8006a26 <HAL_TIM_PWM_Start+0x6a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	bf14      	ite	ne
 8006a20:	2301      	movne	r3, #1
 8006a22:	2300      	moveq	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e068      	b.n	8006b00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_PWM_Start+0x82>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a3c:	e013      	b.n	8006a66 <HAL_TIM_PWM_Start+0xaa>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d104      	bne.n	8006a4e <HAL_TIM_PWM_Start+0x92>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a4c:	e00b      	b.n	8006a66 <HAL_TIM_PWM_Start+0xaa>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d104      	bne.n	8006a5e <HAL_TIM_PWM_Start+0xa2>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a5c:	e003      	b.n	8006a66 <HAL_TIM_PWM_Start+0xaa>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fdb4 	bl	80075dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a23      	ldr	r2, [pc, #140]	; (8006b08 <HAL_TIM_PWM_Start+0x14c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d107      	bne.n	8006a8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1d      	ldr	r2, [pc, #116]	; (8006b08 <HAL_TIM_PWM_Start+0x14c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d018      	beq.n	8006aca <HAL_TIM_PWM_Start+0x10e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa0:	d013      	beq.n	8006aca <HAL_TIM_PWM_Start+0x10e>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_TIM_PWM_Start+0x150>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00e      	beq.n	8006aca <HAL_TIM_PWM_Start+0x10e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a17      	ldr	r2, [pc, #92]	; (8006b10 <HAL_TIM_PWM_Start+0x154>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d009      	beq.n	8006aca <HAL_TIM_PWM_Start+0x10e>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <HAL_TIM_PWM_Start+0x158>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d004      	beq.n	8006aca <HAL_TIM_PWM_Start+0x10e>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a14      	ldr	r2, [pc, #80]	; (8006b18 <HAL_TIM_PWM_Start+0x15c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d111      	bne.n	8006aee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b06      	cmp	r3, #6
 8006ada:	d010      	beq.n	8006afe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aec:	e007      	b.n	8006afe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	40000400 	.word	0x40000400
 8006b10:	40000800 	.word	0x40000800
 8006b14:	40000c00 	.word	0x40000c00
 8006b18:	40014000 	.word	0x40014000

08006b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d122      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d11b      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0202 	mvn.w	r2, #2
 8006b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa77 	bl	8007052 <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa69 	bl	800703e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fa7a 	bl	8007066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d122      	bne.n	8006bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d11b      	bne.n	8006bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0204 	mvn.w	r2, #4
 8006b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa4d 	bl	8007052 <HAL_TIM_IC_CaptureCallback>
 8006bb8:	e005      	b.n	8006bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fa3f 	bl	800703e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fa50 	bl	8007066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d122      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d11b      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f06f 0208 	mvn.w	r2, #8
 8006bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa23 	bl	8007052 <HAL_TIM_IC_CaptureCallback>
 8006c0c:	e005      	b.n	8006c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa15 	bl	800703e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fa26 	bl	8007066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0310 	and.w	r3, r3, #16
 8006c2a:	2b10      	cmp	r3, #16
 8006c2c:	d122      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0310 	and.w	r3, r3, #16
 8006c38:	2b10      	cmp	r3, #16
 8006c3a:	d11b      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0210 	mvn.w	r2, #16
 8006c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2208      	movs	r2, #8
 8006c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9f9 	bl	8007052 <HAL_TIM_IC_CaptureCallback>
 8006c60:	e005      	b.n	8006c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f9eb 	bl	800703e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f9fc 	bl	8007066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d10e      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d107      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0201 	mvn.w	r2, #1
 8006c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7f9 fc56 	bl	800054c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006caa:	2b80      	cmp	r3, #128	; 0x80
 8006cac:	d10e      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb8:	2b80      	cmp	r3, #128	; 0x80
 8006cba:	d107      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fd26 	bl	8007718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d10e      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b40      	cmp	r3, #64	; 0x40
 8006ce6:	d107      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f9c1 	bl	800707a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d10e      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d107      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0220 	mvn.w	r2, #32
 8006d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fcf0 	bl	8007704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e0ae      	b.n	8006ea8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b0c      	cmp	r3, #12
 8006d56:	f200 809f 	bhi.w	8006e98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006d95 	.word	0x08006d95
 8006d64:	08006e99 	.word	0x08006e99
 8006d68:	08006e99 	.word	0x08006e99
 8006d6c:	08006e99 	.word	0x08006e99
 8006d70:	08006dd5 	.word	0x08006dd5
 8006d74:	08006e99 	.word	0x08006e99
 8006d78:	08006e99 	.word	0x08006e99
 8006d7c:	08006e99 	.word	0x08006e99
 8006d80:	08006e17 	.word	0x08006e17
 8006d84:	08006e99 	.word	0x08006e99
 8006d88:	08006e99 	.word	0x08006e99
 8006d8c:	08006e99 	.word	0x08006e99
 8006d90:	08006e57 	.word	0x08006e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f9f8 	bl	8007190 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0208 	orr.w	r2, r2, #8
 8006dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699a      	ldr	r2, [r3, #24]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0204 	bic.w	r2, r2, #4
 8006dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6999      	ldr	r1, [r3, #24]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	619a      	str	r2, [r3, #24]
      break;
 8006dd2:	e064      	b.n	8006e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fa3e 	bl	800725c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6999      	ldr	r1, [r3, #24]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	021a      	lsls	r2, r3, #8
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	619a      	str	r2, [r3, #24]
      break;
 8006e14:	e043      	b.n	8006e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fa89 	bl	8007334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69da      	ldr	r2, [r3, #28]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0208 	orr.w	r2, r2, #8
 8006e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0204 	bic.w	r2, r2, #4
 8006e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69d9      	ldr	r1, [r3, #28]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	61da      	str	r2, [r3, #28]
      break;
 8006e54:	e023      	b.n	8006e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fad3 	bl	8007408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69da      	ldr	r2, [r3, #28]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69da      	ldr	r2, [r3, #28]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69d9      	ldr	r1, [r3, #28]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	021a      	lsls	r2, r3, #8
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	61da      	str	r2, [r3, #28]
      break;
 8006e96:	e002      	b.n	8006e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_TIM_ConfigClockSource+0x1c>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e0b4      	b.n	8007036 <HAL_TIM_ConfigClockSource+0x186>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ef2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f04:	d03e      	beq.n	8006f84 <HAL_TIM_ConfigClockSource+0xd4>
 8006f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0a:	f200 8087 	bhi.w	800701c <HAL_TIM_ConfigClockSource+0x16c>
 8006f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f12:	f000 8086 	beq.w	8007022 <HAL_TIM_ConfigClockSource+0x172>
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1a:	d87f      	bhi.n	800701c <HAL_TIM_ConfigClockSource+0x16c>
 8006f1c:	2b70      	cmp	r3, #112	; 0x70
 8006f1e:	d01a      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0xa6>
 8006f20:	2b70      	cmp	r3, #112	; 0x70
 8006f22:	d87b      	bhi.n	800701c <HAL_TIM_ConfigClockSource+0x16c>
 8006f24:	2b60      	cmp	r3, #96	; 0x60
 8006f26:	d050      	beq.n	8006fca <HAL_TIM_ConfigClockSource+0x11a>
 8006f28:	2b60      	cmp	r3, #96	; 0x60
 8006f2a:	d877      	bhi.n	800701c <HAL_TIM_ConfigClockSource+0x16c>
 8006f2c:	2b50      	cmp	r3, #80	; 0x50
 8006f2e:	d03c      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0xfa>
 8006f30:	2b50      	cmp	r3, #80	; 0x50
 8006f32:	d873      	bhi.n	800701c <HAL_TIM_ConfigClockSource+0x16c>
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d058      	beq.n	8006fea <HAL_TIM_ConfigClockSource+0x13a>
 8006f38:	2b40      	cmp	r3, #64	; 0x40
 8006f3a:	d86f      	bhi.n	800701c <HAL_TIM_ConfigClockSource+0x16c>
 8006f3c:	2b30      	cmp	r3, #48	; 0x30
 8006f3e:	d064      	beq.n	800700a <HAL_TIM_ConfigClockSource+0x15a>
 8006f40:	2b30      	cmp	r3, #48	; 0x30
 8006f42:	d86b      	bhi.n	800701c <HAL_TIM_ConfigClockSource+0x16c>
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d060      	beq.n	800700a <HAL_TIM_ConfigClockSource+0x15a>
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d867      	bhi.n	800701c <HAL_TIM_ConfigClockSource+0x16c>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d05c      	beq.n	800700a <HAL_TIM_ConfigClockSource+0x15a>
 8006f50:	2b10      	cmp	r3, #16
 8006f52:	d05a      	beq.n	800700a <HAL_TIM_ConfigClockSource+0x15a>
 8006f54:	e062      	b.n	800701c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	6899      	ldr	r1, [r3, #8]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f000 fb19 	bl	800759c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	609a      	str	r2, [r3, #8]
      break;
 8006f82:	e04f      	b.n	8007024 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	6899      	ldr	r1, [r3, #8]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f000 fb02 	bl	800759c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fa6:	609a      	str	r2, [r3, #8]
      break;
 8006fa8:	e03c      	b.n	8007024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	6859      	ldr	r1, [r3, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f000 fa76 	bl	80074a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2150      	movs	r1, #80	; 0x50
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 facf 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 8006fc8:	e02c      	b.n	8007024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	6859      	ldr	r1, [r3, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f000 fa95 	bl	8007506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2160      	movs	r1, #96	; 0x60
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fabf 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 8006fe8:	e01c      	b.n	8007024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6859      	ldr	r1, [r3, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f000 fa56 	bl	80074a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2140      	movs	r1, #64	; 0x40
 8007002:	4618      	mov	r0, r3
 8007004:	f000 faaf 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 8007008:	e00c      	b.n	8007024 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4619      	mov	r1, r3
 8007014:	4610      	mov	r0, r2
 8007016:	f000 faa6 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 800701a:	e003      	b.n	8007024 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]
      break;
 8007020:	e000      	b.n	8007024 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a34      	ldr	r2, [pc, #208]	; (8007174 <TIM_Base_SetConfig+0xe4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00f      	beq.n	80070c8 <TIM_Base_SetConfig+0x38>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ae:	d00b      	beq.n	80070c8 <TIM_Base_SetConfig+0x38>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a31      	ldr	r2, [pc, #196]	; (8007178 <TIM_Base_SetConfig+0xe8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d007      	beq.n	80070c8 <TIM_Base_SetConfig+0x38>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a30      	ldr	r2, [pc, #192]	; (800717c <TIM_Base_SetConfig+0xec>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d003      	beq.n	80070c8 <TIM_Base_SetConfig+0x38>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a2f      	ldr	r2, [pc, #188]	; (8007180 <TIM_Base_SetConfig+0xf0>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d108      	bne.n	80070da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a25      	ldr	r2, [pc, #148]	; (8007174 <TIM_Base_SetConfig+0xe4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d01b      	beq.n	800711a <TIM_Base_SetConfig+0x8a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e8:	d017      	beq.n	800711a <TIM_Base_SetConfig+0x8a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a22      	ldr	r2, [pc, #136]	; (8007178 <TIM_Base_SetConfig+0xe8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d013      	beq.n	800711a <TIM_Base_SetConfig+0x8a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a21      	ldr	r2, [pc, #132]	; (800717c <TIM_Base_SetConfig+0xec>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00f      	beq.n	800711a <TIM_Base_SetConfig+0x8a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a20      	ldr	r2, [pc, #128]	; (8007180 <TIM_Base_SetConfig+0xf0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00b      	beq.n	800711a <TIM_Base_SetConfig+0x8a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <TIM_Base_SetConfig+0xf4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d007      	beq.n	800711a <TIM_Base_SetConfig+0x8a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a1e      	ldr	r2, [pc, #120]	; (8007188 <TIM_Base_SetConfig+0xf8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d003      	beq.n	800711a <TIM_Base_SetConfig+0x8a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a1d      	ldr	r2, [pc, #116]	; (800718c <TIM_Base_SetConfig+0xfc>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d108      	bne.n	800712c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a08      	ldr	r2, [pc, #32]	; (8007174 <TIM_Base_SetConfig+0xe4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d103      	bne.n	8007160 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	615a      	str	r2, [r3, #20]
}
 8007166:	bf00      	nop
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40010000 	.word	0x40010000
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800
 8007180:	40000c00 	.word	0x40000c00
 8007184:	40014000 	.word	0x40014000
 8007188:	40014400 	.word	0x40014400
 800718c:	40014800 	.word	0x40014800

08007190 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	f023 0201 	bic.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0303 	bic.w	r3, r3, #3
 80071c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 0302 	bic.w	r3, r3, #2
 80071d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a1c      	ldr	r2, [pc, #112]	; (8007258 <TIM_OC1_SetConfig+0xc8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d10c      	bne.n	8007206 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f023 0308 	bic.w	r3, r3, #8
 80071f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f023 0304 	bic.w	r3, r3, #4
 8007204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a13      	ldr	r2, [pc, #76]	; (8007258 <TIM_OC1_SetConfig+0xc8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d111      	bne.n	8007232 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800721c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	621a      	str	r2, [r3, #32]
}
 800724c:	bf00      	nop
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	40010000 	.word	0x40010000

0800725c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	f023 0210 	bic.w	r2, r3, #16
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f023 0320 	bic.w	r3, r3, #32
 80072a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a1e      	ldr	r2, [pc, #120]	; (8007330 <TIM_OC2_SetConfig+0xd4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d10d      	bne.n	80072d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a15      	ldr	r2, [pc, #84]	; (8007330 <TIM_OC2_SetConfig+0xd4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d113      	bne.n	8007308 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40010000 	.word	0x40010000

08007334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0303 	bic.w	r3, r3, #3
 800736a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800737c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <TIM_OC3_SetConfig+0xd0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d10d      	bne.n	80073ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a14      	ldr	r2, [pc, #80]	; (8007404 <TIM_OC3_SetConfig+0xd0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d113      	bne.n	80073de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	621a      	str	r2, [r3, #32]
}
 80073f8:	bf00      	nop
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	40010000 	.word	0x40010000

08007408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	031b      	lsls	r3, r3, #12
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a10      	ldr	r2, [pc, #64]	; (80074a4 <TIM_OC4_SetConfig+0x9c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d109      	bne.n	800747c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800746e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	019b      	lsls	r3, r3, #6
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	621a      	str	r2, [r3, #32]
}
 8007496:	bf00      	nop
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40010000 	.word	0x40010000

080074a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	f023 0201 	bic.w	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f023 030a 	bic.w	r3, r3, #10
 80074e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007506:	b480      	push	{r7}
 8007508:	b087      	sub	sp, #28
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f023 0210 	bic.w	r2, r3, #16
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	031b      	lsls	r3, r3, #12
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	f043 0307 	orr.w	r3, r3, #7
 8007588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	609a      	str	r2, [r3, #8]
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	021a      	lsls	r2, r3, #8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	431a      	orrs	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	609a      	str	r2, [r3, #8]
}
 80075d0:	bf00      	nop
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	2201      	movs	r2, #1
 80075f0:	fa02 f303 	lsl.w	r3, r2, r3
 80075f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a1a      	ldr	r2, [r3, #32]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	401a      	ands	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	fa01 f303 	lsl.w	r3, r1, r3
 8007614:	431a      	orrs	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800763c:	2302      	movs	r3, #2
 800763e:	e050      	b.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1c      	ldr	r2, [pc, #112]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d018      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768c:	d013      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a18      	ldr	r2, [pc, #96]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00e      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a16      	ldr	r2, [pc, #88]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d009      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a15      	ldr	r2, [pc, #84]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d004      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a13      	ldr	r2, [pc, #76]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d10c      	bne.n	80076d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	40010000 	.word	0x40010000
 80076f4:	40000400 	.word	0x40000400
 80076f8:	40000800 	.word	0x40000800
 80076fc:	40000c00 	.word	0x40000c00
 8007700:	40014000 	.word	0x40014000

08007704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e03f      	b.n	80077be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fa ff6a 	bl	800262c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2224      	movs	r2, #36	; 0x24
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800776e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fdaf 	bl	80082d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695a      	ldr	r2, [r3, #20]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	4613      	mov	r3, r2
 80077d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d11d      	bne.n	800781c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_UART_Receive_IT+0x26>
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e016      	b.n	800781e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_UART_Receive_IT+0x38>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e00f      	b.n	800781e <HAL_UART_Receive_IT+0x58>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	461a      	mov	r2, r3
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fb72 	bl	8007efc <UART_Start_Receive_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	e000      	b.n	800781e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800781c:	2302      	movs	r3, #2
  }
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b09a      	sub	sp, #104	; 0x68
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	330c      	adds	r3, #12
 8007836:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007842:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007846:	667b      	str	r3, [r7, #100]	; 0x64
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007850:	657a      	str	r2, [r7, #84]	; 0x54
 8007852:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007856:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800785e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e5      	bne.n	8007830 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3314      	adds	r3, #20
 800786a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	f023 0301 	bic.w	r3, r3, #1
 800787a:	663b      	str	r3, [r7, #96]	; 0x60
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3314      	adds	r3, #20
 8007882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007884:	643a      	str	r2, [r7, #64]	; 0x40
 8007886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800788a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e5      	bne.n	8007864 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	2b01      	cmp	r3, #1
 800789e:	d119      	bne.n	80078d4 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f023 0310 	bic.w	r3, r3, #16
 80078b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	330c      	adds	r3, #12
 80078be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e5      	bne.n	80078a0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078de:	2b40      	cmp	r3, #64	; 0x40
 80078e0:	d13f      	bne.n	8007962 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3314      	adds	r3, #20
 80078e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3314      	adds	r3, #20
 8007900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007902:	61ba      	str	r2, [r7, #24]
 8007904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6979      	ldr	r1, [r7, #20]
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	613b      	str	r3, [r7, #16]
   return(result);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e5      	bne.n	80078e2 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	2b00      	cmp	r3, #0
 800791c:	d013      	beq.n	8007946 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	4a19      	ldr	r2, [pc, #100]	; (8007988 <HAL_UART_AbortReceive_IT+0x160>)
 8007924:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	4618      	mov	r0, r3
 800792c:	f7fb ffec 	bl	8003908 <HAL_DMA_Abort_IT>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d022      	beq.n	800797c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
 8007944:	e01a      	b.n	800797c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fab8 	bl	8007ed0 <HAL_UART_AbortReceiveCpltCallback>
 8007960:	e00c      	b.n	800797c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 faaa 	bl	8007ed0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3768      	adds	r7, #104	; 0x68
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	0800805f 	.word	0x0800805f

0800798c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b0ba      	sub	sp, #232	; 0xe8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80079ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10f      	bne.n	80079f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <HAL_UART_IRQHandler+0x66>
 80079de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fbb7 	bl	800815e <UART_Receive_IT>
      return;
 80079f0:	e256      	b.n	8007ea0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 80de 	beq.w	8007bb8 <HAL_UART_IRQHandler+0x22c>
 80079fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d106      	bne.n	8007a16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 80d1 	beq.w	8007bb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <HAL_UART_IRQHandler+0xae>
 8007a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d005      	beq.n	8007a3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	f043 0201 	orr.w	r2, r3, #1
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3e:	f003 0304 	and.w	r3, r3, #4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00b      	beq.n	8007a5e <HAL_UART_IRQHandler+0xd2>
 8007a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d005      	beq.n	8007a5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f043 0202 	orr.w	r2, r3, #2
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00b      	beq.n	8007a82 <HAL_UART_IRQHandler+0xf6>
 8007a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	f043 0204 	orr.w	r2, r3, #4
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d011      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x126>
 8007a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d105      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	f043 0208 	orr.w	r2, r3, #8
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 81ed 	beq.w	8007e96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d008      	beq.n	8007ada <HAL_UART_IRQHandler+0x14e>
 8007ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb42 	bl	800815e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae4:	2b40      	cmp	r3, #64	; 0x40
 8007ae6:	bf0c      	ite	eq
 8007ae8:	2301      	moveq	r3, #1
 8007aea:	2300      	movne	r3, #0
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d103      	bne.n	8007b06 <HAL_UART_IRQHandler+0x17a>
 8007afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d04f      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa32 	bl	8007f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d141      	bne.n	8007b9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3314      	adds	r3, #20
 8007b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3314      	adds	r3, #20
 8007b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1d9      	bne.n	8007b1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d013      	beq.n	8007b96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	4a7d      	ldr	r2, [pc, #500]	; (8007d68 <HAL_UART_IRQHandler+0x3dc>)
 8007b74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fb fec4 	bl	8003908 <HAL_DMA_Abort_IT>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d016      	beq.n	8007bb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b94:	e00e      	b.n	8007bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f990 	bl	8007ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9c:	e00a      	b.n	8007bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f98c 	bl	8007ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	e006      	b.n	8007bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f988 	bl	8007ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007bb2:	e170      	b.n	8007e96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	bf00      	nop
    return;
 8007bb6:	e16e      	b.n	8007e96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	f040 814a 	bne.w	8007e56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc6:	f003 0310 	and.w	r3, r3, #16
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 8143 	beq.w	8007e56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 813c 	beq.w	8007e56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bde:	2300      	movs	r3, #0
 8007be0:	60bb      	str	r3, [r7, #8]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60bb      	str	r3, [r7, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	60bb      	str	r3, [r7, #8]
 8007bf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	f040 80b4 	bne.w	8007d6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8140 	beq.w	8007e9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c22:	429a      	cmp	r2, r3
 8007c24:	f080 8139 	bcs.w	8007e9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c3a:	f000 8088 	beq.w	8007d4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	330c      	adds	r3, #12
 8007c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	330c      	adds	r3, #12
 8007c66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1d9      	bne.n	8007c3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3314      	adds	r3, #20
 8007c90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c9c:	f023 0301 	bic.w	r3, r3, #1
 8007ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e1      	bne.n	8007c8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3314      	adds	r3, #20
 8007ccc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e3      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	330c      	adds	r3, #12
 8007d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1e:	f023 0310 	bic.w	r3, r3, #16
 8007d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d30:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e3      	bne.n	8007d0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fb fd6d 	bl	8003828 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f8c0 	bl	8007ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d64:	e099      	b.n	8007e9a <HAL_UART_IRQHandler+0x50e>
 8007d66:	bf00      	nop
 8007d68:	08008037 	.word	0x08008037
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 808b 	beq.w	8007e9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 8086 	beq.w	8007e9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007db6:	647a      	str	r2, [r7, #68]	; 0x44
 8007db8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e3      	bne.n	8007d92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3314      	adds	r3, #20
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3314      	adds	r3, #20
 8007dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dee:	633a      	str	r2, [r7, #48]	; 0x30
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e3      	bne.n	8007dca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	330c      	adds	r3, #12
 8007e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0310 	bic.w	r3, r3, #16
 8007e26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	330c      	adds	r3, #12
 8007e30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e34:	61fa      	str	r2, [r7, #28]
 8007e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	69b9      	ldr	r1, [r7, #24]
 8007e3a:	69fa      	ldr	r2, [r7, #28]
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	617b      	str	r3, [r7, #20]
   return(result);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e3      	bne.n	8007e10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f848 	bl	8007ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e54:	e023      	b.n	8007e9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <HAL_UART_IRQHandler+0x4ea>
 8007e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f90d 	bl	800808e <UART_Transmit_IT>
    return;
 8007e74:	e014      	b.n	8007ea0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x514>
 8007e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d008      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f94d 	bl	800812e <UART_EndTransmit_IT>
    return;
 8007e94:	e004      	b.n	8007ea0 <HAL_UART_IRQHandler+0x514>
    return;
 8007e96:	bf00      	nop
 8007e98:	e002      	b.n	8007ea0 <HAL_UART_IRQHandler+0x514>
      return;
 8007e9a:	bf00      	nop
 8007e9c:	e000      	b.n	8007ea0 <HAL_UART_IRQHandler+0x514>
      return;
 8007e9e:	bf00      	nop
  }
}
 8007ea0:	37e8      	adds	r7, #232	; 0xe8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop

08007ea8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	88fa      	ldrh	r2, [r7, #6]
 8007f14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	88fa      	ldrh	r2, [r7, #6]
 8007f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2222      	movs	r2, #34	; 0x22
 8007f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f40:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	695a      	ldr	r2, [r3, #20]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f042 0201 	orr.w	r2, r2, #1
 8007f50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0220 	orr.w	r2, r2, #32
 8007f60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b095      	sub	sp, #84	; 0x54
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	330c      	adds	r3, #12
 8007f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f98:	643a      	str	r2, [r7, #64]	; 0x40
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e5      	bne.n	8007f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3314      	adds	r3, #20
 8007fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f023 0301 	bic.w	r3, r3, #1
 8007fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3314      	adds	r3, #20
 8007fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e5      	bne.n	8007fac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d119      	bne.n	800801c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	330c      	adds	r3, #12
 8007fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f023 0310 	bic.w	r3, r3, #16
 8007ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	330c      	adds	r3, #12
 8008006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008008:	61ba      	str	r2, [r7, #24]
 800800a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6979      	ldr	r1, [r7, #20]
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	613b      	str	r3, [r7, #16]
   return(result);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e5      	bne.n	8007fe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	631a      	str	r2, [r3, #48]	; 0x30
}
 800802a:	bf00      	nop
 800802c:	3754      	adds	r7, #84	; 0x54
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff ff33 	bl	8007ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008056:	bf00      	nop
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2220      	movs	r2, #32
 8008076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff ff25 	bl	8007ed0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008086:	bf00      	nop
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800808e:	b480      	push	{r7}
 8008090:	b085      	sub	sp, #20
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b21      	cmp	r3, #33	; 0x21
 80080a0:	d13e      	bne.n	8008120 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080aa:	d114      	bne.n	80080d6 <UART_Transmit_IT+0x48>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d110      	bne.n	80080d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	1c9a      	adds	r2, r3, #2
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	621a      	str	r2, [r3, #32]
 80080d4:	e008      	b.n	80080e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	1c59      	adds	r1, r3, #1
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	6211      	str	r1, [r2, #32]
 80080e0:	781a      	ldrb	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	4619      	mov	r1, r3
 80080f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10f      	bne.n	800811c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800810a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800811a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	e000      	b.n	8008122 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008120:	2302      	movs	r3, #2
  }
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008144:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff feaa 	bl	8007ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b08c      	sub	sp, #48	; 0x30
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b22      	cmp	r3, #34	; 0x22
 8008170:	f040 80ab 	bne.w	80082ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800817c:	d117      	bne.n	80081ae <UART_Receive_IT+0x50>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d113      	bne.n	80081ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	b29b      	uxth	r3, r3
 8008198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819c:	b29a      	uxth	r2, r3
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	1c9a      	adds	r2, r3, #2
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	629a      	str	r2, [r3, #40]	; 0x28
 80081ac:	e026      	b.n	80081fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c0:	d007      	beq.n	80081d2 <UART_Receive_IT+0x74>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <UART_Receive_IT+0x82>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	e008      	b.n	80081f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008200:	b29b      	uxth	r3, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	b29b      	uxth	r3, r3
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	4619      	mov	r1, r3
 800820a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800820c:	2b00      	cmp	r3, #0
 800820e:	d15a      	bne.n	80082c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0220 	bic.w	r2, r2, #32
 800821e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800822e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	695a      	ldr	r2, [r3, #20]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0201 	bic.w	r2, r2, #1
 800823e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2220      	movs	r2, #32
 8008244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824c:	2b01      	cmp	r3, #1
 800824e:	d135      	bne.n	80082bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	330c      	adds	r3, #12
 800825c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	613b      	str	r3, [r7, #16]
   return(result);
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f023 0310 	bic.w	r3, r3, #16
 800826c:	627b      	str	r3, [r7, #36]	; 0x24
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	330c      	adds	r3, #12
 8008274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008276:	623a      	str	r2, [r7, #32]
 8008278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827a:	69f9      	ldr	r1, [r7, #28]
 800827c:	6a3a      	ldr	r2, [r7, #32]
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	61bb      	str	r3, [r7, #24]
   return(result);
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e5      	bne.n	8008256 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b10      	cmp	r3, #16
 8008296:	d10a      	bne.n	80082ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff fe15 	bl	8007ee4 <HAL_UARTEx_RxEventCallback>
 80082ba:	e002      	b.n	80082c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7f8 f921 	bl	8000504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e002      	b.n	80082cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	e000      	b.n	80082cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082ca:	2302      	movs	r3, #2
  }
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3730      	adds	r7, #48	; 0x30
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d8:	b09f      	sub	sp, #124	; 0x7c
 80082da:	af00      	add	r7, sp, #0
 80082dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ea:	68d9      	ldr	r1, [r3, #12]
 80082ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	ea40 0301 	orr.w	r3, r0, r1
 80082f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	431a      	orrs	r2, r3
 8008300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	431a      	orrs	r2, r3
 8008306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	4313      	orrs	r3, r2
 800830c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800830e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008318:	f021 010c 	bic.w	r1, r1, #12
 800831c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008322:	430b      	orrs	r3, r1
 8008324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008332:	6999      	ldr	r1, [r3, #24]
 8008334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	ea40 0301 	orr.w	r3, r0, r1
 800833c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800833e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	4bc5      	ldr	r3, [pc, #788]	; (8008658 <UART_SetConfig+0x384>)
 8008344:	429a      	cmp	r2, r3
 8008346:	d004      	beq.n	8008352 <UART_SetConfig+0x7e>
 8008348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	4bc3      	ldr	r3, [pc, #780]	; (800865c <UART_SetConfig+0x388>)
 800834e:	429a      	cmp	r2, r3
 8008350:	d103      	bne.n	800835a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008352:	f7fe f9b9 	bl	80066c8 <HAL_RCC_GetPCLK2Freq>
 8008356:	6778      	str	r0, [r7, #116]	; 0x74
 8008358:	e002      	b.n	8008360 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800835a:	f7fe f9a1 	bl	80066a0 <HAL_RCC_GetPCLK1Freq>
 800835e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008368:	f040 80b6 	bne.w	80084d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800836c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800836e:	461c      	mov	r4, r3
 8008370:	f04f 0500 	mov.w	r5, #0
 8008374:	4622      	mov	r2, r4
 8008376:	462b      	mov	r3, r5
 8008378:	1891      	adds	r1, r2, r2
 800837a:	6439      	str	r1, [r7, #64]	; 0x40
 800837c:	415b      	adcs	r3, r3
 800837e:	647b      	str	r3, [r7, #68]	; 0x44
 8008380:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008384:	1912      	adds	r2, r2, r4
 8008386:	eb45 0303 	adc.w	r3, r5, r3
 800838a:	f04f 0000 	mov.w	r0, #0
 800838e:	f04f 0100 	mov.w	r1, #0
 8008392:	00d9      	lsls	r1, r3, #3
 8008394:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008398:	00d0      	lsls	r0, r2, #3
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	1911      	adds	r1, r2, r4
 80083a0:	6639      	str	r1, [r7, #96]	; 0x60
 80083a2:	416b      	adcs	r3, r5
 80083a4:	667b      	str	r3, [r7, #100]	; 0x64
 80083a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	461a      	mov	r2, r3
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	1891      	adds	r1, r2, r2
 80083b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80083b4:	415b      	adcs	r3, r3
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80083c0:	f7f7 ff08 	bl	80001d4 <__aeabi_uldivmod>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	4ba5      	ldr	r3, [pc, #660]	; (8008660 <UART_SetConfig+0x38c>)
 80083ca:	fba3 2302 	umull	r2, r3, r3, r2
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	011e      	lsls	r6, r3, #4
 80083d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083d4:	461c      	mov	r4, r3
 80083d6:	f04f 0500 	mov.w	r5, #0
 80083da:	4622      	mov	r2, r4
 80083dc:	462b      	mov	r3, r5
 80083de:	1891      	adds	r1, r2, r2
 80083e0:	6339      	str	r1, [r7, #48]	; 0x30
 80083e2:	415b      	adcs	r3, r3
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
 80083e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083ea:	1912      	adds	r2, r2, r4
 80083ec:	eb45 0303 	adc.w	r3, r5, r3
 80083f0:	f04f 0000 	mov.w	r0, #0
 80083f4:	f04f 0100 	mov.w	r1, #0
 80083f8:	00d9      	lsls	r1, r3, #3
 80083fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083fe:	00d0      	lsls	r0, r2, #3
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	1911      	adds	r1, r2, r4
 8008406:	65b9      	str	r1, [r7, #88]	; 0x58
 8008408:	416b      	adcs	r3, r5
 800840a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800840c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	461a      	mov	r2, r3
 8008412:	f04f 0300 	mov.w	r3, #0
 8008416:	1891      	adds	r1, r2, r2
 8008418:	62b9      	str	r1, [r7, #40]	; 0x28
 800841a:	415b      	adcs	r3, r3
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800841e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008422:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008426:	f7f7 fed5 	bl	80001d4 <__aeabi_uldivmod>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4b8c      	ldr	r3, [pc, #560]	; (8008660 <UART_SetConfig+0x38c>)
 8008430:	fba3 1302 	umull	r1, r3, r3, r2
 8008434:	095b      	lsrs	r3, r3, #5
 8008436:	2164      	movs	r1, #100	; 0x64
 8008438:	fb01 f303 	mul.w	r3, r1, r3
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	3332      	adds	r3, #50	; 0x32
 8008442:	4a87      	ldr	r2, [pc, #540]	; (8008660 <UART_SetConfig+0x38c>)
 8008444:	fba2 2303 	umull	r2, r3, r2, r3
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008450:	441e      	add	r6, r3
 8008452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008454:	4618      	mov	r0, r3
 8008456:	f04f 0100 	mov.w	r1, #0
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	1894      	adds	r4, r2, r2
 8008460:	623c      	str	r4, [r7, #32]
 8008462:	415b      	adcs	r3, r3
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
 8008466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800846a:	1812      	adds	r2, r2, r0
 800846c:	eb41 0303 	adc.w	r3, r1, r3
 8008470:	f04f 0400 	mov.w	r4, #0
 8008474:	f04f 0500 	mov.w	r5, #0
 8008478:	00dd      	lsls	r5, r3, #3
 800847a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800847e:	00d4      	lsls	r4, r2, #3
 8008480:	4622      	mov	r2, r4
 8008482:	462b      	mov	r3, r5
 8008484:	1814      	adds	r4, r2, r0
 8008486:	653c      	str	r4, [r7, #80]	; 0x50
 8008488:	414b      	adcs	r3, r1
 800848a:	657b      	str	r3, [r7, #84]	; 0x54
 800848c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	461a      	mov	r2, r3
 8008492:	f04f 0300 	mov.w	r3, #0
 8008496:	1891      	adds	r1, r2, r2
 8008498:	61b9      	str	r1, [r7, #24]
 800849a:	415b      	adcs	r3, r3
 800849c:	61fb      	str	r3, [r7, #28]
 800849e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80084a6:	f7f7 fe95 	bl	80001d4 <__aeabi_uldivmod>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4b6c      	ldr	r3, [pc, #432]	; (8008660 <UART_SetConfig+0x38c>)
 80084b0:	fba3 1302 	umull	r1, r3, r3, r2
 80084b4:	095b      	lsrs	r3, r3, #5
 80084b6:	2164      	movs	r1, #100	; 0x64
 80084b8:	fb01 f303 	mul.w	r3, r1, r3
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	3332      	adds	r3, #50	; 0x32
 80084c2:	4a67      	ldr	r2, [pc, #412]	; (8008660 <UART_SetConfig+0x38c>)
 80084c4:	fba2 2303 	umull	r2, r3, r2, r3
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	f003 0207 	and.w	r2, r3, #7
 80084ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4432      	add	r2, r6
 80084d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084d6:	e0b9      	b.n	800864c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084da:	461c      	mov	r4, r3
 80084dc:	f04f 0500 	mov.w	r5, #0
 80084e0:	4622      	mov	r2, r4
 80084e2:	462b      	mov	r3, r5
 80084e4:	1891      	adds	r1, r2, r2
 80084e6:	6139      	str	r1, [r7, #16]
 80084e8:	415b      	adcs	r3, r3
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80084f0:	1912      	adds	r2, r2, r4
 80084f2:	eb45 0303 	adc.w	r3, r5, r3
 80084f6:	f04f 0000 	mov.w	r0, #0
 80084fa:	f04f 0100 	mov.w	r1, #0
 80084fe:	00d9      	lsls	r1, r3, #3
 8008500:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008504:	00d0      	lsls	r0, r2, #3
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	eb12 0804 	adds.w	r8, r2, r4
 800850e:	eb43 0905 	adc.w	r9, r3, r5
 8008512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	4618      	mov	r0, r3
 8008518:	f04f 0100 	mov.w	r1, #0
 800851c:	f04f 0200 	mov.w	r2, #0
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	008b      	lsls	r3, r1, #2
 8008526:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800852a:	0082      	lsls	r2, r0, #2
 800852c:	4640      	mov	r0, r8
 800852e:	4649      	mov	r1, r9
 8008530:	f7f7 fe50 	bl	80001d4 <__aeabi_uldivmod>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4b49      	ldr	r3, [pc, #292]	; (8008660 <UART_SetConfig+0x38c>)
 800853a:	fba3 2302 	umull	r2, r3, r3, r2
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	011e      	lsls	r6, r3, #4
 8008542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008544:	4618      	mov	r0, r3
 8008546:	f04f 0100 	mov.w	r1, #0
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	1894      	adds	r4, r2, r2
 8008550:	60bc      	str	r4, [r7, #8]
 8008552:	415b      	adcs	r3, r3
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800855a:	1812      	adds	r2, r2, r0
 800855c:	eb41 0303 	adc.w	r3, r1, r3
 8008560:	f04f 0400 	mov.w	r4, #0
 8008564:	f04f 0500 	mov.w	r5, #0
 8008568:	00dd      	lsls	r5, r3, #3
 800856a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800856e:	00d4      	lsls	r4, r2, #3
 8008570:	4622      	mov	r2, r4
 8008572:	462b      	mov	r3, r5
 8008574:	1814      	adds	r4, r2, r0
 8008576:	64bc      	str	r4, [r7, #72]	; 0x48
 8008578:	414b      	adcs	r3, r1
 800857a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800857c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	4618      	mov	r0, r3
 8008582:	f04f 0100 	mov.w	r1, #0
 8008586:	f04f 0200 	mov.w	r2, #0
 800858a:	f04f 0300 	mov.w	r3, #0
 800858e:	008b      	lsls	r3, r1, #2
 8008590:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008594:	0082      	lsls	r2, r0, #2
 8008596:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800859a:	f7f7 fe1b 	bl	80001d4 <__aeabi_uldivmod>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4b2f      	ldr	r3, [pc, #188]	; (8008660 <UART_SetConfig+0x38c>)
 80085a4:	fba3 1302 	umull	r1, r3, r3, r2
 80085a8:	095b      	lsrs	r3, r3, #5
 80085aa:	2164      	movs	r1, #100	; 0x64
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	3332      	adds	r3, #50	; 0x32
 80085b6:	4a2a      	ldr	r2, [pc, #168]	; (8008660 <UART_SetConfig+0x38c>)
 80085b8:	fba2 2303 	umull	r2, r3, r2, r3
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085c2:	441e      	add	r6, r3
 80085c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c6:	4618      	mov	r0, r3
 80085c8:	f04f 0100 	mov.w	r1, #0
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	1894      	adds	r4, r2, r2
 80085d2:	603c      	str	r4, [r7, #0]
 80085d4:	415b      	adcs	r3, r3
 80085d6:	607b      	str	r3, [r7, #4]
 80085d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085dc:	1812      	adds	r2, r2, r0
 80085de:	eb41 0303 	adc.w	r3, r1, r3
 80085e2:	f04f 0400 	mov.w	r4, #0
 80085e6:	f04f 0500 	mov.w	r5, #0
 80085ea:	00dd      	lsls	r5, r3, #3
 80085ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085f0:	00d4      	lsls	r4, r2, #3
 80085f2:	4622      	mov	r2, r4
 80085f4:	462b      	mov	r3, r5
 80085f6:	eb12 0a00 	adds.w	sl, r2, r0
 80085fa:	eb43 0b01 	adc.w	fp, r3, r1
 80085fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	4618      	mov	r0, r3
 8008604:	f04f 0100 	mov.w	r1, #0
 8008608:	f04f 0200 	mov.w	r2, #0
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	008b      	lsls	r3, r1, #2
 8008612:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008616:	0082      	lsls	r2, r0, #2
 8008618:	4650      	mov	r0, sl
 800861a:	4659      	mov	r1, fp
 800861c:	f7f7 fdda 	bl	80001d4 <__aeabi_uldivmod>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <UART_SetConfig+0x38c>)
 8008626:	fba3 1302 	umull	r1, r3, r3, r2
 800862a:	095b      	lsrs	r3, r3, #5
 800862c:	2164      	movs	r1, #100	; 0x64
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	3332      	adds	r3, #50	; 0x32
 8008638:	4a09      	ldr	r2, [pc, #36]	; (8008660 <UART_SetConfig+0x38c>)
 800863a:	fba2 2303 	umull	r2, r3, r2, r3
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	f003 020f 	and.w	r2, r3, #15
 8008644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4432      	add	r2, r6
 800864a:	609a      	str	r2, [r3, #8]
}
 800864c:	bf00      	nop
 800864e:	377c      	adds	r7, #124	; 0x7c
 8008650:	46bd      	mov	sp, r7
 8008652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008656:	bf00      	nop
 8008658:	40011000 	.word	0x40011000
 800865c:	40011400 	.word	0x40011400
 8008660:	51eb851f 	.word	0x51eb851f

08008664 <__libc_init_array>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	4d0d      	ldr	r5, [pc, #52]	; (800869c <__libc_init_array+0x38>)
 8008668:	4c0d      	ldr	r4, [pc, #52]	; (80086a0 <__libc_init_array+0x3c>)
 800866a:	1b64      	subs	r4, r4, r5
 800866c:	10a4      	asrs	r4, r4, #2
 800866e:	2600      	movs	r6, #0
 8008670:	42a6      	cmp	r6, r4
 8008672:	d109      	bne.n	8008688 <__libc_init_array+0x24>
 8008674:	4d0b      	ldr	r5, [pc, #44]	; (80086a4 <__libc_init_array+0x40>)
 8008676:	4c0c      	ldr	r4, [pc, #48]	; (80086a8 <__libc_init_array+0x44>)
 8008678:	f000 f82e 	bl	80086d8 <_init>
 800867c:	1b64      	subs	r4, r4, r5
 800867e:	10a4      	asrs	r4, r4, #2
 8008680:	2600      	movs	r6, #0
 8008682:	42a6      	cmp	r6, r4
 8008684:	d105      	bne.n	8008692 <__libc_init_array+0x2e>
 8008686:	bd70      	pop	{r4, r5, r6, pc}
 8008688:	f855 3b04 	ldr.w	r3, [r5], #4
 800868c:	4798      	blx	r3
 800868e:	3601      	adds	r6, #1
 8008690:	e7ee      	b.n	8008670 <__libc_init_array+0xc>
 8008692:	f855 3b04 	ldr.w	r3, [r5], #4
 8008696:	4798      	blx	r3
 8008698:	3601      	adds	r6, #1
 800869a:	e7f2      	b.n	8008682 <__libc_init_array+0x1e>
 800869c:	08008908 	.word	0x08008908
 80086a0:	08008908 	.word	0x08008908
 80086a4:	08008908 	.word	0x08008908
 80086a8:	0800890c 	.word	0x0800890c

080086ac <memcpy>:
 80086ac:	440a      	add	r2, r1
 80086ae:	4291      	cmp	r1, r2
 80086b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80086b4:	d100      	bne.n	80086b8 <memcpy+0xc>
 80086b6:	4770      	bx	lr
 80086b8:	b510      	push	{r4, lr}
 80086ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086c2:	4291      	cmp	r1, r2
 80086c4:	d1f9      	bne.n	80086ba <memcpy+0xe>
 80086c6:	bd10      	pop	{r4, pc}

080086c8 <memset>:
 80086c8:	4402      	add	r2, r0
 80086ca:	4603      	mov	r3, r0
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d100      	bne.n	80086d2 <memset+0xa>
 80086d0:	4770      	bx	lr
 80086d2:	f803 1b01 	strb.w	r1, [r3], #1
 80086d6:	e7f9      	b.n	80086cc <memset+0x4>

080086d8 <_init>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	bf00      	nop
 80086dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086de:	bc08      	pop	{r3}
 80086e0:	469e      	mov	lr, r3
 80086e2:	4770      	bx	lr

080086e4 <_fini>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	bf00      	nop
 80086e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ea:	bc08      	pop	{r3}
 80086ec:	469e      	mov	lr, r3
 80086ee:	4770      	bx	lr
